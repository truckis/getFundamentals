/*!
 * 
 * 	drivewealth-back-office-javascript - JavaScript bindings for the DriveWealth Back Office API
 * 	Author: John Shammas
 * 	Version: v1.0.0
 * 	Url: https://github.com/drivewealth/drivewealth-back-office-javascript
 * 	License(s): ISC
 * 
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["drivewealth-back-office"] = factory();
	else
		root["drivewealth-back-office"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.request = exports.setup = exports.Roles = exports.MoneyMovement = exports.Reports = exports.Document = exports.Commission = exports.Order = exports.Transaction = exports.Instrument = exports.User = exports.Sessions = exports.Config = exports.Auth = exports.Violation = exports.Advisors = exports.Account = exports.HOSTS = exports.ENVIRONMENTS = undefined;
	
	var _Account = __webpack_require__(1);
	
	var _Account2 = _interopRequireDefault(_Account);
	
	var _Auth = __webpack_require__(8);
	
	var _Auth2 = _interopRequireDefault(_Auth);
	
	var _Sessions = __webpack_require__(6);
	
	var _Sessions2 = _interopRequireDefault(_Sessions);
	
	var _User = __webpack_require__(9);
	
	var _User2 = _interopRequireDefault(_User);
	
	var _Instrument = __webpack_require__(12);
	
	var _Instrument2 = _interopRequireDefault(_Instrument);
	
	var _Transaction = __webpack_require__(13);
	
	var _Transaction2 = _interopRequireDefault(_Transaction);
	
	var _Order = __webpack_require__(14);
	
	var _Order2 = _interopRequireDefault(_Order);
	
	var _Commission = __webpack_require__(15);
	
	var _Commission2 = _interopRequireDefault(_Commission);
	
	var _Document = __webpack_require__(10);
	
	var _Document2 = _interopRequireDefault(_Document);
	
	var _Reports = __webpack_require__(16);
	
	var _Reports2 = _interopRequireDefault(_Reports);
	
	var _Violation = __webpack_require__(7);
	
	var _Violation2 = _interopRequireDefault(_Violation);
	
	var _MoneyMovement = __webpack_require__(17);
	
	var _MoneyMovement2 = _interopRequireDefault(_MoneyMovement);
	
	var _Roles = __webpack_require__(18);
	
	var _Roles2 = _interopRequireDefault(_Roles);
	
	var _Config = __webpack_require__(3);
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	var _Advisors = __webpack_require__(19);
	
	var _Advisors2 = _interopRequireDefault(_Advisors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.ENVIRONMENTS = _Config.ENVIRONMENTS;
	exports.HOSTS = _Config.HOSTS;
	exports.Account = _Account2.default;
	exports.Advisors = _Advisors2.default;
	exports.Violation = _Violation2.default;
	exports.Auth = _Auth2.default;
	exports.Config = _Config.Config;
	exports.Sessions = _Sessions2.default;
	exports.User = _User2.default;
	exports.Instrument = _Instrument2.default;
	exports.Transaction = _Transaction2.default;
	exports.Order = _Order2.default;
	exports.Commission = _Commission2.default;
	exports.Document = _Document2.default;
	exports.Reports = _Reports2.default;
	exports.MoneyMovement = _MoneyMovement2.default;
	exports.Roles = _Roles2.default;
	exports.setup = _Config.setup;
	exports.request = _request2.default;
	exports.default = {
		ENVIRONMENTS: _Config.ENVIRONMENTS,
		HOSTS: _Config.HOSTS,
	
		Account: _Account2.default,
		Advisors: _Advisors2.default,
		Violation: _Violation2.default,
		Auth: _Auth2.default,
		Config: _Config.Config,
		Sessions: _Sessions2.default,
		User: _User2.default,
		Instrument: _Instrument2.default,
		Transaction: _Transaction2.default,
		Order: _Order2.default,
		Commission: _Commission2.default,
		Document: _Document2.default,
		Reports: _Reports2.default,
		MoneyMovement: _MoneyMovement2.default,
		Roles: _Roles2.default,
	
		setup: _Config.setup,
		request: _request2.default
	};

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	var _Violation = __webpack_require__(7);
	
	var _Violation2 = _interopRequireDefault(_Violation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @description Accounts are assigned to a user and a user can have many accounts. There are a
	 * few attributes that define the account, how and when it can trade and who is trading it.
	 * @example import { Account } from "drivewealth-back-office-javascript";
	 */
	var Account = function () {
		function Account() {
			_classCallCheck(this, Account);
		}
	
		_createClass(Account, null, [{
			key: "create",
	
	
			/**
	   * Create a new account tied to a user.
	   */
			value: function create(userID, details) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/accounts",
					body: _extends({}, details, {
						userID: userID
					})
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get account by accountID.
	   */
	
			/**
	   * @constant
	   * @property {string} CASH
	   * @property {string} ORDERS
	   * @property {string} TRANSACTIONS
	   * @property {string} EQUITY
	   * @property {string} VIOLATIONS
	   * @property {string} ALL
	   */
	
		}, {
			key: "get",
			value: function get(accountID) {
				return (0, _request2.default)({
					endpoint: "/accounts/" + accountID
				}).then(function (data) {
					return data.body.account;
				});
			}
	
			/**
	   * Get account by accountNo.
	   */
	
		}, {
			key: "getByAccountNo",
			value: function getByAccountNo(accountNo) {
				return (0, _request2.default)({
					endpoint: "/accounts/search?accountNo=" + accountNo.toUpperCase()
				}).then(function (data) {
					return data.body.result;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "edit",
			value: function edit(accountID, details) {
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: "/accounts/" + accountID,
					body: details
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get Account Summary. Optionally retrieve specific data with a [Blotter Type](#blottertypes).
	   */
	
		}, {
			key: "getBlotter",
			value: function getBlotter(accountID, type) {
				return (0, _request2.default)({
					method: "GET",
					endpoint: "/accounts/" + accountID + "/summary"
				}).then(function (_ref) {
					var accountSummary = _ref.body.accountSummary;
					return type ? accountSummary[type] : accountSummary;
				});
			}
	
			/**
	   * Transfer positions and/or cash from one account to another.
	   */
	
		}, {
			key: "transfer",
			value: function transfer(details) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/accounts/transfer",
					body: _extends({}, details, {
						accountFrom: details.accountFrom.toUpperCase(),
						accountTo: details.accountTo.toUpperCase()
					})
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "createViolation",
			value: function createViolation(accountID, details) {
				return _Violation2.default.create(accountID, details);
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getViolations",
			value: function getViolations(accountID) {
				return _Violation2.default.get(accountID);
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "deleteViolation",
			value: function deleteViolation(accountID, violationID) {
				return _Violation2.default.delete(accountID, violationID);
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "updateCommission",
			value: function updateCommission(accountID, commissionID) {
				return (0, _request2.default)({
					endpoint: "/accounts/" + accountID + "/commissions",
					method: "POST",
					body: { commissionID: commissionID }
				}).then(function (data) {
					return data.body.account;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getMarginCallList",
			value: function getMarginCallList() {
				return (0, _request2.default)({
					endpoint: "/accounts/margin-call"
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getMarginCallAccountSummaries",
			value: function getMarginCallAccountSummaries() {
				return Account.getMarginCallList().then(function (accounts) {
					return Promise.all(accounts.map(function (_ref2) {
						var id = _ref2.id;
						return Account.getBlotter(id);
					})).then(function (summaries) {
						return { accounts: accounts, summaries: summaries };
					});
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "editPosition",
			value: function editPosition(accountID, symbol, qty, price) {
				return (0, _request2.default)({
					endpoint: "/accounts/" + accountID + "/positions",
					method: "PATCH",
					body: {
						symbol: symbol,
						quantityAdjustment: qty,
						price: price
					}
				}).then(function () {});
			}
	
			// I know Object is very bad type
	
		}, {
			key: "getPortfolioStatus",
			value: function getPortfolioStatus(accountID) {
				return (0, _request2.default)({
					endpoint: "/accounts/" + accountID + "/portfolio"
				}).then(function (data) {
					return data.body;
				});
			}
		}]);
	
		return Account;
	}();
	
	Account.BLOTTER_TYPES = {
		CASH: "cash",
		ORDERS: "orders",
		TRANSACTIONS: "transactions",
		EQUITY: "equity",
		VIOLATIONS: "violations",
		ALL: null
	};
	exports.default = Account;
	module.exports = exports["default"];

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.default = request;
	
	var _Config = __webpack_require__(3);
	
	var _Error = __webpack_require__(4);
	
	var _Sessions = __webpack_require__(6);
	
	var _Sessions2 = _interopRequireDefault(_Sessions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * @function request
	 * @description Normally, it is unnecessary to use this function and this is for internal use only.
	 *  Call request() if you need to make a custom API call that is not covered by another function.
	 * @param {object} options
	 * @param {string} options.method
	 * @param {string} options.endpoint
	 * @param {string} options.sessionKey
	 * @param {string} options.body
	 * @param {Object.<string, string>} options.addlHeaders
	 * @param {string} options.host - One of Config.HOSTS
	 * @returns {Promise.<{body: string, statusCode: number, headers: Object<string, string>}>}
	 */
	function request(_ref) {
		var _ref$method = _ref.method,
		    method = _ref$method === undefined ? "GET" : _ref$method,
		    endpoint = _ref.endpoint,
		    sessionKey = _ref.sessionKey,
		    body = _ref.body,
		    _ref$addlHeaders = _ref.addlHeaders,
		    addlHeaders = _ref$addlHeaders === undefined ? {} : _ref$addlHeaders,
		    _ref$host = _ref.host,
		    host = _ref$host === undefined ? _Config.HOSTS.API : _ref$host,
		    _ref$authenticated = _ref.authenticated,
		    authenticated = _ref$authenticated === undefined ? true : _ref$authenticated,
		    _ref$usesAppKey = _ref.usesAppKey,
		    usesAppKey = _ref$usesAppKey === undefined ? true : _ref$usesAppKey;
	
		if (!_Config.Config.httpImpl) throw new Error("httpImpl is not setup!");
		if (!sessionKey) {
			var savedSessionKey = _Sessions2.default.get();
			if (savedSessionKey) sessionKey = savedSessionKey;
		}
	
		var headers = {
			Accept: "application/json"
		};
		if (usesAppKey) {
			headers["dw-client-app-key"] = _Config.Config.appKey;
		}
		if (method === "POST" || method === "PUT" || method === "PATCH") {
			headers["Content-Type"] = "application/json";
		}
		if (sessionKey && authenticated) {
			headers["dw-auth-token"] = sessionKey;
		}
		for (var _header in addlHeaders) {
			headers[_header] = addlHeaders[_header];
		}
	
		endpoint = _Config.Config.env[host] + endpoint;
	
		if (headers["Content-Type"] === "application/json") body = JSON.stringify(body);
	
		if (addlHeaders && addlHeaders["Content-Type"]) {
			if (!body) throw new Error("No body provided, but content-type header was set.");
			if (addlHeaders["Content-Type"] === "application/x-www-form-urlencoded" && body instanceof Object && body.constructor === Object) {
				var mappableObj = body;
				body = Object.keys(mappableObj).map(function (key) {
					return encodeURIComponent(key) + "=" + encodeURIComponent(mappableObj[key]);
				}).join("&");
			}
		}
	
		return new Promise(function (resolve, reject) {
			return _Config.Config.httpImpl(method, endpoint, headers, body, function (statusCode, resHeaders, resBody) {
				// eslint-disable-line arrow-body-style
				var contentType = resHeaders["Content-Type"] || resHeaders["content-type"] || "";
				if (resBody && contentType.indexOf("application/json") !== -1) {
					try {
						resBody = JSON.parse(resBody);
					} catch (err) {
						// resBody will remain as is
					}
				}
	
				if (String(statusCode)[0] === "2" || String(statusCode)[0] === "3") {
					return resolve({
						body: resBody,
						statusCode: statusCode,
						headers: resHeaders
					});
				}
	
				var errorMessage = "No error message was returned from the server.";
				var errorCode = "-1";
				if (resBody) {
					if (resBody.error) {
						errorMessage = resBody.error.message;
						errorCode = resBody.error.errorCode;
					}
	
					if (resBody.message && resBody.errorCode) {
						errorMessage = resBody.message;
						errorCode = resBody.errorCode;
					}
	
					if (resBody.verificationResponse) {
						errorMessage = resBody.verificationResponse.message;
						errorCode = "-1";
					}
				}
	
				if (statusCode === 401) {
					_Config.Config.onUnAuth();
					return reject(new _Error.DriveWealthSessionError(errorMessage, resBody, statusCode, resHeaders, errorCode));
				}
	
				return reject(new _Error.DriveWealthError(errorMessage, resBody, statusCode, resHeaders, errorCode));
			});
		});
	}
	module.exports = exports["default"];

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _UAT, _PROD;
	
	exports.setup = setup;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	/**
	 * Servers to send a request to
	 * @name HOSTS
	 * @property {string} API
	 * @property {string} APPS
	 * @property {string} REPORTS
	 * @memberof Config
	 * @constant
	 */
	var HOSTS = exports.HOSTS = {
		API: "api",
		REPORTS: "reports"
	};
	
	/**
	 * Servers to send a request to
	 * @name ENVIRONMENTS
	 * @property {object} UAT
	 * @property {object} PROD
	 * @memberof Config
	 * @constant
	 */
	
	var ENVIRONMENTS = exports.ENVIRONMENTS = {
		UAT: (_UAT = {}, _defineProperty(_UAT, HOSTS.API, "http://bo-api.drivewealth.io/back-office"), _defineProperty(_UAT, HOSTS.REPORTS, "http://reports.drivewealth.io"), _UAT),
		PROD: (_PROD = {}, _defineProperty(_PROD, HOSTS.API, "https://bo-api.drivewealth.net/back-office"), _defineProperty(_PROD, HOSTS.REPORTS, "https://reports.drivewealth.net"), _PROD)
	};
	
	/**
	 * @module Config
	 */
	var Config = exports.Config = {
		env: ENVIRONMENTS.UAT,
		httpImpl: function httpImpl() {},
		appVersion: "UNSET",
		appKey: "UNSET",
		onUnAuth: function onUnAuth() {}
	};
	
	/**
	 * @example import drivewealth from "drivewealth-back-office-javascript";
	 *
	 * drivewealth.setup({
	 *     env: drivewealth.ENVIRONMENTS.UAT,
	 *     httpImpl: require("drivewealth-back-office-javascript/lib/httpImpls/request.js"),
	 *     appVersion: "1.0",
	 *     appKey: process.env.BO_APP_KEY,
	 * });
	 */
	function setup(_ref) {
		var env = _ref.env,
		    httpImpl = _ref.httpImpl,
		    appVersion = _ref.appVersion,
		    appKey = _ref.appKey;
	
		Config.env = env;
		Config.httpImpl = httpImpl;
		Config.appVersion = appVersion;
		Config.appKey = appKey;
	}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.DriveWealthSessionError = exports.DriveWealthError = undefined;
	
	var _extendableErrorClass = __webpack_require__(5);
	
	var _extendableErrorClass2 = _interopRequireDefault(_extendableErrorClass);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class DriveWealthError
	 */
	var DriveWealthError = exports.DriveWealthError = function (_ExtendableError) {
		_inherits(DriveWealthError, _ExtendableError);
	
		function DriveWealthError(message, body, statusCode, headers, errorCode) {
			_classCallCheck(this, DriveWealthError);
	
			var _this = _possibleConstructorReturn(this, (DriveWealthError.__proto__ || Object.getPrototypeOf(DriveWealthError)).call(this, message));
	
			_this.body = body;
			_this.statusCode = statusCode;
			_this.headers = headers;
			_this.errorCode = errorCode;
			return _this;
		}
	
		return DriveWealthError;
	}(_extendableErrorClass2.default);
	
	/**
	 * @class DriveWealthSessionError
	 */
	
	
	var DriveWealthSessionError = exports.DriveWealthSessionError = function (_ExtendableError2) {
		_inherits(DriveWealthSessionError, _ExtendableError2);
	
		function DriveWealthSessionError(message, body, statusCode, headers, errorCode) {
			_classCallCheck(this, DriveWealthSessionError);
	
			var _this2 = _possibleConstructorReturn(this, (DriveWealthSessionError.__proto__ || Object.getPrototypeOf(DriveWealthSessionError)).call(this, message));
	
			_this2.body = body;
			_this2.statusCode = statusCode;
			_this2.headers = headers;
			_this2.errorCode = errorCode;
			return _this2;
		}
	
		return DriveWealthSessionError;
	}(_extendableErrorClass2.default);
	
	exports.default = {
		DriveWealthError: DriveWealthError,
		DriveWealthSessionError: DriveWealthSessionError
	};

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	"use strict";
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _extendableBuiltin(cls) {
	    function ExtendableBuiltin() {
	        var instance = Reflect.construct(cls, Array.from(arguments));
	        Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
	        return instance;
	    }
	
	    ExtendableBuiltin.prototype = Object.create(cls.prototype, {
	        constructor: {
	            value: cls,
	            enumerable: false,
	            writable: true,
	            configurable: true
	        }
	    });
	
	    if (Object.setPrototypeOf) {
	        Object.setPrototypeOf(ExtendableBuiltin, cls);
	    } else {
	        ExtendableBuiltin.__proto__ = cls;
	    }
	
	    return ExtendableBuiltin;
	}
	
	var ExtendableError = function (_extendableBuiltin2) {
	    _inherits(ExtendableError, _extendableBuiltin2);
	
	    function ExtendableError(message) {
	        _classCallCheck(this, ExtendableError);
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ExtendableError).call(this, message));
	
	        _this.name = _this.constructor.name;
	        _this.message = message;
	        if (typeof Error.captureStackTrace === 'function') {
	            Error.captureStackTrace(_this, _this.constructor);
	        } else {
	            _this.stack = new Error(message).stack;
	        }
	        return _this;
	    }
	
	    return ExtendableError;
	}(_extendableBuiltin(Error));
	
	module.exports = ExtendableError;
	


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Sessions = function () {
		function Sessions() {
			_classCallCheck(this, Sessions);
	
			this.key = null;
		}
	
		_createClass(Sessions, [{
			key: "get",
			value: function get() {
				return this.key;
			}
		}, {
			key: "save",
			value: function save(key) {
				this.key = key;
			}
		}, {
			key: "remove",
			value: function remove() {
				this.key = null;
			}
		}]);
	
		return Sessions;
	}();
	
	var sessions = exports.sessions = new Sessions();
	exports.default = sessions;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @example import { Violation } from "drivewealth-back-office-javascript";
	 */
	var Violation = function () {
		function Violation() {
			_classCallCheck(this, Violation);
		}
	
		_createClass(Violation, null, [{
			key: "create",
	
			/**
	   * Create a new violation tied to an account.
	   */
			value: function create(accountID, details) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/accounts/" + accountID + "/violations",
					body: details
				}).then(function () {
					return undefined;
				});
			}
	
			/**
	   * Get violations of an account.
	   */
	
		}, {
			key: "get",
			value: function get(accountID) {
				return (0, _request2.default)({ endpoint: "/accounts/" + accountID + "/violations" }).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Delete a violation from an account.
	   */
	
		}, {
			key: "delete",
			value: function _delete(accountID, violationID) {
				return (0, _request2.default)({
					method: "DELETE",
					endpoint: "/accounts/" + accountID + "/violations/" + violationID
				}).then(function () {
					return undefined;
				});
			}
		}]);
	
		return Violation;
	}();
	
	exports.default = Violation;
	module.exports = exports["default"];

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	var _Config = __webpack_require__(3);
	
	var _Sessions = __webpack_require__(6);
	
	var _Sessions2 = _interopRequireDefault(_Sessions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class Auth
	 * @example import { Auth } from "drivewealth-back-office-javascript";
	 */
	var Auth = function () {
		function Auth() {
			_classCallCheck(this, Auth);
		}
	
		_createClass(Auth, null, [{
			key: "login",
	
	
			/**
	   * @static
	   */
			value: function login(username, password) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/auth",
					body: {
						username: username,
						password: password,
						appVersion: _Config.Config.appVersion,
	
						ip_address: "unknown",
						languageID: "en_US",
						osVersion: "unknown",
						osType: "unknown",
						scrRes: "unknown",
						appTypeID: 4
					}
				}).then(function (_ref) {
					var body = _ref.body;
	
					if (body.authToken) {
						_Sessions2.default.save(body.authToken);
						return body;
					}
	
					Auth.pendingTempCode = body.tempCode;
					Auth.pendingUsername = body.username;
					delete body.tempCode;
					delete body.username;
					return body;
				});
			}
	
			/**
	   * @static
	   */
	
	
			/**
	   * @constant
	   * @property {string} SMS
	   */
	
		}, {
			key: "issue2FACode",
			value: function issue2FACode(type) {
				if (!Auth.pendingTempCode) throw new Error("No login pending. Call Auth.login() first!");
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/auth/2fa",
					body: {
						username: Auth.pendingUsername,
						tempCode: Auth.pendingTempCode,
						"2FAType": type,
						locale: "en"
					}
				}).then(function (_ref2) {
					var body = _ref2.body;
	
					Auth.pending2FAType = type;
					return body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "verify2FACode",
			value: function verify2FACode(code) {
				if (!Auth.pending2FAType) {
					throw new Error("No login pending. Call Auth.login(), then Auth.issue2FACode() first.");
				}
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/auth/2fa/verification",
					body: {
						username: Auth.pendingUsername,
						tempCode: Auth.pendingTempCode,
						"2FAType": Auth.pending2FAType,
						verificationCode: code
					}
				}).then(function (_ref3) {
					var body = _ref3.body;
	
					Auth.pendingTempCode = null;
					Auth.pendingUsername = null;
					Auth.pending2FAType = null;
					_Sessions2.default.save(body.authResponse.authToken);
					return body.authResponse;
				});
			}
		}, {
			key: "onUnAuth",
			value: function onUnAuth(callback) {
				_Config.Config.onUnAuth = callback;
			}
		}]);
	
		return Auth;
	}();
	
	Auth.pendingTempCode = null;
	Auth.pendingUsername = null;
	Auth.pending2FAType = null;
	Auth.VERIFICATION_TYPES = {
		SMS: "sms"
	};
	exports.default = Auth;
	module.exports = exports["default"];

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	var _Account = __webpack_require__(1);
	
	var _Account2 = _interopRequireDefault(_Account);
	
	var _Document = __webpack_require__(10);
	
	var _Document2 = _interopRequireDefault(_Document);
	
	var _documents = __webpack_require__(11);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @description The Users API allows you to create a multitude of users.
	 * @example import { User } from "drivewealth-back-office-javascript";
	 */
	var User = function () {
		function User() {
			_classCallCheck(this, User);
		}
	
		_createClass(User, null, [{
			key: "create",
	
			/**
	   * Create a new user.
	   */
			value: function create(details) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/users",
					body: details
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get specific details about a particular user.
	   */
	
		}, {
			key: "get",
			value: function get(userID) {
				return (0, _request2.default)({ endpoint: "/users/" + userID }).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Edit information on a particular user.
	   */
	
		}, {
			key: "edit",
			value: function edit(userID, details) {
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: "/users/" + userID,
					body: details
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getNotes",
			value: function getNotes(userID) {
				return (0, _request2.default)({
					endpoint: "/users/" + userID + "/notes"
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "createNote",
			value: function createNote(userID, note, subject) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/users/" + userID + "/notes",
					body: {
						userID: userID,
						subject: JSON.stringify(subject),
						note: note
					}
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get accounts that belong to a user.
	   */
	
		}, {
			key: "getAccounts",
			value: function getAccounts(userID) {
				return (0, _request2.default)({ endpoint: "/users/" + userID + "/accounts" }).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Search for users based on one or more fields contained in a query object.
	   */
	
		}, {
			key: "advancedSearch",
			value: function advancedSearch(searchQuery) {
				return (0, _request2.default)({
					endpoint: "/users/search?" + Object.keys(searchQuery).filter(function (key) {
						return searchQuery[key];
					}).map(function (key) {
						return key + "=" + encodeURIComponent(String(searchQuery[key]));
					}).join("&")
				}).then(function (data) {
					return data.body.resultSet;
				});
			}
	
			/**
	   * @constant
	   * @property {RegExp} accountNo
	   * @property {RegExp} userID
	   * @property {RegExp} accountID
	   * @property {RegExp} phoneNumber
	   * @property {RegExp} fullName
	   */
	
		}, {
			key: "getFieldsToSearch",
			value: function getFieldsToSearch(rawQuery) {
				var fields = ["accountNo", "userID", "accountID", "phoneNumber", "fullName"];
	
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var _field = _step.value;
	
						if (User.REGEXPS[_field].test(rawQuery)) {
							return [_field];
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				return ["username", "firstName", "lastName", "email"];
			}
		}, {
			key: "getSearchQuery",
			value: function getSearchQuery(rawQuery) {
				return User.getFieldsToSearch(rawQuery).reduce(function (searchQuery, field) {
					return _extends({}, searchQuery, _defineProperty({}, field, rawQuery));
				}, {});
			}
	
			/**
	   * Search for users.
	   *
	   * @param {string} rawQuery can be a userID, accountNo, accountID,
	   * phoneNumber, fullName, username, firstName, lastName, or email.
	   */
	
		}, {
			key: "search",
			value: function search(rawQuery) {
				var searchQuery = User.getSearchQuery(rawQuery);
	
				// each type of query may use a different request method
				var requests = Object.keys(searchQuery).map(function (field) {
					var value = searchQuery[field].trim();
					switch (field) {
						case "userID":
							return User.get(value);
	
						case "accountNo":
							return _Account2.default.getByAccountNo(value).then(function (account) {
								return User.get(account.userID);
							});
	
						case "accountID":
							return _Account2.default.get(value).then(function (account) {
								return User.get(account.userID);
							});
	
						case "fullName":
							{
								var _value$split = value.split(/\s/),
								    _value$split2 = _slicedToArray(_value$split, 2),
								    first = _value$split2[0],
								    last = _value$split2[1];
	
								return (0, _request2.default)({
									endpoint: "/users/search?firstName=" + first + "&lastName=" + last
								}).then(function (data) {
									return data.body.resultSet;
								});
							}
	
						case "username":
						case "firstName":
						case "lastName":
						case "phoneNumber":
						case "email":
							return (0, _request2.default)({
								endpoint: "/users/search?" + field + "=" + value
							}).then(function (data) {
								return data.body.resultSet;
							});
	
						default:
							{
								throw new Error("Attempted to search for an unknown query type (" + field + ")");
							}
					}
				});
	
				return Promise.all(requests).then(function (responses) {
					// transform nested array into single-level array
					var results = responses.reduce(function (acc, next) {
						return [].concat(_toConsumableArray(acc), _toConsumableArray(Array.isArray(next) ? next : [next]));
					}, []);
	
					// remove duplicate results by converting from array to object and back to array
					var resultsByID = results.reduce(function (acc, next) {
						// Can we simplify this type? Couldn't find a way to make it simpler in Flow
						var userID = typeof next.id === "string" ? next.id : typeof next.userID === "string" ? next.userID : "";
	
						return Object.assign({}, acc, _defineProperty({}, userID, next));
					}, {});
					return Object.keys(resultsByID).map(function (key) {
						return resultsByID[key];
					});
				});
			}
	
			/**
	   * Get documents that belong to a user.
	   */
	
		}, {
			key: "getDocuments",
			value: function getDocuments(userID) {
				return (0, _request2.default)({
					endpoint: "/users/" + userID + "/documents"
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Creates a new document from a base64 image string or a JavaScript Image file.
	   */
	
		}, {
			key: "createDocument",
			value: function createDocument(userID, type, image) {
				return _Document2.default.create(userID, type, image);
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "openDocument",
			value: function openDocument(documentID) {
				return _Document2.default.getURL(documentID);
			}
	
			/**
	   * static
	   */
	
		}, {
			key: "getKYCUsers",
			value: function getKYCUsers() {
				return (0, _request2.default)({
					endpoint: "/users/kyc-exception"
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "patchKYCUsers",
			value: function patchKYCUsers(method) {
				for (var _len = arguments.length, userIDs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
					userIDs[_key - 1] = arguments[_key];
				}
	
				return Promise.all(userIDs.map(function (userID) {
					return (0, _request2.default)({
						endpoint: "/users/kyc-exception/" + userID,
						method: "PATCH",
						body: {
							method: method.toUpperCase()
						}
					});
				}))
				// if the method declaration says it returns void, it should
				.then(function () {});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getPendingCounts",
			value: function getPendingCounts() {
				return (0, _documents.getPendingCounts)("users");
			}
	
			/**
	   * @static
	   * @param query
	   */
	
		}, {
			key: "getPending",
			value: function getPending(query) {
				return (0, _documents.getPending)("nextPendingUserApproval", query);
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "review",
			value: function review(userID) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/users/review",
					body: { userID: userID }
				}).then(function () {
					return undefined;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "updateUserRole",
			value: function updateUserRole(permissionGroupID, userID) {
				var type = "PERMISSIONS_INFO";
				var body = {
					"documents": [{
						type: type,
						data: {
							id: permissionGroupID
						}
					}]
				};
	
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: "/users/" + userID,
					body: body
				}).then(function (data) {
					return data.body;
				});
			}
		}]);
	
		return User;
	}();
	
	User.REGEXPS = {
		accountNo: /^[A-Za-z]{4}\d{6}$/,
		userID: /^[A-Za-z\d]{8}-[A-Za-z\d]{4}-[A-Za-z\d]{4}-[A-Za-z\d]{4}-[A-Za-z\d]{12}$/,
		// eslint-disable-next-line max-len
		accountID: /^[A-Za-z\d]{8}-[A-Za-z\d]{4}-[A-Za-z\d]{4}-[A-Za-z\d]{4}-[A-Za-z\d]{12}\.\d{13}$/,
		phoneNumber: /^\d{4}$/,
		fullName: /\S+ \S+/
	};
	exports.default = User;
	module.exports = exports["default"];

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	var _User = __webpack_require__(9);
	
	var _User2 = _interopRequireDefault(_User);
	
	var _documents = __webpack_require__(11);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * In order to prove the identity of a client, they must provide documentary proof
	 * of their identity.
	 */
	var Document = function () {
		function Document() {
			_classCallCheck(this, Document);
		}
	
		_createClass(Document, null, [{
			key: "create",
	
	
			/**
	   * Upload documentary proof of identity for a {@link User}.
	   * @param image A base64 image string or file
	   */
	
	
			/**
	   * @constant
	   * @property {object} PICTURE
	   * @property {string} PICTURE.INVALID
	   * @property {string} PICTURE.MISMATCH_NAME
	   * @property {string} PICTURE.ILLEGIBLE
	   * @property {string} PICTURE.EXPIRED
	   * @property {string} PICTURE.OTHER
	   * @property {object} ADDRESS
	   * @property {string} ADDRESS.INVALID
	   * @property {string} ADDRESS.MISMATCH_NAME
	   * @property {string} ADDRESS.ILLEGIBLE
	   * @property {string} ADDRESS.EXPIRED
	   * @property {string} ADDRESS.OTHER
	   */
			value: function create(userID, type, image) {
				if (typeof image === "string") {
					return (0, _request2.default)({
						method: "POST",
						endpoint: "/documents",
						body: {
							userID: userID,
							type: type,
							document: image
						},
						addlHeaders: {
							Accept: "application/json"
						}
					}).then(function () {
						return undefined;
					});
				}
	
				var body = new FormData();
	
				body.append("userID", userID);
				body.append("documentType", type);
				body.append("documentImage", image);
	
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/documents",
					body: body,
					addlHeaders: {
						"Content-Type": "multipart/form-data"
					}
				}).then(function () {
					return undefined;
				});
			}
	
			/**
	   * Get details about a document.
	   */
	
	
			/**
	   * @constant
	   * @property {string} ENGLISH
	   * @property {string} CHINESE
	   * @property {string} SPANISH
	   * @property {string} PORTUGUESE
	   */
	
			/**
	   * @constant
	   * @property {string} CASH
	   * @property {string} ORDERS
	   * @property {string} TRANSACTIONS
	   * @property {string} EQUITY
	   * @property {string} VIOLATIONS
	   * @property {string} ALL
	   */
	
		}, {
			key: "get",
			value: function get(documentID) {
				return (0, _request2.default)({
					endpoint: "/documents/" + documentID
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get documents that belong to a {@link User}
	   */
	
		}, {
			key: "getByUserID",
			value: function getByUserID(userID) {
				return _User2.default.getDocuments(userID);
			}
	
			/**
	   * Get back a temporary URL to access the file. Access will timeout after 5 minutes.
	   */
	
		}, {
			key: "getURL",
			value: function getURL(documentID) {
				return (0, _request2.default)({
					endpoint: "/documents/" + documentID + "/url"
				}).then(function (data) {
					return data.body.url;
				});
			}
	
			/**
	   * Get details about all documents in the queue.
	   */
	
		}, {
			key: "getPendingCounts",
			value: function getPendingCounts() {
				return (0, _documents.getPendingCounts)("documents");
			}
	
			/**
	   * Get pending documents for a {@link User} in the queue.
	   * @param query either a userID string or an array of language IDs
	   */
	
		}, {
			key: "getPending",
			value: function getPending(query) {
				return (0, _documents.getPending)("nextPending", query);
			}
	
			/**
	   * Update a {@link User}'s document language.
	   */
	
		}, {
			key: "updateLanguage",
			value: function updateLanguage(userID, languageID) {
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: "/documents/updateLanguage",
					body: {
						userID: userID,
						languageID: languageID
					}
				}).then(function () {
					return undefined;
				});
			}
	
			/**
	   * Approve or reject a {@link User}'s documents.
	   */
	
		}, {
			key: "review",
			value: function review(userID, reviewerUserID, documents) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/documents/review",
					body: {
						userID: userID,
						approvedByUserID: reviewerUserID,
						documents: documents
					}
				}).then(function () {
					return undefined;
				});
			}
		}]);
	
		return Document;
	}();
	
	Document.DOCUMENT_TYPES = {
		PHOTO_ID: "PICTURE_ID",
		ADDRESS: "PROOF_OF_ADDRESS",
		PHOTO_ID_AND_ADDRESS: "PICTURE_ID_PROOF_OF_ADDRESS",
		CORPORATE: "CORPORATE",
		TRUST: "TRUST_DOCUMENTS",
		RISK: "RISK_ASSESSMENT",
		TAX: "TAX",
		OTHER: "OTHER"
	};
	Document.REJECTION_REASONS = {
		PICTURE: {
			INVALID: "PICTURE_INVALID_DOCUMENT_TYPE",
			MISMATCH_NAME: "PICTURE_MISMATCH_NAME",
			ILLEGIBLE: "PICTURE_ILLEGIBLE",
			EXPIRED: "PICTURE_EXPIRED",
			OTHER: "PICTURE_OTHER"
		},
		ADDRESS: {
			INVALID: "ADDRESS_INVALID_DOCUMENT_TYPE",
			MISMATCH_ADDRESS: "ADDRESS_MISMATCH_ADDRESS",
			MISMATCH_NAME: "ADDRESS_MISMATCH_NAME",
			ILLEGIBLE: "ADDRESS_ILLEGIBLE",
			EXPIRED: "ADDRESS_EXPIRED",
			OTHER: "ADDRESS_OTHER"
		}
	};
	Document.LANGUAGE_IDS = {
		ENGLISH: "en_US",
		CHINESE: "zh_CN",
		SPANISH: "es_ES",
		PORTUGUESE: "pt_BR"
	};
	exports.default = Document;
	module.exports = exports["default"];

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.getPending = exports.getPendingCounts = undefined;
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var getPendingCounts = exports.getPendingCounts = function getPendingCounts(path) {
		return (0, _request2.default)({
			endpoint: "/" + path + "/getPendingCounts"
		}).then(function (data) {
			return data.body;
		});
	};
	var getPending = exports.getPending = function getPending(path, query) {
		var queryString = Array.isArray(query) ? "languageList=" + query.join(",") : "userID=" + query;
	
		return (0, _request2.default)({
			endpoint: "/users/" + path + "?" + queryString
		}).then(function (data) {
			return Object.assign({}, data.body, {
				ttl: Number(data.headers["dw-reviewer-ttl"])
			});
		});
	};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @description Instruments are the investment products available to buy and sell
	 * on the DriveWealth platform.
	 * @example import { Instrument } from "drivewealth-back-office-javascript";
	 */
	var Instrument = function () {
		function Instrument() {
			_classCallCheck(this, Instrument);
		}
	
		_createClass(Instrument, null, [{
			key: "create",
	
			/**
	   * Create a new instrument from instrument data.
	   */
			value: function create(details) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/instruments",
					body: details
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get details on a particular instrument.
	   */
	
		}, {
			key: "get",
			value: function get(instrumentID) {
				return (0, _request2.default)({
					endpoint: "/instruments/" + instrumentID
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "edit",
			value: function edit(instrumentID, details) {
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: "/instruments/" + instrumentID,
					body: details
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * List all instruments.
	   */
	
		}, {
			key: "getAll",
			value: function getAll() {
				return (0, _request2.default)({
					endpoint: "/instruments"
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getCorporateActionEventTypes",
			value: function getCorporateActionEventTypes() {
				return (0, _request2.default)({
					endpoint: "/instruments/corporateActionEventTypes"
				}).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "formatValue",
			value: function formatValue(key, value) {
				switch (key) {
					case "startDate":
					case "endDate":
						return value.toISOString();
					default:
						return value;
				}
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getCorporateActions",
			value: function getCorporateActions() {
				var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				return (0, _request2.default)({
					endpoint: "/instruments/corporateActions?" + Object.keys(query).reduce(function (x, y) {
						return [].concat(_toConsumableArray(x), [y + "=" + Instrument.formatValue(y, query[y])]);
					}, []).join("&")
				}).then(function (data) {
					return data.body;
				});
			}
		}]);
	
		return Instrument;
	}();
	
	exports.default = Instrument;
	module.exports = exports["default"];

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @description Transactions have unique types.
	 * @example import { Transaction } from "drivewealth-back-office-javascript";
	 */
	var Transaction = function () {
		function Transaction() {
			_classCallCheck(this, Transaction);
		}
	
		_createClass(Transaction, null, [{
			key: "getAllTransactionTypes",
	
			/**
	   * Transaction types include deposits, withdrawals, journals and fees.
	   */
			value: function getAllTransactionTypes() {
				return (0, _request2.default)({ endpoint: "/transactions/types" }).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get back only relevant Transaction Types by specifying a wlpID.
	   */
	
		}, {
			key: "getTransactionTypes",
			value: function getTransactionTypes() {
				var wlpID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "DW";
	
				return (0, _request2.default)({
					endpoint: "/transactions/types?wlpID=" + wlpID
				}).then(function (data) {
					return data.body[0].types;
				});
			}
	
			/**
	   * Create a new Transaction.
	   */
	
		}, {
			key: "create",
			value: function create(accountID, details) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/accounts/" + accountID + "/transactions",
					body: details
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Get transactions by account and date.
	   */
	
		}, {
			key: "get",
			value: function get(accountID, startDate, endDate, options) {
				var base = "/accounts/" + accountID + "/transactions";
				var dateRange = "?from=" + startDate.toISOString() + "&to=" + endDate.toISOString();
				var limit = void 0;
				if (options && options.limit) {
					limit = options.limit;
				} else {
					limit = 40;
				}
				var limitParam = "&limit=" + limit;
				var url = base + dateRange + limitParam;
	
				if (options && options.direction && options.offset) {
					url += "&offset=" + options.offset + "&direction=" + options.direction;
				}
	
				return (0, _request2.default)({ endpoint: url }).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "batch",
			value: function batch(transactions) {
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/transactions/batch",
					body: transactions
				}).then(function (data) {
					return data.body;
				});
			}
		}]);
	
		return Transaction;
	}();
	
	exports.default = Transaction;
	module.exports = exports["default"];

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	var _Account = __webpack_require__(1);
	
	var _Account2 = _interopRequireDefault(_Account);
	
	var _Error = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @example import { Order } from "drivewealth-back-office-javascript";
	 */
	var Order = function () {
		function Order() {
			_classCallCheck(this, Order);
		}
	
		_createClass(Order, null, [{
			key: "create",
	
	
			/**
	   * Create a manual entry order for a particular account.
	   */
	
			/**
	   * @constant
	   * @property {string} MARKET
	   * @property {string} LIMIT
	   * @property {string} STOP
	   */
			value: function create(account, order) {
				var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
					waitForFill: true,
					fillRetryInterval: 1000,
					fillMaxRetries: 10
				};
	
				return new Promise(function (resolve, reject) {
					(0, _request2.default)({
						method: "POST",
						endpoint: "/orders",
						body: _extends({
							accountNo: account.accountNo
						}, order)
					}).then(function (data) {
						var order = data.body;
	
						if (options.waitForFill) {
							var checkSummary = function checkSummary() {
								options.fillMaxRetries--;
	
								_Account2.default.getBlotter(account.accountID).then(function (summary) {
									var _iteratorNormalCompletion = true;
									var _didIteratorError = false;
									var _iteratorError = undefined;
	
									try {
										for (var _iterator = summary.transactions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
											var transaction = _step.value;
	
											if (transaction.orderId === order.orderID) {
												var isRejected = transaction.orderStatus == "8";
												var isFilled = transaction.orderStatus == "2";
												var notMarket = transaction.orderType != "1";
	
												if (isRejected) {
													var errorCode = "-1";
													var errorMessage = "Unknown rejection reason";
													var reason = transaction.updatedReason;
													var error = reason.match(/^\s*(-?\d+) (.+)$/);
	
													if (Array.isArray(error) && error[1] && error[2]) {
														errorCode = error[1];
														errorMessage = error[2];
													}
	
													return reject(new _Error.DriveWealthError(errorMessage, data.body, data.statusCode, data.headers, errorCode));
												} else if (isFilled || notMarket || options.fillMaxRetries === 0) {
													var orderDetails = _extends({}, order, transaction);
	
													delete orderDetails.orderId;
	
													return resolve(orderDetails);
												}
												break;
											}
										}
	
										// Only reached if the order wasn't found
									} catch (err) {
										_didIteratorError = true;
										_iteratorError = err;
									} finally {
										try {
											if (!_iteratorNormalCompletion && _iterator.return) {
												_iterator.return();
											}
										} finally {
											if (_didIteratorError) {
												throw _iteratorError;
											}
										}
									}
	
									if (options.fillMaxRetries === 0) {
										return reject(new _Error.DriveWealthError("No details found for Order No: " + order.orderNo, data.body, data.statusCode, data.headers, "-1"));
									} else {
										setTimeout(checkSummary, options.fillRetryInterval);
									}
								}).catch(reject);
							};
	
							checkSummary();
						} else {
							return resolve(order);
						}
					}).catch(reject);
				});
			}
	
			/**
	   * Make changes to an order.
	   */
	
	
			/**
	   * @constant
	   * @property {string} BUY
	   * @property {string} SELL
	   */
	
		}, {
			key: "reconcile",
			value: function reconcile(orderID, details) {
				return (0, _request2.default)({
					method: "PUT",
					endpoint: "/orders/" + orderID,
					body: details
				}).then(function () {
					return undefined;
				});
			}
		}]);
	
		return Order;
	}();
	
	Order.TYPES = {
		MARKET: "MARKET",
		LIMIT: "LIMIT",
		STOP: "STOP"
	};
	Order.SIDES = {
		BUY: "BUY",
		SELL: "SELL"
	};
	exports.default = Order;
	module.exports = exports["default"];

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @example import { Commission } from "drivewealth-back-office-javascript";
	 */
	var Commission = function () {
		function Commission() {
			_classCallCheck(this, Commission);
		}
	
		_createClass(Commission, null, [{
			key: "getAllCommissionGroups",
	
			/**
	   * List all available commission groups
	   */
			value: function getAllCommissionGroups() {
				return (0, _request2.default)({
					endpoint: "/commissions"
				}).then(function (data) {
					return data.body.commissionGroups;
				});
			}
		}]);
	
		return Commission;
	}();
	
	exports.default = Commission;
	module.exports = exports["default"];

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Sessions = __webpack_require__(6);
	
	var _Sessions2 = _interopRequireDefault(_Sessions);
	
	var _Config = __webpack_require__(3);
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @example import { Reports } from "drivewealth-back-office-javascript";
	 */
	
	
	// This definition tells flow that there is a global "document" accessible in a browser
	var Reports = function () {
		function Reports() {
			_classCallCheck(this, Reports);
		}
	
		_createClass(Reports, null, [{
			key: "downloadReport",
	
	
			/**
	   * Download a specific report.
	   * @param format Report [file type](#Reports.REPORT_FORMATS)
	   * @param name Report [name](#Reports.REPORT_NAMES)
	   * @param extraFields Optionally filter the report with [extra properties](#extrafields)
	   */
	
	
			/**
	   * @constant
	   * @property {string} RESTRICTED
	   * @property {string} ACCOUNT_VIOLATIONS
	   * @property {string} TICKET_AUDIT
	   * @property {string} RECONCILIATION
	   * @property {string} TRANSACTION
	   * @property {string} POSITIONS_AND_ORDERS
	   * @property {string} POSITIONS
	   * @property {string} PLACED_ORDERS
	   * @property {string} REFERRED_ACCOUNTS
	   * @property {string} FINANCIALS
	   * @property {string} CORRESPONDENT
	   * @property {string} STATEMENTS
	   * @property {string} CONFIRMS
	   */
			value: function downloadReport(format, name, extraFields) {
				var fields = Reports.constructBody(format, name, extraFields);
	
				var url = _Config.Config.env[_Config.HOSTS.REPORTS] + "/DriveWealth";
	
				var form = document.createElement("form");
				form.setAttribute("target", "_blank");
				form.setAttribute("method", "post");
				form.setAttribute("action", url);
	
				for (var field in fields) {
					var input = document.createElement("input");
					input.setAttribute("name", field);
					input.setAttribute("value", fields[field]);
					input.setAttribute("type", "hidden");
					form.appendChild(input);
				}
	
				document.body.appendChild(form);
				form.submit();
				form.parentNode.removeChild(form);
			}
	
			/**
	   * Get specific report data.
	   * @param name Report [name](#Reports.REPORT_NAMES)
	   * @param extraFields Optionally filter the report with [extra properties](#extrafields)
	   */
	
			/**
	   * @constant
	   * @property {string} PDF
	   * @property {string} XLS
	   * @property {string} JSON
	   * @property {string} HTML
	   */
	
		}, {
			key: "getReport",
			value: function getReport(name, extraFields) {
				return (0, _request2.default)({
					method: "POST",
					host: _Config.HOSTS.REPORTS,
					endpoint: "/DriveWealth",
					body: Reports.constructBody(Reports.REPORT_FORMATS.JSON, name, extraFields),
					authenticated: false,
					usesAppKey: false,
					addlHeaders: {
						"Content-Type": "application/x-www-form-urlencoded"
					}
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "listFiles",
			value: function listFiles(accountID, reportName, dateStart, dateEnd) {
				return (0, _request2.default)({
					endpoint: "/accounts/" + accountID + "/" + reportName + "?from=" + dateStart + "&to=" + dateEnd
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getFileURL",
			value: function getFileURL(accountID, fileKey) {
				return (0, _request2.default)({
					endpoint: "/" + Reports.REPORT_NAMES.STATEMENTS + "/" + accountID + "/" + fileKey
				}).then(function (data) {
					return data.body.url;
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "downloadRestrictedReport",
			value: function downloadRestrictedReport(fileType) {
				Reports.downloadReport(fileType, Reports.REPORT_NAMES.RESTRICTED, {
					subscription: true
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "downloadAccountViolations",
			value: function downloadAccountViolations(fileType, TradingType, date) {
				Reports.downloadReport(fileType, Reports.REPORT_NAMES.ACCOUNT_VIOLATIONS, {
					TradingType: TradingType,
					Date: date.toISOString()
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getAccountViolations",
			value: function getAccountViolations(TradingType, date) {
				return Reports.getReport(Reports.REPORT_NAMES.ACCOUNT_VIOLATIONS, {
					TradingType: TradingType,
					Date: date.toISOString()
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "downloadTicketAudit",
			value: function downloadTicketAudit(fileType, OrderNo) {
				Reports.downloadReport(fileType, Reports.REPORT_NAMES.TICKET_AUDIT, {
					OrderNo: OrderNo.toUpperCase()
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getTicketAudit",
			value: function getTicketAudit(OrderNo) {
				return Reports.getReport(Reports.REPORT_NAMES.TICKET_AUDIT, {
					OrderNo: OrderNo.toUpperCase()
				});
			}
	
			/**
	   * @static
	   */
	
		}, {
			key: "getCorrespondant",
			value: function getCorrespondant(date) {
				return (0, _request2.default)({
					endpoint: "/" + Reports.REPORT_NAMES.CORRESPONDENT + "?date=" + date
				}).then(function (data) {
					return data.body.url;
				});
			}
		}]);
	
		return Reports;
	}();
	
	Reports.REPORT_FORMATS = {
		PDF: "PDF",
		XLS: "XLS",
		JSON: "JSON",
		HTML: "HTML"
	};
	Reports.REPORT_NAMES = {
		RESTRICTED: "RestrictedReport",
		ACCOUNT_VIOLATIONS: "AccountViolations",
		TICKET_AUDIT: "TicketAudit",
		RECONCILIATION: "EodNotification",
		TRANSACTION: "EodTransaction",
		POSITIONS_AND_ORDERS: "PositionRestingOrder",
		POSITIONS: "PositionDetail",
		PLACED_ORDERS: "OrderTrans",
		REFERRED_ACCOUNTS: "Account",
		FINANCIALS: "AccountFins",
		CORRESPONDENT: "correspondantReport",
		STATEMENTS: "statements",
		CONFIRMS: "confirms"
	};
	
	Reports.constructBody = function (format, name, extraFields) {
		return _extends({
			ReportFormat: format,
			ReportName: name,
			sessionKey: _Sessions2.default.get(),
			WlpID: "DW",
			LanguageID: "en_US"
		}, extraFields);
	};
	
	exports.default = Reports;
	module.exports = exports["default"];

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class MoneyMovement
	 * @description allow clients to deposit/withdraw money from their DriveWealth account.
	 */
	var MoneyMovement = function () {
		function MoneyMovement() {
			_classCallCheck(this, MoneyMovement);
		}
	
		_createClass(MoneyMovement, null, [{
			key: "getList",
	
	
			/**
	   * Get money movement list based on status
	   */
			value: function getList(direction, status, type, options) {
				var endpoint = "/funding/" + direction.toLowerCase() + "?status=" + status.toUpperCase();
	
				if (type) {
					endpoint += "&type=" + (typeof type === "string" ? type : type.join(",")).toUpperCase();
				}
	
				if (options) {
					if (options.direction && options.offset && options.limit) {
						endpoint += "&limit=" + options.limit + "&offset=" + options.offset + "&direction=" + options.direction;
					} else if (options.limit) {
						endpoint += "&limit=" + options.limit;
					}
				}
	
				return (0, _request2.default)({ endpoint: endpoint }).then(function (data) {
					return {
						data: data.body
					};
				});
			}
	
			/**
	   * Get details about a deposit/redemption by its ID.
	   */
	
		}, {
			key: "get",
			value: function get(id, direction) {
				/*
	   * types: "deposits" | "redemptions"
	   */
				return (0, _request2.default)({
					endpoint: "/funding/" + direction + "/" + id
				}).then(function (data) {
					return data.body;
				});
			}
	
			/**
	   * Edit details about a deposit/redemption by its ID.
	   */
	
		}, {
			key: "edit",
			value: function edit(id, details, direction) {
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: "/funding/" + direction + "/" + id,
					body: details
				}).then(function () {
					return undefined;
				});
			}
	
			/**
	   * Get data about deposits/redemptions
	   */
	
		}, {
			key: "downloadCSV",
			value: function downloadCSV(direction, status, type) {
				var endpoint = "/funding/" + direction.toLowerCase() + "/" + type + "/download?status=" + status;
	
				return (0, _request2.default)({
					endpoint: endpoint,
					addlHeaders: {
						Accept: "text/csv"
					}
				}).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "getRecurringDepositsForUser",
			value: function getRecurringDepositsForUser(userID) {
				var endpoint = "/users/" + userID + "/recurring-deposits";
				return (0, _request2.default)({ endpoint: endpoint }).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "getDepositHistory",
			value: function getDepositHistory(depositID) {
				var endpoint = "/funding/recurring-deposits/" + depositID;
				return (0, _request2.default)({ endpoint: endpoint }).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "updateRecurringDeposit",
			value: function updateRecurringDeposit(depositID, body) {
				var endpoint = "/funding/recurring-deposits/" + depositID;
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: endpoint,
					body: body
				}).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "deleteRecurringDeposit",
			value: function deleteRecurringDeposit(depositID) {
				var endpoint = "/funding/recurring-deposits/" + depositID;
				return (0, _request2.default)({
					method: "DELETE",
					endpoint: endpoint
				}).then(function (data) {
					return data;
				});
			}
		}]);
	
		return MoneyMovement;
	}();
	
	MoneyMovement.DIRECTIONS = {
		DEPOSITS: "Deposits",
		WITHDRAWALS: "Redemptions" };
	exports.default = MoneyMovement;
	module.exports = exports["default"];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @description Roles allow clients to send REST requests to the Permissions API.
	 * @example import { Permissions } from "drivewealth-back-office-javascript";
	 */
	var Roles = function () {
		function Roles() {
			_classCallCheck(this, Roles);
		}
	
		_createClass(Roles, null, [{
			key: "getAllPermissionGroups",
	
			/**
	   * @static
	   */
			value: function getAllPermissionGroups() {
				return (0, _request2.default)({
					endpoint: "/permissions/groups"
				}).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "getAllPermissions",
	
	
			/**
	   * @static
	   */
			value: function getAllPermissions() {
				return (0, _request2.default)({
					endpoint: "/permissions"
				}).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "createPermissionGroup",
	
	
			/**
	   * @static
	   */
			value: function createPermissionGroup(active, description, permissionSet, role) {
				var body = {
					active: active,
					description: description,
					permissionSet: permissionSet,
					role: role
				};
				return (0, _request2.default)({
					method: "POST",
					endpoint: "/permissions/groups",
					body: body
				}).then(function (data) {
					return data.body;
				});
			}
		}, {
			key: "editRole",
	
	
			/**
	   * @static
	   */
			value: function editRole(id, role) {
				var body = role;
				return (0, _request2.default)({
					method: "PATCH",
					endpoint: "/permissions/groups/" + id,
					body: body
				}).then(function (data) {
					return data.body;
				});
			}
		}]);
	
		return Roles;
	}();
	
	exports.default = Roles;
	;
	module.exports = exports["default"];

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _request = __webpack_require__(2);
	
	var _request2 = _interopRequireDefault(_request);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @module
	 * @example import { Advisor } from "drivewealth-back-office-javascript";
	 */
	var Advisor = function () {
	    function Advisor() {
	        _classCallCheck(this, Advisor);
	    }
	
	    _createClass(Advisor, null, [{
	        key: "createProduct",
	
	        /**
	         * Create a product
	         */
	        value: function createProduct(userID, productDetails) {
	            var body = _extends({
	                userID: userID
	            }, productDetails);
	            return (0, _request2.default)({
	                method: "POST",
	                body: body,
	                endpoint: "/managed/products"
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * updates a product
	        */
	
	    }, {
	        key: "updateProduct",
	        value: function updateProduct(productID, productDetails) {
	            return (0, _request2.default)({
	                method: "PATCH",
	                body: productDetails,
	                endpoint: "/managed/products/" + productID
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * get a product by id
	        */
	
	    }, {
	        key: "getProductByID",
	        value: function getProductByID(productID) {
	            return (0, _request2.default)({ endpoint: "/managed/products/" + productID }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * get products for an advisor
	        */
	
	    }, {
	        key: "getAllAdvisorProducts",
	        value: function getAllAdvisorProducts(userID) {
	            return (0, _request2.default)({ endpoint: "/users/" + userID + "/managed/products" }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * Gets all advisors allocations
	        */
	
	    }, {
	        key: "getAllAllocations",
	        value: function getAllAllocations(dateFrom, dateTo) {
	            return (0, _request2.default)({ endpoint: "/managed/allocations?from=" + dateFrom.toISOString() + "&to=" + dateTo.toISOString() }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * Gets allocations for an individual advisor 
	        */
	
	    }, {
	        key: "getAdvisorAllocations",
	        value: function getAdvisorAllocations(userID) {
	            return (0, _request2.default)({ endpoint: "/users/" + userID + "/managed/allocations" }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * gets a single allocation
	        */
	
	    }, {
	        key: "getAllocationByID",
	        value: function getAllocationByID(allocationID) {
	            return (0, _request2.default)({ endpoint: "/managed/allocations/" + allocationID }).then(function (data) {
	                return data.body;
	            });
	        }
	    }, {
	        key: "createAllocation",
	
	
	        /**
	        * creates an allocation
	        */
	
	        value: function createAllocation(allocation) {
	            return (0, _request2.default)({
	                endpoint: "/managed/allocations",
	                method: "POST",
	                body: allocation
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * get orders for all advisors
	        */
	
	    }, {
	        key: "getAllAdvisorOrders",
	        value: function getAllAdvisorOrders(dateFrom, dateTo) {
	            return (0, _request2.default)({
	                endpoint: "/managed/orders?from=" + dateFrom.toISOString() + "&to=" + dateTo.toISOString()
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	    }, {
	        key: "getOrdersForAdvisor",
	
	
	        /**
	        * get orders for an advisor
	        */
	
	        value: function getOrdersForAdvisor(userID, dateFrom, dateTo) {
	            return (0, _request2.default)({
	                endpoint: "/users/" + userID + "/managed/orders?from=" + dateFrom.toISOString() + "&to=" + dateTo.toISOString()
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * gets advisors portfolio
	        */
	
	    }, {
	        key: "getAdvisorPortfolios",
	        value: function getAdvisorPortfolios(userID) {
	            return (0, _request2.default)({ endpoint: "/users/" + userID + "/managed/portfolios" }).then(function (data) {
	                return data.body;
	            });
	        }
	    }, {
	        key: "getPortfolioById",
	
	
	        /**
	        * get portfolio by id
	        */
	
	        value: function getPortfolioById(portfolioID) {
	            return (0, _request2.default)({ endpoint: "/managed/portfolios/" + portfolioID }).then(function (data) {
	                return data.body;
	            });
	        }
	    }, {
	        key: "createPortfolio",
	
	
	        /**
	        * Creates a portfolio
	        */
	
	        value: function createPortfolio(portfolio) {
	            return (0, _request2.default)({
	                endpoint: "/managed/portfolios",
	                method: "POST",
	                body: portfolio
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	    }, {
	        key: "updatePortfolio",
	
	
	        /**
	        * Edits a portfolio
	        */
	
	        value: function updatePortfolio(portfolio, portfolioID) {
	            return (0, _request2.default)({
	                endpoint: "/managed/portfolios/" + portfolioID,
	                body: portfolio,
	                method: "PATCH"
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * Gets funds for an advisor
	        */
	
	    }, {
	        key: "getAdvisorFunds",
	        value: function getAdvisorFunds(userID) {
	            return (0, _request2.default)({
	                endpoint: "/users/" + userID + "/managed/funds"
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * Gets details for a fund
	        */
	
	    }, {
	        key: "getFundDetails",
	        value: function getFundDetails(fundID) {
	            return (0, _request2.default)({
	                endpoint: "/managed/funds/" + fundID
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * Creates a fund
	        */
	
	    }, {
	        key: "createFund",
	        value: function createFund(fund) {
	            return (0, _request2.default)({
	                body: fund,
	                endpoint: "/managed/funds",
	                method: "POST"
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	
	        /**
	        * Updates a fund
	        */
	
	    }, {
	        key: "updateFund",
	        value: function updateFund(fund, fundID) {
	            return (0, _request2.default)({
	                body: fund,
	                endpoint: "/managed/funds/" + fundID,
	                method: "PATCH"
	            }).then(function (data) {
	                return data.body;
	            });
	        }
	    }]);
	
	    return Advisor;
	}();
	
	exports.default = Advisor;
	module.exports = exports["default"];

/***/ })
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCBiZWU2OWU4YmI2NjU4NzQ2ZGMwZSIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvQWNjb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9yZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL0NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9FcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2V4dGVuZGFibGUtZXJyb3ItY2xhc3MvZGlzdC9pbmRleC5lczUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ludGVybmFsL1Nlc3Npb25zLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL1Zpb2xhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9BdXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL1VzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ludGVybmFsL2RvY3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9JbnN0cnVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL1RyYW5zYWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL09yZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL0NvbW1pc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvUmVwb3J0cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9Nb25leU1vdmVtZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL1JvbGVzLmpzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL0Fkdmlzb3JzLmpzIl0sIm5hbWVzIjpbIkVOVklST05NRU5UUyIsIkhPU1RTIiwiQWNjb3VudCIsIkFkdmlzb3JzIiwiVmlvbGF0aW9uIiwiQXV0aCIsIkNvbmZpZyIsIlNlc3Npb25zIiwiVXNlciIsIkluc3RydW1lbnQiLCJUcmFuc2FjdGlvbiIsIk9yZGVyIiwiQ29tbWlzc2lvbiIsIkRvY3VtZW50IiwiUmVwb3J0cyIsIk1vbmV5TW92ZW1lbnQiLCJSb2xlcyIsInNldHVwIiwicmVxdWVzdCIsInVzZXJJRCIsImRldGFpbHMiLCJtZXRob2QiLCJlbmRwb2ludCIsImJvZHkiLCJ0aGVuIiwiZGF0YSIsImFjY291bnRJRCIsImFjY291bnQiLCJhY2NvdW50Tm8iLCJ0b1VwcGVyQ2FzZSIsInJlc3VsdCIsInR5cGUiLCJhY2NvdW50U3VtbWFyeSIsImFjY291bnRGcm9tIiwiYWNjb3VudFRvIiwiY3JlYXRlIiwiZ2V0IiwidmlvbGF0aW9uSUQiLCJkZWxldGUiLCJjb21taXNzaW9uSUQiLCJnZXRNYXJnaW5DYWxsTGlzdCIsIlByb21pc2UiLCJhbGwiLCJhY2NvdW50cyIsIm1hcCIsImlkIiwiZ2V0QmxvdHRlciIsInN1bW1hcmllcyIsInN5bWJvbCIsInF0eSIsInByaWNlIiwicXVhbnRpdHlBZGp1c3RtZW50IiwiQkxPVFRFUl9UWVBFUyIsIkNBU0giLCJPUkRFUlMiLCJUUkFOU0FDVElPTlMiLCJFUVVJVFkiLCJWSU9MQVRJT05TIiwiQUxMIiwic2Vzc2lvbktleSIsImFkZGxIZWFkZXJzIiwiaG9zdCIsIkFQSSIsImF1dGhlbnRpY2F0ZWQiLCJ1c2VzQXBwS2V5IiwiaHR0cEltcGwiLCJFcnJvciIsInNhdmVkU2Vzc2lvbktleSIsImhlYWRlcnMiLCJBY2NlcHQiLCJhcHBLZXkiLCJoZWFkZXIiLCJlbnYiLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0IiwiY29uc3RydWN0b3IiLCJtYXBwYWJsZU9iaiIsImtleXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJrZXkiLCJqb2luIiwicmVzb2x2ZSIsInJlamVjdCIsInN0YXR1c0NvZGUiLCJyZXNIZWFkZXJzIiwicmVzQm9keSIsImNvbnRlbnRUeXBlIiwiaW5kZXhPZiIsInBhcnNlIiwiZXJyIiwiU3RyaW5nIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JDb2RlIiwiZXJyb3IiLCJtZXNzYWdlIiwidmVyaWZpY2F0aW9uUmVzcG9uc2UiLCJvblVuQXV0aCIsIkRyaXZlV2VhbHRoU2Vzc2lvbkVycm9yIiwiRHJpdmVXZWFsdGhFcnJvciIsIlJFUE9SVFMiLCJVQVQiLCJQUk9EIiwiYXBwVmVyc2lvbiIsIkV4dGVuZGFibGVFcnJvciIsInNlc3Npb25zIiwidW5kZWZpbmVkIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImlwX2FkZHJlc3MiLCJsYW5ndWFnZUlEIiwib3NWZXJzaW9uIiwib3NUeXBlIiwic2NyUmVzIiwiYXBwVHlwZUlEIiwiYXV0aFRva2VuIiwic2F2ZSIsInBlbmRpbmdUZW1wQ29kZSIsInRlbXBDb2RlIiwicGVuZGluZ1VzZXJuYW1lIiwibG9jYWxlIiwicGVuZGluZzJGQVR5cGUiLCJjb2RlIiwidmVyaWZpY2F0aW9uQ29kZSIsImF1dGhSZXNwb25zZSIsImNhbGxiYWNrIiwiVkVSSUZJQ0FUSU9OX1RZUEVTIiwiU01TIiwibm90ZSIsInN1YmplY3QiLCJzZWFyY2hRdWVyeSIsImZpbHRlciIsInJlc3VsdFNldCIsInJhd1F1ZXJ5IiwiZmllbGRzIiwiZmllbGQiLCJSRUdFWFBTIiwidGVzdCIsImdldEZpZWxkc1RvU2VhcmNoIiwicmVkdWNlIiwiZ2V0U2VhcmNoUXVlcnkiLCJyZXF1ZXN0cyIsInZhbHVlIiwidHJpbSIsImdldEJ5QWNjb3VudE5vIiwic3BsaXQiLCJmaXJzdCIsImxhc3QiLCJyZXN1bHRzIiwicmVzcG9uc2VzIiwiYWNjIiwibmV4dCIsIkFycmF5IiwiaXNBcnJheSIsInJlc3VsdHNCeUlEIiwiYXNzaWduIiwiaW1hZ2UiLCJkb2N1bWVudElEIiwiZ2V0VVJMIiwidXNlcklEcyIsInF1ZXJ5IiwicGVybWlzc2lvbkdyb3VwSUQiLCJwaG9uZU51bWJlciIsImZ1bGxOYW1lIiwiZG9jdW1lbnQiLCJGb3JtRGF0YSIsImFwcGVuZCIsImdldERvY3VtZW50cyIsInVybCIsInJldmlld2VyVXNlcklEIiwiZG9jdW1lbnRzIiwiYXBwcm92ZWRCeVVzZXJJRCIsIkRPQ1VNRU5UX1RZUEVTIiwiUEhPVE9fSUQiLCJBRERSRVNTIiwiUEhPVE9fSURfQU5EX0FERFJFU1MiLCJDT1JQT1JBVEUiLCJUUlVTVCIsIlJJU0siLCJUQVgiLCJPVEhFUiIsIlJFSkVDVElPTl9SRUFTT05TIiwiUElDVFVSRSIsIklOVkFMSUQiLCJNSVNNQVRDSF9OQU1FIiwiSUxMRUdJQkxFIiwiRVhQSVJFRCIsIk1JU01BVENIX0FERFJFU1MiLCJMQU5HVUFHRV9JRFMiLCJFTkdMSVNIIiwiQ0hJTkVTRSIsIlNQQU5JU0giLCJQT1JUVUdVRVNFIiwiZ2V0UGVuZGluZ0NvdW50cyIsInBhdGgiLCJnZXRQZW5kaW5nIiwicXVlcnlTdHJpbmciLCJ0dGwiLCJOdW1iZXIiLCJpbnN0cnVtZW50SUQiLCJ0b0lTT1N0cmluZyIsIngiLCJ5IiwiZm9ybWF0VmFsdWUiLCJ3bHBJRCIsInR5cGVzIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsIm9wdGlvbnMiLCJiYXNlIiwiZGF0ZVJhbmdlIiwibGltaXQiLCJsaW1pdFBhcmFtIiwiZGlyZWN0aW9uIiwib2Zmc2V0IiwidHJhbnNhY3Rpb25zIiwib3JkZXIiLCJ3YWl0Rm9yRmlsbCIsImZpbGxSZXRyeUludGVydmFsIiwiZmlsbE1heFJldHJpZXMiLCJjaGVja1N1bW1hcnkiLCJzdW1tYXJ5IiwidHJhbnNhY3Rpb24iLCJvcmRlcklkIiwib3JkZXJJRCIsImlzUmVqZWN0ZWQiLCJvcmRlclN0YXR1cyIsImlzRmlsbGVkIiwibm90TWFya2V0Iiwib3JkZXJUeXBlIiwicmVhc29uIiwidXBkYXRlZFJlYXNvbiIsIm1hdGNoIiwib3JkZXJEZXRhaWxzIiwib3JkZXJObyIsInNldFRpbWVvdXQiLCJjYXRjaCIsIlRZUEVTIiwiTUFSS0VUIiwiTElNSVQiLCJTVE9QIiwiU0lERVMiLCJCVVkiLCJTRUxMIiwiY29tbWlzc2lvbkdyb3VwcyIsImZvcm1hdCIsIm5hbWUiLCJleHRyYUZpZWxkcyIsImNvbnN0cnVjdEJvZHkiLCJmb3JtIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImlucHV0IiwiYXBwZW5kQ2hpbGQiLCJzdWJtaXQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJSRVBPUlRfRk9STUFUUyIsInJlcG9ydE5hbWUiLCJkYXRlU3RhcnQiLCJkYXRlRW5kIiwiZmlsZUtleSIsIlJFUE9SVF9OQU1FUyIsIlNUQVRFTUVOVFMiLCJmaWxlVHlwZSIsImRvd25sb2FkUmVwb3J0IiwiUkVTVFJJQ1RFRCIsInN1YnNjcmlwdGlvbiIsIlRyYWRpbmdUeXBlIiwiZGF0ZSIsIkFDQ09VTlRfVklPTEFUSU9OUyIsIkRhdGUiLCJnZXRSZXBvcnQiLCJPcmRlck5vIiwiVElDS0VUX0FVRElUIiwiQ09SUkVTUE9OREVOVCIsIlBERiIsIlhMUyIsIkhUTUwiLCJSRUNPTkNJTElBVElPTiIsIlRSQU5TQUNUSU9OIiwiUE9TSVRJT05TX0FORF9PUkRFUlMiLCJQT1NJVElPTlMiLCJQTEFDRURfT1JERVJTIiwiUkVGRVJSRURfQUNDT1VOVFMiLCJGSU5BTkNJQUxTIiwiQ09ORklSTVMiLCJSZXBvcnRGb3JtYXQiLCJSZXBvcnROYW1lIiwiV2xwSUQiLCJMYW5ndWFnZUlEIiwic3RhdHVzIiwidG9Mb3dlckNhc2UiLCJkZXBvc2l0SUQiLCJESVJFQ1RJT05TIiwiREVQT1NJVFMiLCJXSVRIRFJBV0FMUyIsImFjdGl2ZSIsImRlc2NyaXB0aW9uIiwicGVybWlzc2lvblNldCIsInJvbGUiLCJBZHZpc29yIiwicHJvZHVjdERldGFpbHMiLCJwcm9kdWN0SUQiLCJkYXRlRnJvbSIsImRhdGVUbyIsImFsbG9jYXRpb25JRCIsImFsbG9jYXRpb24iLCJwb3J0Zm9saW9JRCIsInBvcnRmb2xpbyIsImZ1bmRJRCIsImZ1bmQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUNyQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7U0FHQ0EsWSxHQUFBQSxvQjtTQUNBQyxLLEdBQUFBLGE7U0FFQUMsTyxHQUFBQSxpQjtTQUNBQyxRLEdBQUFBLGtCO1NBQ0FDLFMsR0FBQUEsbUI7U0FDQUMsSSxHQUFBQSxjO1NBQ0FDLE0sR0FBQUEsYztTQUNBQyxRLEdBQUFBLGtCO1NBQ0FDLEksR0FBQUEsYztTQUNBQyxVLEdBQUFBLG9CO1NBQ0FDLFcsR0FBQUEscUI7U0FDQUMsSyxHQUFBQSxlO1NBQ0FDLFUsR0FBQUEsb0I7U0FDQUMsUSxHQUFBQSxrQjtTQUNBQyxPLEdBQUFBLGlCO1NBQ0FDLGEsR0FBQUEsdUI7U0FDQUMsSyxHQUFBQSxlO1NBRUFDLEssR0FBQUEsYTtTQUNBQyxPLEdBQUFBLGlCO21CQUdjO0FBQ2RsQixvQ0FEYztBQUVkQyxzQkFGYzs7QUFJZEMsNEJBSmM7QUFLZEMsOEJBTGM7QUFNZEMsZ0NBTmM7QUFPZEMsc0JBUGM7QUFRZEMsd0JBUmM7QUFTZEMsOEJBVGM7QUFVZEMsc0JBVmM7QUFXZEMsa0NBWGM7QUFZZEMsb0NBWmM7QUFhZEMsd0JBYmM7QUFjZEMsa0NBZGM7QUFlZEMsOEJBZmM7QUFnQmRDLDRCQWhCYztBQWlCZEMsd0NBakJjO0FBa0JkQyx3QkFsQmM7O0FBb0JkQyxzQkFwQmM7QUFxQmRDO0FBckJjLEU7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6Q2Y7Ozs7QUFDQTs7Ozs7Ozs7QUFTQTs7Ozs7O0tBTXFCaEIsTzs7Ozs7Ozs7O0FBbUJwQjs7OzBCQUdjaUIsTSxFQUFnQkMsTyxFQVlGO0FBQzNCLFdBQU8sdUJBQVE7QUFDZEMsYUFBUSxNQURNO0FBRWRDLGVBQVUsV0FGSTtBQUdkQyx3QkFDSUgsT0FESjtBQUVDRDtBQUZEO0FBSGMsS0FBUixFQU9KSyxJQVBJLENBT0M7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FQRCxDQUFQO0FBUUE7O0FBRUQ7Ozs7QUE1Q0E7Ozs7Ozs7Ozs7Ozt1QkErQ1dHLFMsRUFBNEM7QUFDdEQsV0FBTyx1QkFBUTtBQUNkSiw4QkFBdUJJO0FBRFQsS0FBUixFQUVKRixJQUZJLENBRUM7QUFBQSxZQUFRQyxLQUFLRixJQUFMLENBQVVJLE9BQWxCO0FBQUEsS0FGRCxDQUFQO0FBR0E7O0FBRUQ7Ozs7OztrQ0FHc0JDLFMsRUFTbkI7QUFDRixXQUFPLHVCQUFRO0FBQ2ROLCtDQUF3Q00sVUFBVUMsV0FBVjtBQUQxQixLQUFSLEVBRUpMLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQUwsQ0FBVU8sTUFBbEI7QUFBQSxLQUZELENBQVA7QUFHQTs7QUFFRDs7Ozs7O3dCQUdZSixTLEVBQW1CTixPLEVBQTRDO0FBQzFFLFdBQU8sdUJBQVE7QUFDZEMsYUFBUSxPQURNO0FBRWRDLDhCQUF1QkksU0FGVDtBQUdkSCxXQUFNSDtBQUhRLEtBQVIsRUFJSkksSUFKSSxDQUlDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBSkQsQ0FBUDtBQUtBOztBQUVEOzs7Ozs7OEJBR2tCRyxTLEVBQW1CSyxJLEVBQWlDO0FBQ3JFLFdBQU8sdUJBQVE7QUFDZFYsYUFBUSxLQURNO0FBRWRDLDhCQUF1QkksU0FBdkI7QUFGYyxLQUFSLEVBR0pGLElBSEksQ0FHQztBQUFBLFNBQVdRLGNBQVgsUUFBR1QsSUFBSCxDQUFXUyxjQUFYO0FBQUEsWUFBa0NELE9BQU9DLGVBQWVELElBQWYsQ0FBUCxHQUE4QkMsY0FBaEU7QUFBQSxLQUhELENBQVA7QUFJQTs7QUFFRDs7Ozs7OzRCQUdnQlosTyxFQUFtRTtBQUNsRixXQUFPLHVCQUFRO0FBQ2RDLGFBQVEsTUFETTtBQUVkQyxlQUFVLG9CQUZJO0FBR2RDLHdCQUNJSCxPQURKO0FBRUNhLG1CQUFhYixRQUFRYSxXQUFSLENBQW9CSixXQUFwQixFQUZkO0FBR0NLLGlCQUFXZCxRQUFRYyxTQUFSLENBQWtCTCxXQUFsQjtBQUhaO0FBSGMsS0FBUixFQVFKTCxJQVJJLENBUUM7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FSRCxDQUFQO0FBU0E7O0FBRUQ7Ozs7OzttQ0FHdUJHLFMsRUFBbUJOLE8sRUFBZ0Q7QUFDekYsV0FBT2hCLG9CQUFVK0IsTUFBVixDQUFpQlQsU0FBakIsRUFBNEJOLE9BQTVCLENBQVA7QUFDQTs7QUFFRDs7Ozs7O2lDQUdxQk0sUyxFQUErQjtBQUNuRCxXQUFPdEIsb0JBQVVnQyxHQUFWLENBQWNWLFNBQWQsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7bUNBR3VCQSxTLEVBQW1CVyxXLEVBQW9DO0FBQzdFLFdBQU9qQyxvQkFBVWtDLE1BQVYsQ0FBaUJaLFNBQWpCLEVBQTRCVyxXQUE1QixDQUFQO0FBQ0E7O0FBRUQ7Ozs7OztvQ0FHd0JYLFMsRUFBbUJhLFksRUFBc0I7QUFDaEUsV0FBTyx1QkFBUTtBQUNkakIsOEJBQXVCSSxTQUF2QixpQkFEYztBQUVkTCxhQUFRLE1BRk07QUFHZEUsV0FBTSxFQUFFZ0IsMEJBQUY7QUFIUSxLQUFSLEVBSUpmLElBSkksQ0FJQztBQUFBLFlBQVFDLEtBQUtGLElBQUwsQ0FBVUksT0FBbEI7QUFBQSxLQUpELENBQVA7QUFLQTs7QUFFRDs7Ozs7O3VDQUdtRDtBQUNsRCxXQUFPLHVCQUFRO0FBQ2RMLGVBQVU7QUFESSxLQUFSLEVBRUpFLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUZELENBQVA7QUFHQTs7QUFFRDs7Ozs7O21EQU1HO0FBQ0YsV0FBT3JCLFFBQVFzQyxpQkFBUixHQUE0QmhCLElBQTVCLENBQ047QUFBQSxZQUFZaUIsUUFBUUMsR0FBUixDQUFZQyxTQUFTQyxHQUFULENBQWE7QUFBQSxVQUFHQyxFQUFILFNBQUdBLEVBQUg7QUFBQSxhQUFZM0MsUUFBUTRDLFVBQVIsQ0FBbUJELEVBQW5CLENBQVo7QUFBQSxNQUFiLENBQVosRUFDVnJCLElBRFUsQ0FDTDtBQUFBLGFBQWMsRUFBRW1CLGtCQUFGLEVBQVlJLG9CQUFaLEVBQWQ7QUFBQSxNQURLLENBQVo7QUFBQSxLQURNLENBQVA7QUFJQTs7QUFFRDs7Ozs7O2dDQUlDckIsUyxFQUNBc0IsTSxFQUNBQyxHLEVBQ0FDLEssRUFDZ0I7QUFDaEIsV0FBTyx1QkFBUTtBQUNkNUIsOEJBQXVCSSxTQUF2QixlQURjO0FBRWRMLGFBQVEsT0FGTTtBQUdkRSxXQUFNO0FBQ0x5QixvQkFESztBQUVMRywwQkFBb0JGLEdBRmY7QUFHTEM7QUFISztBQUhRLEtBQVIsRUFRSjFCLElBUkksQ0FRQyxZQUFNLENBQ2IsQ0FUTSxDQUFQO0FBVUE7O0FBRUQ7Ozs7c0NBQzBCRSxTLEVBQW9DO0FBQzdELFdBQU8sdUJBQVE7QUFDZEosOEJBQXVCSSxTQUF2QjtBQURjLEtBQVIsRUFFSkYsSUFGSSxDQUVDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBRkQsQ0FBUDtBQUdBOzs7Ozs7QUE1TG1CckIsUSxDQVVia0QsYSxHQUFnQjtBQUN0QkMsUUFBTSxNQURnQjtBQUV0QkMsVUFBUSxRQUZjO0FBR3RCQyxnQkFBYyxjQUhRO0FBSXRCQyxVQUFRLFFBSmM7QUFLdEJDLGNBQVksWUFMVTtBQU10QkMsT0FBSztBQU5pQixFO21CQVZIeEQsTzs7Ozs7Ozs7Ozs7O21CQ0NHZ0IsTzs7QUFqQnhCOztBQUNBOztBQUNBOzs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7OztBQWFlLFVBQVNBLE9BQVQsT0FzQlo7QUFBQSx5QkFyQkZHLE1BcUJFO0FBQUEsTUFyQkZBLE1BcUJFLCtCQXJCTyxLQXFCUDtBQUFBLE1BcEJGQyxRQW9CRSxRQXBCRkEsUUFvQkU7QUFBQSxNQW5CRnFDLFVBbUJFLFFBbkJGQSxVQW1CRTtBQUFBLE1BbEJGcEMsSUFrQkUsUUFsQkZBLElBa0JFO0FBQUEsOEJBakJGcUMsV0FpQkU7QUFBQSxNQWpCRkEsV0FpQkUsb0NBakJZLEVBaUJaO0FBQUEsdUJBaEJGQyxJQWdCRTtBQUFBLE1BaEJGQSxJQWdCRSw2QkFoQks1RCxjQUFNNkQsR0FnQlg7QUFBQSxnQ0FmRkMsYUFlRTtBQUFBLE1BZkZBLGFBZUUsc0NBZmMsSUFlZDtBQUFBLDZCQWRGQyxVQWNFO0FBQUEsTUFkRkEsVUFjRSxtQ0FkVyxJQWNYOztBQUNGLE1BQUksQ0FBQzFELGVBQU8yRCxRQUFaLEVBQXNCLE1BQU0sSUFBSUMsS0FBSixDQUFVLHdCQUFWLENBQU47QUFDdEIsTUFBSSxDQUFDUCxVQUFMLEVBQWlCO0FBQ2hCLE9BQU1RLGtCQUFrQjVELG1CQUFTNkIsR0FBVCxFQUF4QjtBQUNBLE9BQUkrQixlQUFKLEVBQXFCUixhQUFhUSxlQUFiO0FBQ3JCOztBQUVELE1BQU1DLFVBQXNDO0FBQzNDQyxXQUFRO0FBRG1DLEdBQTVDO0FBR0EsTUFBSUwsVUFBSixFQUFnQjtBQUNmSSxXQUFRLG1CQUFSLElBQStCOUQsZUFBT2dFLE1BQXRDO0FBQ0E7QUFDRCxNQUFJakQsV0FBVyxNQUFYLElBQXFCQSxXQUFXLEtBQWhDLElBQXlDQSxXQUFXLE9BQXhELEVBQWlFO0FBQ2hFK0MsV0FBUSxjQUFSLElBQTBCLGtCQUExQjtBQUNBO0FBQ0QsTUFBSVQsY0FBY0ksYUFBbEIsRUFBaUM7QUFDaENLLFdBQVEsZUFBUixJQUEyQlQsVUFBM0I7QUFDQTtBQUNELE9BQUssSUFBTVksT0FBWCxJQUFxQlgsV0FBckIsRUFBa0M7QUFDakNRLFdBQVFHLE9BQVIsSUFBa0JYLFlBQVlXLE9BQVosQ0FBbEI7QUFDQTs7QUFFRGpELGFBQVdoQixlQUFPa0UsR0FBUCxDQUFXWCxJQUFYLElBQW1CdkMsUUFBOUI7O0FBRUEsTUFBSThDLFFBQVEsY0FBUixNQUE0QixrQkFBaEMsRUFBb0Q3QyxPQUFPa0QsS0FBS0MsU0FBTCxDQUFlbkQsSUFBZixDQUFQOztBQUVwRCxNQUFJcUMsZUFBZUEsWUFBWSxjQUFaLENBQW5CLEVBQWdEO0FBQy9DLE9BQUksQ0FBQ3JDLElBQUwsRUFBVyxNQUFNLElBQUkyQyxLQUFKLENBQVUsb0RBQVYsQ0FBTjtBQUNYLE9BQ0NOLFlBQVksY0FBWixNQUFnQyxtQ0FBaEMsSUFDR3JDLGdCQUFnQm9ELE1BRG5CLElBRUdwRCxLQUFLcUQsV0FBTCxLQUFxQkQsTUFIekIsRUFJRTtBQUNELFFBQU1FLGNBQXNCdEQsSUFBNUI7QUFDQUEsV0FBT29ELE9BQU9HLElBQVAsQ0FBWUQsV0FBWixFQUF5QmpDLEdBQXpCLENBQ047QUFBQSxZQUFPbUMsbUJBQW1CQyxHQUFuQixJQUEwQixHQUExQixHQUFnQ0QsbUJBQW1CRixZQUFZRyxHQUFaLENBQW5CLENBQXZDO0FBQUEsS0FETSxFQUVMQyxJQUZLLENBRUEsR0FGQSxDQUFQO0FBR0E7QUFDRDs7QUFFRCxTQUFPLElBQUl4QyxPQUFKLENBQVksVUFBQ3lDLE9BQUQsRUFBVUMsTUFBVjtBQUFBLFVBQ2xCN0UsZUFBTzJELFFBQVAsQ0FDQzVDLE1BREQsRUFFQ0MsUUFGRCxFQUdDOEMsT0FIRCxFQUlDN0MsSUFKRCxFQUtDLFVBQUM2RCxVQUFELEVBQWFDLFVBQWIsRUFBeUJDLE9BQXpCLEVBQXFDO0FBQUU7QUFDdEMsUUFBTUMsY0FBY0YsV0FBVyxjQUFYLEtBQThCQSxXQUFXLGNBQVgsQ0FBOUIsSUFBNEQsRUFBaEY7QUFDQSxRQUFJQyxXQUFXQyxZQUFZQyxPQUFaLENBQW9CLGtCQUFwQixNQUE0QyxDQUFDLENBQTVELEVBQStEO0FBQzlELFNBQUk7QUFDSEYsZ0JBQVViLEtBQUtnQixLQUFMLENBQVdILE9BQVgsQ0FBVjtBQUNBLE1BRkQsQ0FFRSxPQUFPSSxHQUFQLEVBQVk7QUFDYjtBQUNBO0FBQ0Q7O0FBRUQsUUFBSUMsT0FBT1AsVUFBUCxFQUFtQixDQUFuQixNQUEwQixHQUExQixJQUFpQ08sT0FBT1AsVUFBUCxFQUFtQixDQUFuQixNQUEwQixHQUEvRCxFQUFvRTtBQUNuRSxZQUFPRixRQUFRO0FBQ2QzRCxZQUFNK0QsT0FEUTtBQUVkRiw0QkFGYztBQUdkaEIsZUFBU2lCO0FBSEssTUFBUixDQUFQO0FBS0E7O0FBRUQsUUFBSU8sZUFBZSxnREFBbkI7QUFDQSxRQUFJQyxZQUFZLElBQWhCO0FBQ0EsUUFBSVAsT0FBSixFQUFhO0FBQ1osU0FBSUEsUUFBUVEsS0FBWixFQUFtQjtBQUNsQkYscUJBQWVOLFFBQVFRLEtBQVIsQ0FBY0MsT0FBN0I7QUFDQUYsa0JBQVlQLFFBQVFRLEtBQVIsQ0FBY0QsU0FBMUI7QUFDQTs7QUFFRCxTQUFJUCxRQUFRUyxPQUFSLElBQW1CVCxRQUFRTyxTQUEvQixFQUEwQztBQUN6Q0QscUJBQWVOLFFBQVFTLE9BQXZCO0FBQ0FGLGtCQUFZUCxRQUFRTyxTQUFwQjtBQUNBOztBQUVELFNBQUlQLFFBQVFVLG9CQUFaLEVBQWtDO0FBQ2pDSixxQkFBZU4sUUFBUVUsb0JBQVIsQ0FBNkJELE9BQTVDO0FBQ0FGLGtCQUFZLElBQVo7QUFDQTtBQUNEOztBQUVELFFBQUlULGVBQWUsR0FBbkIsRUFBd0I7QUFDdkI5RSxvQkFBTzJGLFFBQVA7QUFDQSxZQUFPZCxPQUFPLElBQUllLDhCQUFKLENBQ2JOLFlBRGEsRUFFYk4sT0FGYSxFQUdiRixVQUhhLEVBSWJDLFVBSmEsRUFLYlEsU0FMYSxDQUFQLENBQVA7QUFPQTs7QUFFRCxXQUFPVixPQUFPLElBQUlnQix1QkFBSixDQUNiUCxZQURhLEVBRWJOLE9BRmEsRUFHYkYsVUFIYSxFQUliQyxVQUphLEVBS2JRLFNBTGEsQ0FBUCxDQUFQO0FBT0EsSUE1REYsQ0FEa0I7QUFBQSxHQUFaLENBQVA7QUErREE7Ozs7Ozs7Ozs7Ozs7OztTQzlFZTVFLEssR0FBQUEsSzs7OztBQTVEaEI7Ozs7Ozs7OztBQVNPLEtBQU1oQix3QkFBUTtBQUNwQjZELE9BQUssS0FEZTtBQUVwQnNDLFdBQVM7QUFGVyxFQUFkOztBQUtQOzs7Ozs7Ozs7QUFRTyxLQUFNcEcsc0NBQWU7QUFDM0JxRyx5Q0FDRXBHLE1BQU02RCxHQURSLEVBQ2MsMENBRGQseUJBRUU3RCxNQUFNbUcsT0FGUixFQUVrQiwrQkFGbEIsUUFEMkI7QUFLM0JFLDRDQUNFckcsTUFBTTZELEdBRFIsRUFDYyw0Q0FEZCwwQkFFRTdELE1BQU1tRyxPQUZSLEVBRWtCLGlDQUZsQjtBQUwyQixFQUFyQjs7QUFXUDs7O0FBR08sS0FBTTlGLDBCQU1UO0FBQ0hrRSxPQUFLeEUsYUFBYXFHLEdBRGY7QUFFSHBDLFlBQVUsb0JBQU0sQ0FBRSxDQUZmO0FBR0hzQyxjQUFZLE9BSFQ7QUFJSGpDLFVBQVEsT0FKTDtBQUtIMkIsVUFMRyxzQkFLUSxDQUFFO0FBTFYsRUFORzs7QUFjUDs7Ozs7Ozs7OztBQVVPLFVBQVNoRixLQUFULE9BVUo7QUFBQSxNQVRGdUQsR0FTRSxRQVRGQSxHQVNFO0FBQUEsTUFSRlAsUUFRRSxRQVJGQSxRQVFFO0FBQUEsTUFQRnNDLFVBT0UsUUFQRkEsVUFPRTtBQUFBLE1BTkZqQyxNQU1FLFFBTkZBLE1BTUU7O0FBQ0ZoRSxTQUFPa0UsR0FBUCxHQUFhQSxHQUFiO0FBQ0FsRSxTQUFPMkQsUUFBUCxHQUFrQkEsUUFBbEI7QUFDQTNELFNBQU9pRyxVQUFQLEdBQW9CQSxVQUFwQjtBQUNBakcsU0FBT2dFLE1BQVAsR0FBZ0JBLE1BQWhCO0FBQ0EsRTs7Ozs7Ozs7Ozs7OztBQ2hGRDs7Ozs7Ozs7Ozs7O0FBRUE7OztLQUdhNkIsZ0IsV0FBQUEsZ0I7OztBQUNaLDRCQUNDSixPQURELEVBRUN4RSxJQUZELEVBR0M2RCxVQUhELEVBSUNoQixPQUpELEVBS0N5QixTQUxELEVBTUU7QUFBQTs7QUFBQSxtSUFDS0UsT0FETDs7QUFFRCxTQUFLeEUsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBSzZELFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsU0FBS2hCLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUt5QixTQUFMLEdBQWlCQSxTQUFqQjtBQUxDO0FBTUQ7OztHQWJvQ1csOEI7O0FBZ0J0Qzs7Ozs7S0FHYU4sdUIsV0FBQUEsdUI7OztBQUNaLG1DQUNDSCxPQURELEVBRUN4RSxJQUZELEVBR0M2RCxVQUhELEVBSUNoQixPQUpELEVBS0N5QixTQUxELEVBTUU7QUFBQTs7QUFBQSxrSkFDS0UsT0FETDs7QUFFRCxVQUFLeEUsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsVUFBSzZELFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0EsVUFBS2hCLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFVBQUt5QixTQUFMLEdBQWlCQSxTQUFqQjtBQUxDO0FBTUQ7OztHQWIyQ1csOEI7O21CQWdCOUI7QUFDZEwsb0NBRGM7QUFFZEQ7QUFGYyxFOzs7Ozs7QUN6Q2Y7O0FBRUEsa0RBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosa0RBQWlELGFBQWEsdUZBQXVGLEVBQUUsdUZBQXVGOztBQUU5TywyQ0FBMEMsK0RBQStELHFHQUFxRyxFQUFFLHlFQUF5RSxlQUFlLHlFQUF5RSxFQUFFLEVBQUUsdUhBQXVIOztBQUU1ZTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLOztBQUVMO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUM7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQ3JETTNGLFE7QUFHTCxzQkFBYztBQUFBOztBQUNiLFFBQUt5RSxHQUFMLEdBQVcsSUFBWDtBQUNBOzs7O3lCQUVLO0FBQ0wsV0FBTyxLQUFLQSxHQUFaO0FBQ0E7Ozt3QkFFSUEsRyxFQUFhO0FBQ2pCLFNBQUtBLEdBQUwsR0FBV0EsR0FBWDtBQUNBOzs7NEJBRVE7QUFDUixTQUFLQSxHQUFMLEdBQVcsSUFBWDtBQUNBOzs7Ozs7QUFHSyxLQUFNeUIsOEJBQVcsSUFBSWxHLFFBQUosRUFBakI7bUJBQ1FrRyxROzs7Ozs7Ozs7Ozs7OztBQ3JCZjs7Ozs7Ozs7QUFHQTs7OztLQUlxQnJHLFM7Ozs7Ozs7O0FBQ3BCOzs7MEJBR2NzQixTLEVBQW1CTixPLEVBQWdEO0FBQ2hGLFdBQU8sdUJBQVE7QUFDZEMsYUFBUSxNQURNO0FBRWRDLDhCQUF1QkksU0FBdkIsZ0JBRmM7QUFHZEgsV0FBTUg7QUFIUSxLQUFSLEVBSUpJLElBSkksQ0FJQztBQUFBLFlBQU1rRixTQUFOO0FBQUEsS0FKRCxDQUFQO0FBS0E7O0FBRUQ7Ozs7Ozt1QkFHV2hGLFMsRUFLUjtBQUNGLFdBQU8sdUJBQVEsRUFBRUoseUJBQXVCSSxTQUF2QixnQkFBRixFQUFSLEVBQTJERixJQUEzRCxDQUFnRTtBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUFoRSxDQUFQO0FBQ0E7O0FBRUQ7Ozs7OzsyQkFHY0csUyxFQUFtQlcsVyxFQUFvQztBQUNwRSxXQUFPLHVCQUFRO0FBQ2RoQixhQUFRLFFBRE07QUFFZEMsOEJBQXVCSSxTQUF2QixvQkFBK0NXO0FBRmpDLEtBQVIsRUFHSmIsSUFISSxDQUdDO0FBQUEsWUFBTWtGLFNBQU47QUFBQSxLQUhELENBQVA7QUFJQTs7Ozs7O21CQWhDbUJ0RyxTOzs7Ozs7Ozs7Ozs7Ozs7QUNQckI7Ozs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFFQTs7OztLQUlxQkMsSTs7Ozs7Ozs7O0FBYXBCOzs7eUJBR2FzRyxRLEVBQWtCQyxRLEVBQW1DO0FBQ2pFLFdBQU8sdUJBQVE7QUFDZHZGLGFBQVEsTUFETTtBQUVkQyxlQUFVLE9BRkk7QUFHZEMsV0FBTTtBQUNMb0Ysd0JBREs7QUFFTEMsd0JBRks7QUFHTEwsa0JBQVlqRyxlQUFPaUcsVUFIZDs7QUFLTE0sa0JBQVksU0FMUDtBQU1MQyxrQkFBWSxPQU5QO0FBT0xDLGlCQUFXLFNBUE47QUFRTEMsY0FBUSxTQVJIO0FBU0xDLGNBQVEsU0FUSDtBQVVMQyxpQkFBVztBQVZOO0FBSFEsS0FBUixFQWVKMUYsSUFmSSxDQWVDLGdCQUFjO0FBQUEsU0FBWEQsSUFBVyxRQUFYQSxJQUFXOztBQUNyQixTQUFJQSxLQUFLNEYsU0FBVCxFQUFvQjtBQUNuQjVHLHlCQUFTNkcsSUFBVCxDQUFjN0YsS0FBSzRGLFNBQW5CO0FBQ0EsYUFBTzVGLElBQVA7QUFDQTs7QUFFRGxCLFVBQUtnSCxlQUFMLEdBQXVCOUYsS0FBSytGLFFBQTVCO0FBQ0FqSCxVQUFLa0gsZUFBTCxHQUF1QmhHLEtBQUtvRixRQUE1QjtBQUNBLFlBQU9wRixLQUFLK0YsUUFBWjtBQUNBLFlBQU8vRixLQUFLb0YsUUFBWjtBQUNBLFlBQU9wRixJQUFQO0FBQ0EsS0ExQk0sQ0FBUDtBQTJCQTs7QUFFRDs7Ozs7QUF6Q0E7Ozs7Ozs7Z0NBNENvQlEsSSxFQUErQjtBQUNsRCxRQUFJLENBQUMxQixLQUFLZ0gsZUFBVixFQUEyQixNQUFNLElBQUluRCxLQUFKLENBQVUsNENBQVYsQ0FBTjtBQUMzQixXQUFPLHVCQUFRO0FBQ2Q3QyxhQUFRLE1BRE07QUFFZEMsZUFBVSxXQUZJO0FBR2RDLFdBQU07QUFDTG9GLGdCQUFVdEcsS0FBS2tILGVBRFY7QUFFTEQsZ0JBQVVqSCxLQUFLZ0gsZUFGVjtBQUdMLGlCQUFXdEYsSUFITjtBQUlMeUYsY0FBUTtBQUpIO0FBSFEsS0FBUixFQVNKaEcsSUFUSSxDQVNDLGlCQUFjO0FBQUEsU0FBWEQsSUFBVyxTQUFYQSxJQUFXOztBQUNyQmxCLFVBQUtvSCxjQUFMLEdBQXNCMUYsSUFBdEI7QUFDQSxZQUFPUixJQUFQO0FBQ0EsS0FaTSxDQUFQO0FBYUE7O0FBRUQ7Ozs7OztpQ0FHcUJtRyxJLEVBQStCO0FBQ25ELFFBQUksQ0FBQ3JILEtBQUtvSCxjQUFWLEVBQTBCO0FBQ3pCLFdBQU0sSUFBSXZELEtBQUosQ0FBVSxzRUFBVixDQUFOO0FBQ0E7QUFDRCxXQUFPLHVCQUFRO0FBQ2Q3QyxhQUFRLE1BRE07QUFFZEMsZUFBVSx3QkFGSTtBQUdkQyxXQUFNO0FBQ0xvRixnQkFBVXRHLEtBQUtrSCxlQURWO0FBRUxELGdCQUFVakgsS0FBS2dILGVBRlY7QUFHTCxpQkFBV2hILEtBQUtvSCxjQUhYO0FBSUxFLHdCQUFrQkQ7QUFKYjtBQUhRLEtBQVIsRUFTSmxHLElBVEksQ0FTQyxpQkFBYztBQUFBLFNBQVhELElBQVcsU0FBWEEsSUFBVzs7QUFDckJsQixVQUFLZ0gsZUFBTCxHQUF1QixJQUF2QjtBQUNBaEgsVUFBS2tILGVBQUwsR0FBdUIsSUFBdkI7QUFDQWxILFVBQUtvSCxjQUFMLEdBQXNCLElBQXRCO0FBQ0FsSCx3QkFBUzZHLElBQVQsQ0FBYzdGLEtBQUtxRyxZQUFMLENBQWtCVCxTQUFoQztBQUNBLFlBQU81RixLQUFLcUcsWUFBWjtBQUNBLEtBZk0sQ0FBUDtBQWdCQTs7OzRCQUVlQyxRLEVBQW9CO0FBQ25DdkgsbUJBQU8yRixRQUFQLEdBQWtCNEIsUUFBbEI7QUFDQTs7Ozs7O0FBN0ZtQnhILEssQ0FDYmdILGUsR0FBa0IsSTtBQURMaEgsSyxDQUVia0gsZSxHQUFrQixJO0FBRkxsSCxLLENBR2JvSCxjLEdBQWlCLEk7QUFISnBILEssQ0FTYnlILGtCLEdBQXFCO0FBQzNCQyxPQUFLO0FBRHNCLEU7bUJBVFIxSCxJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDUnJCOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7O0FBYUE7Ozs7O0tBS3FCRyxJOzs7Ozs7OztBQUNwQjs7OzBCQUdjWSxPLEVBQWdEO0FBQzdELFdBQU8sdUJBQVE7QUFDZEMsYUFBUSxNQURNO0FBRWRDLGVBQVUsUUFGSTtBQUdkQyxXQUFNSDtBQUhRLEtBQVIsRUFJSkksSUFKSSxDQUlDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBSkQsQ0FBUDtBQUtBOztBQUVEOzs7Ozs7dUJBR1dKLE0sRUFBc0M7QUFDaEQsV0FBTyx1QkFBUSxFQUFFRyxVQUFVLFlBQVlILE1BQXhCLEVBQVIsRUFBMENLLElBQTFDLENBQStDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBQS9DLENBQVA7QUFDQTs7QUFFRDs7Ozs7O3dCQUdZSixNLEVBQWdCQyxPLEVBQW1EO0FBQzlFLFdBQU8sdUJBQVE7QUFDZEMsYUFBUSxPQURNO0FBRWRDLGVBQVUsWUFBWUgsTUFGUjtBQUdkSSxXQUFNSDtBQUhRLEtBQVIsRUFJSkksSUFKSSxDQUlDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBSkQsQ0FBUDtBQUtBOztBQUVEOzs7Ozs7NEJBR2dCSixNLEVBQXNDO0FBQ3JELFdBQU8sdUJBQVE7QUFDZEcsMkJBQW9CSCxNQUFwQjtBQURjLEtBQVIsRUFFSkssSUFGSSxDQUVDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBRkQsQ0FBUDtBQUdBOztBQUVEOzs7Ozs7OEJBR2tCSixNLEVBQWdCNkcsSSxFQUFjQyxPLEVBQXFDO0FBQ3BGLFdBQU8sdUJBQVE7QUFDZDVHLGFBQVEsTUFETTtBQUVkQywyQkFBb0JILE1BQXBCLFdBRmM7QUFHZEksV0FBTTtBQUNMSixvQkFESztBQUVMOEcsZUFBU3hELEtBQUtDLFNBQUwsQ0FBZXVELE9BQWYsQ0FGSjtBQUdMRDtBQUhLO0FBSFEsS0FBUixFQVFKeEcsSUFSSSxDQVFDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBUkQsQ0FBUDtBQVNBOztBQUVEOzs7Ozs7K0JBR21CSixNLEVBQWdEO0FBQ2xFLFdBQU8sdUJBQVEsRUFBRUcsc0JBQW9CSCxNQUFwQixjQUFGLEVBQVIsRUFBbURLLElBQW5ELENBQXdEO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBQXhELENBQVA7QUFDQTs7QUFFRDs7Ozs7O2tDQUdzQjJHLFcsRUFNVztBQUNoQyxXQUFPLHVCQUFRO0FBQ2Q1RyxrQ0FBMkJxRCxPQUFPRyxJQUFQLENBQVlvRCxXQUFaLEVBQ3pCQyxNQUR5QixDQUNsQjtBQUFBLGFBQU9ELFlBQVlsRCxHQUFaLENBQVA7QUFBQSxNQURrQixFQUV6QnBDLEdBRnlCLENBRXJCO0FBQUEsYUFBVW9DLEdBQVYsU0FBaUJELG1CQUFtQlksT0FBT3VDLFlBQVlsRCxHQUFaLENBQVAsQ0FBbkIsQ0FBakI7QUFBQSxNQUZxQixFQUd6QkMsSUFIeUIsQ0FHcEIsR0FIb0I7QUFEYixLQUFSLEVBS0p6RCxJQUxJLENBS0M7QUFBQSxZQUFRQyxLQUFLRixJQUFMLENBQVU2RyxTQUFsQjtBQUFBLEtBTEQsQ0FBUDtBQU1BOztBQUVEOzs7Ozs7Ozs7OztxQ0FpQnlCQyxRLEVBQWtCO0FBQzFDLFFBQU1DLFNBQVMsQ0FBQyxXQUFELEVBQWMsUUFBZCxFQUF3QixXQUF4QixFQUFxQyxhQUFyQyxFQUFvRCxVQUFwRCxDQUFmOztBQUQwQztBQUFBO0FBQUE7O0FBQUE7QUFHMUMsMEJBQW9CQSxNQUFwQiw4SEFBNEI7QUFBQSxVQUFqQkMsTUFBaUI7O0FBQzNCLFVBQUkvSCxLQUFLZ0ksT0FBTCxDQUFhRCxNQUFiLEVBQW9CRSxJQUFwQixDQUF5QkosUUFBekIsQ0FBSixFQUF3QztBQUN2QyxjQUFPLENBQUNFLE1BQUQsQ0FBUDtBQUNBO0FBQ0Q7QUFQeUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFTMUMsV0FBTyxDQUFDLFVBQUQsRUFBYSxXQUFiLEVBQTBCLFVBQTFCLEVBQXNDLE9BQXRDLENBQVA7QUFDQTs7O2tDQUVxQkYsUSxFQUErQztBQUNwRSxXQUFPN0gsS0FBS2tJLGlCQUFMLENBQXVCTCxRQUF2QixFQUNMTSxNQURLLENBQ0UsVUFBQ1QsV0FBRCxFQUFjSyxLQUFkO0FBQUEseUJBQ0pMLFdBREksc0JBRU5LLEtBRk0sRUFFRUYsUUFGRjtBQUFBLEtBREYsRUFJRixFQUpFLENBQVA7QUFLQTs7QUFFRDs7Ozs7Ozs7OzBCQU1jQSxRLEVBQWtFO0FBQy9FLFFBQU1ILGNBQWMxSCxLQUFLb0ksY0FBTCxDQUFvQlAsUUFBcEIsQ0FBcEI7O0FBRUE7QUFDQSxRQUFNUSxXQUNMbEUsT0FBT0csSUFBUCxDQUFZb0QsV0FBWixFQUNFdEYsR0FERixDQUNNLGlCQUFTO0FBQ2IsU0FBTWtHLFFBQVFaLFlBQVlLLEtBQVosRUFBbUJRLElBQW5CLEVBQWQ7QUFDQSxhQUFRUixLQUFSO0FBQ0MsV0FBSyxRQUFMO0FBQ0MsY0FBTy9ILEtBQUs0QixHQUFMLENBQVMwRyxLQUFULENBQVA7O0FBRUQsV0FBSyxXQUFMO0FBQ0MsY0FBTzVJLGtCQUFROEksY0FBUixDQUF1QkYsS0FBdkIsRUFBOEJ0SCxJQUE5QixDQUNOO0FBQUEsZUFBV2hCLEtBQUs0QixHQUFMLENBQVNULFFBQVFSLE1BQWpCLENBQVg7QUFBQSxRQURNLENBQVA7O0FBSUQsV0FBSyxXQUFMO0FBQ0MsY0FBT2pCLGtCQUFRa0MsR0FBUixDQUFZMEcsS0FBWixFQUFtQnRILElBQW5CLENBQ047QUFBQSxlQUFXaEIsS0FBSzRCLEdBQUwsQ0FBU1QsUUFBUVIsTUFBakIsQ0FBWDtBQUFBLFFBRE0sQ0FBUDs7QUFJRCxXQUFLLFVBQUw7QUFBaUI7QUFBQSwyQkFDTTJILE1BQU1HLEtBQU4sQ0FBWSxJQUFaLENBRE47QUFBQTtBQUFBLFlBQ1RDLEtBRFM7QUFBQSxZQUNGQyxJQURFOztBQUdoQixlQUFPLHVCQUFRO0FBQ2Q3SCxnREFBcUM0SCxLQUFyQyxrQkFBdURDO0FBRHpDLFNBQVIsRUFHTDNILElBSEssQ0FHQSxVQUFDQyxJQUFEO0FBQUEsZ0JBQW1DQSxLQUFLRixJQUFMLENBQVU2RyxTQUE3QztBQUFBLFNBSEEsQ0FBUDtBQUlBOztBQUVELFdBQUssVUFBTDtBQUNBLFdBQUssV0FBTDtBQUNBLFdBQUssVUFBTDtBQUNBLFdBQUssYUFBTDtBQUNBLFdBQUssT0FBTDtBQUNDLGNBQU8sdUJBQVE7QUFDZDlHLHFDQUEyQmlILEtBQTNCLFNBQW9DTztBQUR0QixRQUFSLEVBR0x0SCxJQUhLLENBR0EsVUFBQ0MsSUFBRDtBQUFBLGVBQW1DQSxLQUFLRixJQUFMLENBQVU2RyxTQUE3QztBQUFBLFFBSEEsQ0FBUDs7QUFLRDtBQUFTO0FBQ1IsY0FBTSxJQUFJbEUsS0FBSixxREFDNkNxRSxLQUQ3QyxPQUFOO0FBR0E7QUFyQ0Y7QUF1Q0EsS0ExQ0YsQ0FERDs7QUE2Q0EsV0FBTzlGLFFBQVFDLEdBQVIsQ0FBWW1HLFFBQVosRUFDTHJILElBREssQ0FDQSxxQkFBYTtBQUNsQjtBQUNBLFNBQU00SCxVQUFpREMsVUFBVVYsTUFBVixDQUN0RCxVQUFDVyxHQUFELEVBQU1DLElBQU47QUFBQSwwQ0FBbUJELEdBQW5CLHNCQUE0QkUsTUFBTUMsT0FBTixDQUFjRixJQUFkLElBQXNCQSxJQUF0QixHQUE2QixDQUFDQSxJQUFELENBQXpEO0FBQUEsTUFEc0QsRUFFdEQsRUFGc0QsQ0FBdkQ7O0FBS0E7QUFDQSxTQUFNRyxjQUE0Q04sUUFBUVQsTUFBUixDQUNqRCxVQUFDVyxHQUFELEVBQU1DLElBQU4sRUFBK0M7QUFDOUM7QUFDQSxVQUFNcEksU0FBaUIsT0FBT29JLEtBQUsxRyxFQUFaLEtBQW1CLFFBQW5CLEdBQThCMEcsS0FBSzFHLEVBQW5DLEdBQ3RCLE9BQU8wRyxLQUFLcEksTUFBWixLQUF1QixRQUF2QixHQUFrQ29JLEtBQUtwSSxNQUF2QyxHQUFnRCxFQURqRDs7QUFHQSxhQUFPd0QsT0FBT2dGLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxHQUFsQixzQkFBMEJuSSxNQUExQixFQUFtQ29JLElBQW5DLEVBQVA7QUFDQSxNQVBnRCxFQVFqRCxFQVJpRCxDQUFsRDtBQVVBLFlBQU81RSxPQUFPRyxJQUFQLENBQVk0RSxXQUFaLEVBQXlCOUcsR0FBekIsQ0FBNkI7QUFBQSxhQUFPOEcsWUFBWTFFLEdBQVosQ0FBUDtBQUFBLE1BQTdCLENBQVA7QUFDQSxLQXBCSyxDQUFQO0FBcUJBOztBQUVEOzs7Ozs7Z0NBR29CN0QsTSxFQUEwQztBQUM3RCxXQUFPLHVCQUFRO0FBQ2RHLDJCQUFvQkgsTUFBcEI7QUFEYyxLQUFSLEVBRUpLLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUZELENBQVA7QUFHQTs7QUFFRDs7Ozs7O2tDQUdzQkosTSxFQUFnQlksSSxFQUFjNkgsSyxFQUFxQztBQUN4RixXQUFPL0ksbUJBQVNzQixNQUFULENBQWdCaEIsTUFBaEIsRUFBd0JZLElBQXhCLEVBQThCNkgsS0FBOUIsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7Z0NBR29CQyxVLEVBQXFDO0FBQ3hELFdBQU9oSixtQkFBU2lKLE1BQVQsQ0FBZ0JELFVBQWhCLENBQVA7QUFDQTs7QUFFRDs7Ozs7O2lDQUc4QztBQUM3QyxXQUFPLHVCQUFRO0FBQ2R2SSxlQUFVO0FBREksS0FBUixFQUVKRSxJQUZJLENBRUM7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FGRCxDQUFQO0FBR0E7O0FBRUQ7Ozs7OztpQ0FHcUJGLE0sRUFBMEQ7QUFBQSxzQ0FBdkMwSSxPQUF1QztBQUF2Q0EsWUFBdUM7QUFBQTs7QUFDOUUsV0FBT3RILFFBQVFDLEdBQVIsQ0FDTnFILFFBQVFuSCxHQUFSLENBQVk7QUFBQSxZQUFVLHVCQUFRO0FBQzdCdEIsMENBQWtDSCxNQURMO0FBRTdCRSxjQUFRLE9BRnFCO0FBRzdCRSxZQUFNO0FBQ0xGLGVBQVFBLE9BQU9RLFdBQVA7QUFESDtBQUh1QixNQUFSLENBQVY7QUFBQSxLQUFaLENBRE07QUFTUDtBQVRPLEtBVUxMLElBVkssQ0FVQSxZQUFNLENBQUUsQ0FWUixDQUFQO0FBV0E7O0FBRUQ7Ozs7OztzQ0FHd0Q7QUFDdkQsV0FBTyxpQ0FBaUIsT0FBakIsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7OzhCQUlrQndJLEssRUFBZ0U7QUFDakYsV0FBTywyQkFBVyx5QkFBWCxFQUFzQ0EsS0FBdEMsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7MEJBR2M3SSxNLEVBQStCO0FBQzVDLFdBQU8sdUJBQVE7QUFDZEUsYUFBUSxNQURNO0FBRWRDLGVBQVUsZUFGSTtBQUdkQyxXQUFNLEVBQUVKLGNBQUY7QUFIUSxLQUFSLEVBSUpLLElBSkksQ0FJQztBQUFBLFlBQU1rRixTQUFOO0FBQUEsS0FKRCxDQUFQO0FBS0E7O0FBRUQ7Ozs7OztrQ0FJQ3VELGlCLEVBQ0E5SSxNLEVBQ3VCO0FBQ3ZCLFFBQU1ZLE9BQU8sa0JBQWI7QUFDQSxRQUFNUixPQUFPO0FBQ1osa0JBQWEsQ0FBQztBQUNiUSxnQkFEYTtBQUViTixZQUFNO0FBQ0xvQixXQUFJb0g7QUFEQztBQUZPLE1BQUQ7QUFERCxLQUFiOztBQVNBLFdBQU8sdUJBQVE7QUFDZDVJLGFBQVEsT0FETTtBQUVkQywyQkFBb0JILE1BRk47QUFHZEk7QUFIYyxLQUFSLEVBSUpDLElBSkksQ0FJQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUpELENBQVA7QUFLQTs7Ozs7O0FBblNtQmYsSyxDQXVGYmdJLE8sR0FBVTtBQUNoQjVHLGFBQVcsb0JBREs7QUFFaEJULFVBQVEsMEVBRlE7QUFHaEI7QUFDQU8sYUFBVyxrRkFKSztBQUtoQndJLGVBQWEsU0FMRztBQU1oQkMsWUFBVTtBQU5NLEU7bUJBdkZHM0osSTs7Ozs7Ozs7Ozs7Ozs7O0FDckJyQjs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUdBOzs7OztLQUtxQkssUTs7Ozs7Ozs7O0FBb0VwQjs7Ozs7O0FBL0NBOzs7Ozs7Ozs7Ozs7Ozs7MEJBbURjTSxNLEVBQWdCWSxJLEVBQWM2SCxLLEVBQXFDO0FBQ2hGLFFBQUksT0FBT0EsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM5QixZQUFPLHVCQUFRO0FBQ2R2SSxjQUFRLE1BRE07QUFFZEMsZ0JBQVUsWUFGSTtBQUdkQyxZQUFNO0FBQ0xKLHFCQURLO0FBRUxZLGlCQUZLO0FBR0xxSSxpQkFBVVI7QUFITCxPQUhRO0FBUWRoRyxtQkFBYTtBQUNaUyxlQUFRO0FBREk7QUFSQyxNQUFSLEVBV0o3QyxJQVhJLENBV0M7QUFBQSxhQUFNa0YsU0FBTjtBQUFBLE1BWEQsQ0FBUDtBQVlBOztBQUVELFFBQU1uRixPQUFPLElBQUk4SSxRQUFKLEVBQWI7O0FBRUE5SSxTQUFLK0ksTUFBTCxDQUFZLFFBQVosRUFBc0JuSixNQUF0QjtBQUNBSSxTQUFLK0ksTUFBTCxDQUFZLGNBQVosRUFBNEJ2SSxJQUE1QjtBQUNBUixTQUFLK0ksTUFBTCxDQUFZLGVBQVosRUFBNkJWLEtBQTdCOztBQUVBLFdBQU8sdUJBQVE7QUFDZHZJLGFBQVEsTUFETTtBQUVkQyxlQUFVLFlBRkk7QUFHZEMsZUFIYztBQUlkcUMsa0JBQWE7QUFDWixzQkFBZ0I7QUFESjtBQUpDLEtBQVIsRUFPSnBDLElBUEksQ0FPQztBQUFBLFlBQU1rRixTQUFOO0FBQUEsS0FQRCxDQUFQO0FBUUE7O0FBRUQ7Ozs7O0FBbERBOzs7Ozs7OztBQXJEQTs7Ozs7Ozs7Ozs7O3VCQTBHV21ELFUsRUFBdUM7QUFDakQsV0FBTyx1QkFBUTtBQUNkdkksZUFBVSxnQkFBZ0J1STtBQURaLEtBQVIsRUFFSnJJLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUZELENBQVA7QUFHQTs7QUFFRDs7Ozs7OytCQUdtQkosTSxFQUEwQztBQUM1RCxXQUFPWCxlQUFLK0osWUFBTCxDQUFrQnBKLE1BQWxCLENBQVA7QUFDQTs7QUFFRDs7Ozs7OzBCQUdjMEksVSxFQUFxQztBQUNsRCxXQUFPLHVCQUFRO0FBQ2R2SSwrQkFBd0J1SSxVQUF4QjtBQURjLEtBQVIsRUFFSnJJLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQUwsQ0FBVWlKLEdBQWxCO0FBQUEsS0FGRCxDQUFQO0FBR0E7O0FBRUQ7Ozs7OztzQ0FHd0Q7QUFDdkQsV0FBTyxpQ0FBaUIsV0FBakIsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7OzhCQUlrQlIsSyxFQUEwRDtBQUMzRSxXQUFPLDJCQUFXLGFBQVgsRUFBMEJBLEtBQTFCLENBQVA7QUFDQTs7QUFFRDs7Ozs7O2tDQUdzQjdJLE0sRUFBZ0IyRixVLEVBQW1DO0FBQ3hFLFdBQU8sdUJBQVE7QUFDZHpGLGFBQVEsT0FETTtBQUVkQyxlQUFVLDJCQUZJO0FBR2RDLFdBQU07QUFDTEosb0JBREs7QUFFTDJGO0FBRks7QUFIUSxLQUFSLEVBT0p0RixJQVBJLENBT0M7QUFBQSxZQUFNa0YsU0FBTjtBQUFBLEtBUEQsQ0FBUDtBQVFBOztBQUVEOzs7Ozs7MEJBSUN2RixNLEVBQ0FzSixjLEVBQ0FDLFMsRUFDZ0I7QUFDaEIsV0FBTyx1QkFBUTtBQUNkckosYUFBUSxNQURNO0FBRWRDLGVBQVUsbUJBRkk7QUFHZEMsV0FBTTtBQUNMSixvQkFESztBQUVMd0osd0JBQWtCRixjQUZiO0FBR0xDO0FBSEs7QUFIUSxLQUFSLEVBUUpsSixJQVJJLENBUUM7QUFBQSxZQUFNa0YsU0FBTjtBQUFBLEtBUkQsQ0FBUDtBQVNBOzs7Ozs7QUEvS21CN0YsUyxDQVViK0osYyxHQUFpQjtBQUN2QkMsWUFBVSxZQURhO0FBRXZCQyxXQUFTLGtCQUZjO0FBR3ZCQyx3QkFBc0IsNkJBSEM7QUFJdkJDLGFBQVcsV0FKWTtBQUt2QkMsU0FBTyxpQkFMZ0I7QUFNdkJDLFFBQU0saUJBTmlCO0FBT3ZCQyxPQUFLLEtBUGtCO0FBUXZCQyxTQUFPO0FBUmdCLEU7QUFWSnZLLFMsQ0FvQ2J3SyxpQixHQUFvQjtBQUMxQkMsV0FBUztBQUNSQyxZQUFTLCtCQUREO0FBRVJDLGtCQUFlLHVCQUZQO0FBR1JDLGNBQVcsbUJBSEg7QUFJUkMsWUFBUyxpQkFKRDtBQUtSTixVQUFPO0FBTEMsR0FEaUI7QUFRMUJOLFdBQVM7QUFDUlMsWUFBUywrQkFERDtBQUVSSSxxQkFBa0IsMEJBRlY7QUFHUkgsa0JBQWUsdUJBSFA7QUFJUkMsY0FBVyxtQkFKSDtBQUtSQyxZQUFTLGlCQUxEO0FBTVJOLFVBQU87QUFOQztBQVJpQixFO0FBcENQdkssUyxDQTZEYitLLFksR0FBZTtBQUNyQkMsV0FBUyxPQURZO0FBRXJCQyxXQUFTLE9BRlk7QUFHckJDLFdBQVMsT0FIWTtBQUlyQkMsY0FBWTtBQUpTLEU7bUJBN0RGbkwsUTs7Ozs7Ozs7Ozs7Ozs7QUNWckI7Ozs7OztBQUVPLEtBQU1vTCw4Q0FBbUIsU0FBbkJBLGdCQUFtQixDQUFDQyxJQUFEO0FBQUEsU0FBa0IsdUJBQVE7QUFDekQ1SyxtQkFBYzRLLElBQWQ7QUFEeUQsR0FBUixFQUUvQzFLLElBRitDLENBRTFDO0FBQUEsVUFBUUMsS0FBS0YsSUFBYjtBQUFBLEdBRjBDLENBQWxCO0FBQUEsRUFBekI7QUFJQSxLQUFNNEssa0NBQWEsU0FBYkEsVUFBYSxDQUFDRCxJQUFELEVBQWVsQyxLQUFmLEVBQWlEO0FBQzFFLE1BQU1vQyxjQUFjNUMsTUFBTUMsT0FBTixDQUFjTyxLQUFkLHNCQUNIQSxNQUFNL0UsSUFBTixDQUFXLEdBQVgsQ0FERyxlQUVUK0UsS0FGWDs7QUFJQSxTQUFPLHVCQUFRO0FBQ2QxSSx5QkFBb0I0SyxJQUFwQixTQUE0QkU7QUFEZCxHQUFSLEVBRUo1SyxJQUZJLENBRUM7QUFBQSxVQUFRbUQsT0FBT2dGLE1BQVAsQ0FBYyxFQUFkLEVBQWtCbEksS0FBS0YsSUFBdkIsRUFBNkI7QUFDNUM4SyxTQUFLQyxPQUFPN0ssS0FBSzJDLE9BQUwsQ0FBYSxpQkFBYixDQUFQO0FBRHVDLElBQTdCLENBQVI7QUFBQSxHQUZELENBQVA7QUFLQSxFQVZNLEM7Ozs7Ozs7Ozs7Ozs7O0FDTlA7Ozs7Ozs7Ozs7QUFPQTs7Ozs7O0tBTXFCM0QsVTs7Ozs7Ozs7QUFDcEI7OzswQkFHY1csTyxFQUF1RDtBQUNwRSxXQUFPLHVCQUFRO0FBQ2RDLGFBQVEsTUFETTtBQUVkQyxlQUFVLGNBRkk7QUFHZEMsV0FBTUg7QUFIUSxLQUFSLEVBSUpJLElBSkksQ0FJQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUpELENBQVA7QUFLQTs7QUFFRDs7Ozs7O3VCQUdXZ0wsWSxFQUEyQztBQUNyRCxXQUFPLHVCQUFRO0FBQ2RqTCxpQ0FBMEJpTDtBQURaLEtBQVIsRUFFSi9LLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUZELENBQVA7QUFHQTs7QUFFRDs7Ozs7O3dCQUlDZ0wsWSxFQUNBbkwsTyxFQUNzQjtBQUN0QixXQUFPLHVCQUFRO0FBQ2RDLGFBQVEsT0FETTtBQUVkQyxpQ0FBMEJpTCxZQUZaO0FBR2RoTCxXQUFNSDtBQUhRLEtBQVIsRUFJSkksSUFKSSxDQUlDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBSkQsQ0FBUDtBQUtBOztBQUVEOzs7Ozs7NEJBR2lEO0FBQ2hELFdBQU8sdUJBQVE7QUFDZEQsZUFBVTtBQURJLEtBQVIsRUFFSkUsSUFGSSxDQUVDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBRkQsQ0FBUDtBQUdBOztBQUVEOzs7Ozs7a0RBRzBFO0FBQ3pFLFdBQU8sdUJBQVE7QUFDZEQsZUFBVTtBQURJLEtBQVIsRUFFSkUsSUFGSSxDQUVDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBRkQsQ0FBUDtBQUdBOzs7K0JBRWtCeUQsRyxFQUFhOEQsSyxFQUFvQjtBQUNuRCxZQUFROUQsR0FBUjtBQUNDLFVBQUssV0FBTDtBQUNBLFVBQUssU0FBTDtBQUNDLGFBQU84RCxNQUFNMEQsV0FBTixFQUFQO0FBQ0Q7QUFDQyxhQUFPMUQsS0FBUDtBQUxGO0FBT0E7O0FBRUQ7Ozs7Ozt5Q0FRUTtBQUFBLFFBTG1Ca0IsS0FLbkIsdUVBQUosRUFBSTs7QUFDUCxXQUFPLHVCQUFRO0FBQ2QxSSxlQUFVLG1DQUFtQ3FELE9BQU9HLElBQVAsQ0FBWWtGLEtBQVosRUFDM0NyQixNQUQyQyxDQUNwQyxVQUFDOEQsQ0FBRCxFQUFJQyxDQUFKO0FBQUEsMENBQWNELENBQWQsSUFBb0JDLENBQXBCLFNBQXlCak0sV0FBV2tNLFdBQVgsQ0FBdUJELENBQXZCLEVBQTBCMUMsTUFBTTBDLENBQU4sQ0FBMUIsQ0FBekI7QUFBQSxNQURvQyxFQUM2QixFQUQ3QixFQUUzQ3pILElBRjJDLENBRXRDLEdBRnNDO0FBRC9CLEtBQVIsRUFJSnpELElBSkksQ0FJQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUpELENBQVA7QUFLQTs7Ozs7O21CQTdFbUJkLFU7Ozs7Ozs7Ozs7Ozs7OztBQ0xyQjs7Ozs7Ozs7QUFFQTs7Ozs7S0FLcUJDLFc7Ozs7Ozs7O0FBQ3BCOzs7NENBR3FFO0FBQ3BFLFdBQU8sdUJBQVEsRUFBRVksVUFBVSxxQkFBWixFQUFSLEVBQTZDRSxJQUE3QyxDQUFrRDtBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUFsRCxDQUFQO0FBQ0E7O0FBRUQ7Ozs7Ozt5Q0FHa0Y7QUFBQSxRQUF2RHFMLEtBQXVELHVFQUF2QyxJQUF1Qzs7QUFDakYsV0FBTyx1QkFBUTtBQUNkdEwsOENBQXVDc0w7QUFEekIsS0FBUixFQUVKcEwsSUFGSSxDQUVDO0FBQUEsWUFBUUMsS0FBS0YsSUFBTCxDQUFVLENBQVYsRUFBYXNMLEtBQXJCO0FBQUEsS0FGRCxDQUFQO0FBR0E7O0FBRUQ7Ozs7OzswQkFHY25MLFMsRUFBbUJOLE8sRUFLTTtBQUN0QyxXQUFPLHVCQUFRO0FBQ2RDLGFBQVEsTUFETTtBQUVkQyw4QkFBdUJJLFNBQXZCLGtCQUZjO0FBR2RILFdBQU1IO0FBSFEsS0FBUixFQUlKSSxJQUpJLENBSUM7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FKRCxDQUFQO0FBS0E7O0FBRUQ7Ozs7Ozt1QkFJQ0csUyxFQUNBb0wsUyxFQUNBQyxPLEVBQ0FDLE8sRUFDcUM7QUFDckMsUUFBTUMsc0JBQW9CdkwsU0FBcEIsa0JBQU47QUFDQSxRQUFNd0wsdUJBQXFCSixVQUFVTixXQUFWLEVBQXJCLFlBQW1ETyxRQUFRUCxXQUFSLEVBQXpEO0FBQ0EsUUFBSVcsY0FBSjtBQUNBLFFBQUlILFdBQVdBLFFBQVFHLEtBQXZCLEVBQThCO0FBQzdCQSxhQUFRSCxRQUFRRyxLQUFoQjtBQUNBLEtBRkQsTUFFTztBQUNOQSxhQUFRLEVBQVI7QUFDQTtBQUNELFFBQU1DLHlCQUF1QkQsS0FBN0I7QUFDQSxRQUFJM0MsTUFBTXlDLE9BQU9DLFNBQVAsR0FBbUJFLFVBQTdCOztBQUVBLFFBQUlKLFdBQVdBLFFBQVFLLFNBQW5CLElBQWdDTCxRQUFRTSxNQUE1QyxFQUFvRDtBQUNuRDlDLHlCQUFrQndDLFFBQVFNLE1BQTFCLG1CQUE4Q04sUUFBUUssU0FBdEQ7QUFDQTs7QUFFRCxXQUFPLHVCQUFRLEVBQUUvTCxVQUFVa0osR0FBWixFQUFSLEVBQTJCaEosSUFBM0IsQ0FBZ0M7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FBaEMsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7eUJBR2FnTSxZLEVBTWlDO0FBQzdDLFdBQU8sdUJBQVE7QUFDZGxNLGFBQVEsTUFETTtBQUVkQyxlQUFVLHFCQUZJO0FBR2RDLFdBQU1nTTtBQUhRLEtBQVIsRUFJSi9MLElBSkksQ0FJQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUpELENBQVA7QUFLQTs7Ozs7O21CQTNFbUJiLFc7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDZHJCOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7S0FJcUJDLEs7Ozs7Ozs7OztBQXVCcEI7Ozs7QUF0QkE7Ozs7OzswQkEwQkNnQixPLEVBSUE2TCxLLEVBVStCO0FBQUEsUUFUL0JSLE9BUytCLHVFQUwzQjtBQUNIUyxrQkFBYSxJQURWO0FBRUhDLHdCQUFtQixJQUZoQjtBQUdIQyxxQkFBZ0I7QUFIYixLQUsyQjs7QUFDL0IsV0FBTyxJQUFJbEwsT0FBSixDQUFZLFVBQUN5QyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDdkMsNEJBQVE7QUFDUDlELGNBQVEsTUFERDtBQUVQQyxnQkFBVSxTQUZIO0FBR1BDO0FBQ0NLLGtCQUFXRCxRQUFRQztBQURwQixTQUVJNEwsS0FGSjtBQUhPLE1BQVIsRUFPR2hNLElBUEgsQ0FPUSxnQkFBUTtBQUNmLFVBQU1nTSxRQUFRL0wsS0FBS0YsSUFBbkI7O0FBRUEsVUFBSXlMLFFBQVFTLFdBQVosRUFBeUI7QUFDeEIsV0FBTUcsZUFBZSxTQUFmQSxZQUFlLEdBQU07QUFDMUJaLGdCQUFRVyxjQUFSOztBQUVBek4sMEJBQVE0QyxVQUFSLENBQW1CbkIsUUFBUUQsU0FBM0IsRUFBc0NGLElBQXRDLENBQTJDLG1CQUFXO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQ3JELCtCQUEwQnFNLFFBQVFOLFlBQWxDLDhIQUFnRDtBQUFBLGVBQXJDTyxXQUFxQzs7QUFDL0MsZUFBSUEsWUFBWUMsT0FBWixLQUF3QlAsTUFBTVEsT0FBbEMsRUFBMkM7QUFDMUMsZ0JBQU1DLGFBQXNCSCxZQUFZSSxXQUFaLElBQTJCLEdBQXZEO0FBQ0EsZ0JBQU1DLFdBQW9CTCxZQUFZSSxXQUFaLElBQTJCLEdBQXJEO0FBQ0EsZ0JBQU1FLFlBQXFCTixZQUFZTyxTQUFaLElBQXlCLEdBQXBEOztBQUVBLGdCQUFJSixVQUFKLEVBQWdCO0FBQ2YsaUJBQUlwSSxZQUFZLElBQWhCO0FBQ0EsaUJBQUlELGVBQWUsMEJBQW5CO0FBQ0EsaUJBQU0wSSxTQUFpQlIsWUFBWVMsYUFBbkM7QUFDQSxpQkFBTXpJLFFBQVF3SSxPQUFPRSxLQUFQLENBQWEsbUJBQWIsQ0FBZDs7QUFFQSxpQkFBSWhGLE1BQU1DLE9BQU4sQ0FBYzNELEtBQWQsS0FBd0JBLE1BQU0sQ0FBTixDQUF4QixJQUFvQ0EsTUFBTSxDQUFOLENBQXhDLEVBQWtEO0FBQ2pERCwwQkFBWUMsTUFBTSxDQUFOLENBQVo7QUFDQUYsNkJBQWVFLE1BQU0sQ0FBTixDQUFmO0FBQ0E7O0FBRUQsb0JBQU9YLE9BQU8sSUFBSWdCLHVCQUFKLENBQ2JQLFlBRGEsRUFFYm5FLEtBQUtGLElBRlEsRUFHYkUsS0FBSzJELFVBSFEsRUFJYjNELEtBQUsyQyxPQUpRLEVBS2J5QixTQUxhLENBQVAsQ0FBUDtBQU9BLGFBbEJELE1Ba0JPLElBQUlzSSxZQUFZQyxTQUFaLElBQ1ZwQixRQUFRVyxjQUFSLEtBQTJCLENBRHJCLEVBQ3dCO0FBQzlCLGlCQUFNYyw0QkFDRmpCLEtBREUsRUFFRk0sV0FGRSxDQUFOOztBQUtBLG9CQUFPVyxhQUFhVixPQUFwQjs7QUFFQSxvQkFBTzdJLFFBQVF1SixZQUFSLENBQVA7QUFDQTtBQUNEO0FBQ0E7QUFDRDs7QUFFRDtBQXhDcUQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUF5Q3JELGFBQUl6QixRQUFRVyxjQUFSLEtBQTJCLENBQS9CLEVBQWtDO0FBQ2pDLGlCQUFPeEksT0FBTyxJQUFJZ0IsdUJBQUoscUNBQ3FCcUgsTUFBTWtCLE9BRDNCLEVBRWJqTixLQUFLRixJQUZRLEVBR2JFLEtBQUsyRCxVQUhRLEVBSWIzRCxLQUFLMkMsT0FKUSxFQUtiLElBTGEsQ0FBUCxDQUFQO0FBT0EsVUFSRCxNQVFPO0FBQ051SyxxQkFBV2YsWUFBWCxFQUF5QlosUUFBUVUsaUJBQWpDO0FBQ0E7QUFDRCxTQXBERCxFQW9ER2tCLEtBcERILENBb0RTekosTUFwRFQ7QUFxREEsUUF4REQ7O0FBMERBeUk7QUFDQSxPQTVERCxNQTRETztBQUNOLGNBQU8xSSxRQUFRc0ksS0FBUixDQUFQO0FBQ0E7QUFDRCxNQXpFRCxFQXlFR29CLEtBekVILENBeUVTekosTUF6RVQ7QUEwRUEsS0EzRU0sQ0FBUDtBQTRFQTs7QUFFRDs7Ozs7QUEzR0E7Ozs7Ozs7OzZCQThHaUI2SSxPLEVBQWlCNU0sTyxFQUE2QztBQUM5RSxXQUFPLHVCQUFRO0FBQ2RDLGFBQVEsS0FETTtBQUVkQyw0QkFBcUIwTSxPQUZQO0FBR2R6TSxXQUFNSDtBQUhRLEtBQVIsRUFJSkksSUFKSSxDQUlDO0FBQUEsWUFBTWtGLFNBQU47QUFBQSxLQUpELENBQVA7QUFLQTs7Ozs7O0FBakltQi9GLE0sQ0FPYmtPLEssR0FBUTtBQUNkQyxVQUFRLFFBRE07QUFFZEMsU0FBTyxPQUZPO0FBR2RDLFFBQU07QUFIUSxFO0FBUEtyTyxNLENBa0Jic08sSyxHQUFRO0FBQ2RDLE9BQUssS0FEUztBQUVkQyxRQUFNO0FBRlEsRTttQkFsQkt4TyxLOzs7Ozs7Ozs7Ozs7Ozs7QUNUckI7Ozs7Ozs7O0FBR0E7Ozs7S0FJcUJDLFU7Ozs7Ozs7O0FBQ3BCOzs7NENBR2lFO0FBQ2hFLFdBQU8sdUJBQVE7QUFDZFUsZUFBVTtBQURJLEtBQVIsRUFFSkUsSUFGSSxDQUVDO0FBQUEsWUFBUUMsS0FBS0YsSUFBTCxDQUFVNk4sZ0JBQWxCO0FBQUEsS0FGRCxDQUFQO0FBR0E7Ozs7OzttQkFSbUJ4TyxVOzs7Ozs7Ozs7Ozs7Ozs7OztBQ05yQjs7OztBQUNBOztBQUNBOzs7Ozs7OztBQUtBOzs7Ozs7QUFIQTtLQU9xQkUsTzs7Ozs7Ozs7O0FBd0RwQjs7Ozs7Ozs7QUF6Q0E7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBK0NzQnVPLE0sRUFBZ0JDLEksRUFBY0MsVyxFQUE0QjtBQUMvRSxRQUFNakgsU0FBU3hILFFBQVEwTyxhQUFSLENBQXNCSCxNQUF0QixFQUE4QkMsSUFBOUIsRUFBb0NDLFdBQXBDLENBQWY7O0FBRUEsUUFBTS9FLE1BQU1sSyxlQUFPa0UsR0FBUCxDQUFXdkUsY0FBTW1HLE9BQWpCLElBQTRCLGNBQXhDOztBQUVBLFFBQU1xSixPQUFPckYsU0FBU3NGLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBYjtBQUNBRCxTQUFLRSxZQUFMLENBQWtCLFFBQWxCLEVBQTRCLFFBQTVCO0FBQ0FGLFNBQUtFLFlBQUwsQ0FBa0IsUUFBbEIsRUFBNEIsTUFBNUI7QUFDQUYsU0FBS0UsWUFBTCxDQUFrQixRQUFsQixFQUE0Qm5GLEdBQTVCOztBQUVBLFNBQUssSUFBTWpDLEtBQVgsSUFBb0JELE1BQXBCLEVBQTRCO0FBQzNCLFNBQU1zSCxRQUFReEYsU0FBU3NGLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUNBRSxXQUFNRCxZQUFOLENBQW1CLE1BQW5CLEVBQTJCcEgsS0FBM0I7QUFDQXFILFdBQU1ELFlBQU4sQ0FBbUIsT0FBbkIsRUFBNEJySCxPQUFPQyxLQUFQLENBQTVCO0FBQ0FxSCxXQUFNRCxZQUFOLENBQW1CLE1BQW5CLEVBQTJCLFFBQTNCO0FBQ0FGLFVBQUtJLFdBQUwsQ0FBaUJELEtBQWpCO0FBQ0E7O0FBRUR4RixhQUFTN0ksSUFBVCxDQUFjc08sV0FBZCxDQUEwQkosSUFBMUI7QUFDQUEsU0FBS0ssTUFBTDtBQUNBTCxTQUFLTSxVQUFMLENBQWdCQyxXQUFoQixDQUE0QlAsSUFBNUI7QUFDQTs7QUFFRDs7Ozs7O0FBcEZBOzs7Ozs7Ozs7OzZCQXlGaUJILEksRUFBY0MsVyxFQUFvQztBQUNsRSxXQUFPLHVCQUFRO0FBQ2RsTyxhQUFRLE1BRE07QUFFZHdDLFdBQU01RCxjQUFNbUcsT0FGRTtBQUdkOUUsZUFBVSxjQUhJO0FBSWRDLFdBQU1ULFFBQVEwTyxhQUFSLENBQXNCMU8sUUFBUW1QLGNBQVIsQ0FBdUJ4TCxJQUE3QyxFQUFtRDZLLElBQW5ELEVBQXlEQyxXQUF6RCxDQUpRO0FBS2R4TCxvQkFBZSxLQUxEO0FBTWRDLGlCQUFZLEtBTkU7QUFPZEosa0JBQWE7QUFDWixzQkFBZ0I7QUFESjtBQVBDLEtBQVIsRUFVSnBDLElBVkksQ0FVQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQVZELENBQVA7QUFXQTs7QUFFRDs7Ozs7OzZCQUlDRyxTLEVBQ0F3TyxVLEVBQ0FDLFMsRUFDQUMsTyxFQUM2QjtBQUM3QixXQUFPLHVCQUFRO0FBQ2Q5Tyw4QkFBdUJJLFNBQXZCLFNBQW9Dd08sVUFBcEMsY0FBdURDLFNBQXZELFlBQXVFQztBQUR6RCxLQUFSLEVBRUo1TyxJQUZJLENBRUM7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FGRCxDQUFQO0FBR0E7O0FBRUQ7Ozs7Ozs4QkFHa0JHLFMsRUFBbUIyTyxPLEVBQWtDO0FBQ3RFLFdBQU8sdUJBQVE7QUFDZC9PLHFCQUFjUixRQUFRd1AsWUFBUixDQUFxQkMsVUFBbkMsU0FBaUQ3TyxTQUFqRCxTQUE4RDJPO0FBRGhELEtBQVIsRUFFSjdPLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQUwsQ0FBVWlKLEdBQWxCO0FBQUEsS0FGRCxDQUFQO0FBR0E7O0FBRUQ7Ozs7Ozs0Q0FHZ0NnRyxRLEVBQXdCO0FBQ3ZEMVAsWUFBUTJQLGNBQVIsQ0FBdUJELFFBQXZCLEVBQWlDMVAsUUFBUXdQLFlBQVIsQ0FBcUJJLFVBQXRELEVBQWtFO0FBQ2pFQyxtQkFBYztBQURtRCxLQUFsRTtBQUdBOztBQUVEOzs7Ozs7NkNBR2lDSCxRLEVBQWtCSSxXLEVBQXFCQyxJLEVBQWtCO0FBQ3pGL1AsWUFBUTJQLGNBQVIsQ0FBdUJELFFBQXZCLEVBQWlDMVAsUUFBUXdQLFlBQVIsQ0FBcUJRLGtCQUF0RCxFQUEwRTtBQUN6RUYsNkJBRHlFO0FBRXpFRyxXQUFNRixLQUFLckUsV0FBTDtBQUZtRSxLQUExRTtBQUlBOztBQUVEOzs7Ozs7d0NBRzRCb0UsVyxFQUFxQkMsSSxFQUE4QztBQUM5RixXQUFPL1AsUUFBUWtRLFNBQVIsQ0FBa0JsUSxRQUFRd1AsWUFBUixDQUFxQlEsa0JBQXZDLEVBQTJEO0FBQ2pFRiw2QkFEaUU7QUFFakVHLFdBQU1GLEtBQUtyRSxXQUFMO0FBRjJELEtBQTNELENBQVA7QUFJQTs7QUFFRDs7Ozs7O3VDQUcyQmdFLFEsRUFBa0JTLE8sRUFBdUI7QUFDbkVuUSxZQUFRMlAsY0FBUixDQUF1QkQsUUFBdkIsRUFBaUMxUCxRQUFRd1AsWUFBUixDQUFxQlksWUFBdEQsRUFBb0U7QUFDbkVELGNBQVNBLFFBQVFwUCxXQUFSO0FBRDBELEtBQXBFO0FBR0E7O0FBRUQ7Ozs7OztrQ0FHc0JvUCxPLEVBQStDO0FBQ3BFLFdBQU9uUSxRQUFRa1EsU0FBUixDQUFrQmxRLFFBQVF3UCxZQUFSLENBQXFCWSxZQUF2QyxFQUFxRDtBQUMzREQsY0FBU0EsUUFBUXBQLFdBQVI7QUFEa0QsS0FBckQsQ0FBUDtBQUdBOztBQUVEOzs7Ozs7b0NBR3dCZ1AsSSxFQUErQjtBQUN0RCxXQUFPLHVCQUFRO0FBQ2R2UCxxQkFBY1IsUUFBUXdQLFlBQVIsQ0FBcUJhLGFBQW5DLGNBQXlETjtBQUQzQyxLQUFSLEVBRUpyUCxJQUZJLENBRUM7QUFBQSxZQUFRQyxLQUFLRixJQUFMLENBQVVpSixHQUFsQjtBQUFBLEtBRkQsQ0FBUDtBQUdBOzs7Ozs7QUFyTG1CMUosUSxDQVFibVAsYyxHQUFpQjtBQUN2Qm1CLE9BQUssS0FEa0I7QUFFdkJDLE9BQUssS0FGa0I7QUFHdkI1TSxRQUFNLE1BSGlCO0FBSXZCNk0sUUFBTTtBQUppQixFO0FBUkp4USxRLENBK0Jid1AsWSxHQUFlO0FBQ3JCSSxjQUFZLGtCQURTO0FBRXJCSSxzQkFBb0IsbUJBRkM7QUFHckJJLGdCQUFjLGFBSE87QUFJckJLLGtCQUFnQixpQkFKSztBQUtyQkMsZUFBYSxnQkFMUTtBQU1yQkMsd0JBQXNCLHNCQU5EO0FBT3JCQyxhQUFXLGdCQVBVO0FBUXJCQyxpQkFBZSxZQVJNO0FBU3JCQyxxQkFBbUIsU0FURTtBQVVyQkMsY0FBWSxhQVZTO0FBV3JCVixpQkFBZSxxQkFYTTtBQVlyQlosY0FBWSxZQVpTO0FBYXJCdUIsWUFBVTtBQWJXLEU7O0FBL0JGaFIsUSxDQStDYjBPLGEsR0FBZ0IsVUFBQ0gsTUFBRCxFQUFpQkMsSUFBakIsRUFBK0JDLFdBQS9CO0FBQUE7QUFDdEJ3QyxpQkFBYzFDLE1BRFE7QUFFdEIyQyxlQUFZMUMsSUFGVTtBQUd0QjNMLGVBQVlwRCxtQkFBUzZCLEdBQVQsRUFIVTtBQUl0QjZQLFVBQU8sSUFKZTtBQUt0QkMsZUFBWTtBQUxVLEtBTW5CM0MsV0FObUI7QUFBQSxFOzttQkEvQ0h6TyxPOzs7Ozs7Ozs7Ozs7Ozs7QUNWckI7Ozs7Ozs7O0FBRUE7Ozs7S0FJcUJDLGE7Ozs7Ozs7OztBQU1wQjs7OzJCQUlDc00sUyxFQUNBOEUsTSxFQUNBcFEsSSxFQUNBaUwsTyxFQUMyQjtBQUMzQixRQUFJMUwseUJBQXVCK0wsVUFBVStFLFdBQVYsRUFBdkIsZ0JBQXlERCxPQUFPdFEsV0FBUCxFQUE3RDs7QUFFQSxRQUFJRSxJQUFKLEVBQVU7QUFDVFQsNEJBQ0MsQ0FBQyxPQUFPUyxJQUFQLEtBQWdCLFFBQWhCLEdBQ0VBLElBREYsR0FFRUEsS0FBS2tELElBQUwsQ0FBVSxHQUFWLENBRkgsRUFHRXBELFdBSEYsRUFERDtBQU1BOztBQUVELFFBQUltTCxPQUFKLEVBQWE7QUFDWixTQUFJQSxRQUFRSyxTQUFSLElBQXFCTCxRQUFRTSxNQUE3QixJQUF1Q04sUUFBUUcsS0FBbkQsRUFBMEQ7QUFDekQ3TCw4QkFBc0IwTCxRQUFRRyxLQUE5QixnQkFBOENILFFBQVFNLE1BQXRELG1CQUEwRU4sUUFBUUssU0FBbEY7QUFDQSxNQUZELE1BRU8sSUFBSUwsUUFBUUcsS0FBWixFQUFtQjtBQUN6QjdMLDhCQUFzQjBMLFFBQVFHLEtBQTlCO0FBQ0E7QUFDRDs7QUFFRCxXQUFPLHVCQUFRLEVBQUU3TCxrQkFBRixFQUFSLEVBQXNCRSxJQUF0QixDQUEyQjtBQUFBLFlBQVM7QUFDMUNDLFlBQU1BLEtBQUtGO0FBRCtCLE1BQVQ7QUFBQSxLQUEzQixDQUFQO0FBR0E7O0FBRUQ7Ozs7Ozt1QkFHV3NCLEUsRUFBWXdLLFMsRUFBa0Q7QUFDeEU7OztBQUdBLFdBQU8sdUJBQVE7QUFDZC9MLDZCQUFzQitMLFNBQXRCLFNBQW1DeEs7QUFEckIsS0FBUixFQUVKckIsSUFGSSxDQUVDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBRkQsQ0FBUDtBQUdBOztBQUVEOzs7Ozs7d0JBR1lzQixFLEVBQVl6QixPLEVBQWlCaU0sUyxFQUFtQjtBQUMzRCxXQUFPLHVCQUFRO0FBQ2RoTSxhQUFRLE9BRE07QUFFZEMsNkJBQXNCK0wsU0FBdEIsU0FBbUN4SyxFQUZyQjtBQUdkdEIsV0FBTUg7QUFIUSxLQUFSLEVBSUpJLElBSkksQ0FJQztBQUFBLFlBQU1rRixTQUFOO0FBQUEsS0FKRCxDQUFQO0FBS0E7O0FBRUQ7Ozs7OzsrQkFJQzJHLFMsRUFDQThFLE0sRUFDQXBRLEksRUFDa0I7QUFDbEIsUUFBTVQseUJBQXVCK0wsVUFBVStFLFdBQVYsRUFBdkIsU0FBa0RyUSxJQUFsRCx5QkFBMEVvUSxNQUFoRjs7QUFFQSxXQUFPLHVCQUFRO0FBQ2Q3USx1QkFEYztBQUVkc0Msa0JBQWE7QUFDWlMsY0FBUTtBQURJO0FBRkMsS0FBUixFQUtKN0MsSUFMSSxDQUtDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBTEQsQ0FBUDtBQU1BOzs7K0NBRWtDSixNLEVBQWdCO0FBQ2xELFFBQU1HLHVCQUFxQkgsTUFBckIsd0JBQU47QUFDQSxXQUFPLHVCQUFRLEVBQUVHLGtCQUFGLEVBQVIsRUFBc0JFLElBQXRCLENBQTJCO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBQTNCLENBQVA7QUFDQTs7O3FDQUV3QjhRLFMsRUFBbUI7QUFDM0MsUUFBTS9RLDRDQUEwQytRLFNBQWhEO0FBQ0EsV0FBTyx1QkFBUSxFQUFFL1Esa0JBQUYsRUFBUixFQUFzQkUsSUFBdEIsQ0FBMkI7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FBM0IsQ0FBUDtBQUNBOzs7MENBRTZCOFEsUyxFQUFtQjlRLEksRUFBaUI7QUFDakUsUUFBTUQsNENBQTBDK1EsU0FBaEQ7QUFDQSxXQUFPLHVCQUFRO0FBQ2RoUixhQUFRLE9BRE07QUFFZEMsdUJBRmM7QUFHZEM7QUFIYyxLQUFSLEVBSUpDLElBSkksQ0FJQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUpELENBQVA7QUFLQTs7OzBDQUU2QjhRLFMsRUFBbUI7QUFDaEQsUUFBTS9RLDRDQUEwQytRLFNBQWhEO0FBQ0EsV0FBTyx1QkFBUTtBQUNkaFIsYUFBUSxRQURNO0FBRWRDO0FBRmMsS0FBUixFQUdKRSxJQUhJLENBR0M7QUFBQSxZQUFRQyxJQUFSO0FBQUEsS0FIRCxDQUFQO0FBSUE7Ozs7OztBQXpHbUJWLGMsQ0FDYnVSLFUsR0FBYTtBQUNuQkMsWUFBVSxVQURTO0FBRW5CQyxlQUFhLGFBRk0sRTttQkFEQXpSLGE7Ozs7Ozs7Ozs7Ozs7OztBQ1JyQjs7Ozs7Ozs7QUFRQTs7Ozs7S0FLcUJDLEs7Ozs7Ozs7O0FBQ3BCOzs7NENBRzJEO0FBQzFELFdBQU8sdUJBQVE7QUFDZE07QUFEYyxLQUFSLEVBRUpFLElBRkksQ0FFQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUZELENBQVA7QUFHQTs7Ozs7QUFFRDs7O3VDQUdpRDtBQUNoRCxXQUFPLHVCQUFRO0FBQ2REO0FBRGMsS0FBUixFQUVKRSxJQUZJLENBRUM7QUFBQSxZQUFRQyxLQUFLRixJQUFiO0FBQUEsS0FGRCxDQUFQO0FBR0E7Ozs7O0FBRUQ7Ozt5Q0FJQ2tSLE0sRUFDQUMsVyxFQUNBQyxhLEVBQ0FDLEksRUFDcUI7QUFDckIsUUFBTXJSLE9BQU87QUFDWmtSLG1CQURZO0FBRVpDLDZCQUZZO0FBR1pDLGlDQUhZO0FBSVpDO0FBSlksS0FBYjtBQU1BLFdBQU8sdUJBQVE7QUFDZHZSLGFBQVEsTUFETTtBQUVkQyxvQ0FGYztBQUdkQztBQUhjLEtBQVIsRUFJSkMsSUFKSSxDQUlDO0FBQUEsWUFBUUMsS0FBS0YsSUFBYjtBQUFBLEtBSkQsQ0FBUDtBQUtBOzs7OztBQUVEOzs7NEJBSUNzQixFLEVBQ0ErUCxJLEVBQzBCO0FBQzFCLFFBQU1yUixPQUFPcVIsSUFBYjtBQUNBLFdBQU8sdUJBQVM7QUFDZnZSLGFBQVEsT0FETztBQUVmQyx3Q0FBaUN1QixFQUZsQjtBQUdmdEI7QUFIZSxLQUFULEVBSUpDLElBSkksQ0FJQztBQUFBLFlBQVFDLEtBQUtGLElBQWI7QUFBQSxLQUpELENBQVA7QUFLQTs7Ozs7O21CQXREbUJQLEs7QUF1RHBCOzs7Ozs7Ozs7Ozs7Ozs7OztBQ3BFRDs7Ozs7Ozs7QUFHQTs7OztLQUlxQjZSLE87Ozs7Ozs7O0FBQ3BCOzs7dUNBR3dCMVIsTSxFQUFnQjJSLGMsRUFBZ0M7QUFDakUsaUJBQU12UjtBQUNGSjtBQURFLGdCQUVDMlIsY0FGRCxDQUFOO0FBSUEsb0JBQU8sdUJBQVE7QUFDWHpSLHlCQUFRLE1BREc7QUFFWEUsMkJBRlc7QUFHWEQsMkJBQVU7QUFIQyxjQUFSLEVBSUpFLElBSkksQ0FJQztBQUFBLHdCQUFRQyxLQUFLRixJQUFiO0FBQUEsY0FKRCxDQUFQO0FBS0g7O0FBRUQ7Ozs7Ozt1Q0FJcUJ3UixTLEVBQW1CRCxjLEVBQTZCO0FBQ2pFLG9CQUFPLHVCQUFRO0FBQ1h6Uix5QkFBUSxPQURHO0FBRVhFLHVCQUFNdVIsY0FGSztBQUdYeFIsa0RBQStCeVI7QUFIcEIsY0FBUixFQUlKdlIsSUFKSSxDQUlDO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUpELENBQVA7QUFLSDs7QUFFRDs7Ozs7O3dDQUlzQndSLFMsRUFBbUI7QUFDckMsb0JBQU8sdUJBQVEsRUFBRXpSLGlDQUErQnlSLFNBQWpDLEVBQVIsRUFBd0R2UixJQUF4RCxDQUE2RDtBQUFBLHdCQUFRQyxLQUFLRixJQUFiO0FBQUEsY0FBN0QsQ0FBUDtBQUNIOztBQUVEOzs7Ozs7K0NBSTZCSixNLEVBQWdCO0FBQ3pDLG9CQUFPLHVCQUFRLEVBQUVHLHNCQUFvQkgsTUFBcEIsc0JBQUYsRUFBUixFQUEyREssSUFBM0QsQ0FBZ0U7QUFBQSx3QkFBUUMsS0FBS0YsSUFBYjtBQUFBLGNBQWhFLENBQVA7QUFDSDs7QUFFRDs7Ozs7OzJDQUl5QnlSLFEsRUFBZ0JDLE0sRUFBYztBQUNuRCxvQkFBTyx1QkFBUSxFQUFFM1IseUNBQXVDMFIsU0FBU3hHLFdBQVQsRUFBdkMsWUFBb0V5RyxPQUFPekcsV0FBUCxFQUF0RSxFQUFSLEVBQXdHaEwsSUFBeEcsQ0FBNkc7QUFBQSx3QkFBUUMsS0FBS0YsSUFBYjtBQUFBLGNBQTdHLENBQVA7QUFDSDs7QUFFRDs7Ozs7OytDQUk2QkosTSxFQUFnQjtBQUN6QyxvQkFBTyx1QkFBUSxFQUFFRyxzQkFBb0JILE1BQXBCLHlCQUFGLEVBQVIsRUFBOERLLElBQTlELENBQW1FO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUFuRSxDQUFQO0FBQ0g7O0FBRUQ7Ozs7OzsyQ0FJeUIyUixZLEVBQXNCO0FBQzNDLG9CQUFPLHVCQUFRLEVBQUU1UixvQ0FBa0M0UixZQUFwQyxFQUFSLEVBQThEMVIsSUFBOUQsQ0FBbUU7QUFBQSx3QkFBUUMsS0FBS0YsSUFBYjtBQUFBLGNBQW5FLENBQVA7QUFDSDs7Ozs7QUFFRDs7OzswQ0FJd0I0UixVLEVBQTRCO0FBQ2hELG9CQUFPLHVCQUFRO0FBQ1g3UixpREFEVztBQUVYRCx5QkFBUSxNQUZHO0FBR1hFLHVCQUFNNFI7QUFISyxjQUFSLEVBSUozUixJQUpJLENBSUM7QUFBQSx3QkFBUUMsS0FBS0YsSUFBYjtBQUFBLGNBSkQsQ0FBUDtBQUtIOztBQUVEOzs7Ozs7NkNBSTJCeVIsUSxFQUFnQkMsTSxFQUFjO0FBQ3JELG9CQUFPLHVCQUFRO0FBQ1gzUixxREFBa0MwUixTQUFTeEcsV0FBVCxFQUFsQyxZQUErRHlHLE9BQU96RyxXQUFQO0FBRHBELGNBQVIsRUFFSmhMLElBRkksQ0FFQztBQUFBLHdCQUFRQyxLQUFLRixJQUFiO0FBQUEsY0FGRCxDQUFQO0FBR0g7Ozs7O0FBRUQ7Ozs7NkNBSTJCSixNLEVBQWdCNlIsUSxFQUFnQkMsTSxFQUFjO0FBQ3JFLG9CQUFPLHVCQUFRO0FBQ1gzUix1Q0FBb0JILE1BQXBCLDZCQUFrRDZSLFNBQVN4RyxXQUFULEVBQWxELFlBQStFeUcsT0FBT3pHLFdBQVA7QUFEcEUsY0FBUixFQUVKaEwsSUFGSSxDQUVDO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUZELENBQVA7QUFHSDs7QUFFRDs7Ozs7OzhDQUk0QkosTSxFQUFnQjtBQUN4QyxvQkFBTyx1QkFBUSxFQUFFRyxzQkFBb0JILE1BQXBCLHdCQUFGLEVBQVIsRUFBNkRLLElBQTdELENBQWtFO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUFsRSxDQUFQO0FBQ0g7Ozs7O0FBRUQ7Ozs7MENBSXdCNlIsVyxFQUFxQjtBQUN6QyxvQkFBTyx1QkFBUSxFQUFFOVIsbUNBQWlDOFIsV0FBbkMsRUFBUixFQUE0RDVSLElBQTVELENBQWlFO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUFqRSxDQUFQO0FBQ0g7Ozs7O0FBRUQ7Ozs7eUNBSXVCOFIsUyxFQUFzQjtBQUN6QyxvQkFBTyx1QkFBUTtBQUNYL1IsZ0RBRFc7QUFFWEQseUJBQVEsTUFGRztBQUdYRSx1QkFBTThSO0FBSEssY0FBUixFQUlKN1IsSUFKSSxDQUlDO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUpELENBQVA7QUFLSDs7Ozs7QUFFRDs7Ozt5Q0FJdUI4UixTLEVBQXNCRCxXLEVBQXFCO0FBQzlELG9CQUFPLHVCQUFRO0FBQ1g5UixvREFBaUM4UixXQUR0QjtBQUVYN1IsdUJBQU04UixTQUZLO0FBR1hoUyx5QkFBUTtBQUhHLGNBQVIsRUFJSkcsSUFKSSxDQUlDO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUpELENBQVA7QUFLSDs7QUFFRDs7Ozs7O3lDQUl1QkosTSxFQUFnQjtBQUNuQyxvQkFBTyx1QkFBUTtBQUNYRyx1Q0FBb0JILE1BQXBCO0FBRFcsY0FBUixFQUVKSyxJQUZJLENBRUM7QUFBQSx3QkFBUUMsS0FBS0YsSUFBYjtBQUFBLGNBRkQsQ0FBUDtBQUdIOztBQUVEOzs7Ozs7d0NBSXNCK1IsTSxFQUFnQjtBQUNsQyxvQkFBTyx1QkFBUTtBQUNYaFMsK0NBQTRCZ1M7QUFEakIsY0FBUixFQUVKOVIsSUFGSSxDQUVDO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUZELENBQVA7QUFHSDs7QUFFRDs7Ozs7O29DQUlrQmdTLEksRUFBWTtBQUMxQixvQkFBTyx1QkFBUTtBQUNYaFMsdUJBQU1nUyxJQURLO0FBRVhqUywyQkFBVSxnQkFGQztBQUdYRCx5QkFBUTtBQUhHLGNBQVIsRUFJSkcsSUFKSSxDQUlDO0FBQUEsd0JBQVFDLEtBQUtGLElBQWI7QUFBQSxjQUpELENBQVA7QUFLSDs7QUFFRDs7Ozs7O29DQUlrQmdTLEksRUFBWUQsTSxFQUFnQjtBQUMxQyxvQkFBTyx1QkFBUTtBQUNYL1IsdUJBQU1nUyxJQURLO0FBRVhqUywrQ0FBNEJnUyxNQUZqQjtBQUdYalMseUJBQVE7QUFIRyxjQUFSLEVBSUpHLElBSkksQ0FJQztBQUFBLHdCQUFRQyxLQUFLRixJQUFiO0FBQUEsY0FKRCxDQUFQO0FBS0g7Ozs7OzttQkF0TGdCc1IsTyIsImZpbGUiOiJkcml2ZXdlYWx0aC1iYWNrLW9mZmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGJlZTY5ZThiYjY2NTg3NDZkYzBlIiwiLy8gQGZsb3dcbmltcG9ydCBBY2NvdW50IGZyb20gXCIuL21vZHVsZXMvQWNjb3VudFwiO1xuaW1wb3J0IEF1dGggZnJvbSBcIi4vbW9kdWxlcy9BdXRoXCI7XG5pbXBvcnQgU2Vzc2lvbnMgZnJvbSBcIi4vaW50ZXJuYWwvU2Vzc2lvbnNcIjtcbmltcG9ydCBVc2VyIGZyb20gXCIuL21vZHVsZXMvVXNlclwiO1xuaW1wb3J0IEluc3RydW1lbnQgZnJvbSBcIi4vbW9kdWxlcy9JbnN0cnVtZW50XCI7XG5pbXBvcnQgVHJhbnNhY3Rpb24gZnJvbSBcIi4vbW9kdWxlcy9UcmFuc2FjdGlvblwiO1xuaW1wb3J0IE9yZGVyIGZyb20gXCIuL21vZHVsZXMvT3JkZXJcIjtcbmltcG9ydCBDb21taXNzaW9uIGZyb20gXCIuL21vZHVsZXMvQ29tbWlzc2lvblwiO1xuaW1wb3J0IERvY3VtZW50IGZyb20gXCIuL21vZHVsZXMvRG9jdW1lbnRcIjtcbmltcG9ydCBSZXBvcnRzIGZyb20gXCIuL21vZHVsZXMvUmVwb3J0c1wiO1xuaW1wb3J0IFZpb2xhdGlvbiBmcm9tIFwiLi9tb2R1bGVzL1Zpb2xhdGlvblwiO1xuaW1wb3J0IE1vbmV5TW92ZW1lbnQgZnJvbSBcIi4vbW9kdWxlcy9Nb25leU1vdmVtZW50XCI7XG5pbXBvcnQgUm9sZXMgZnJvbSBcIi4vbW9kdWxlcy9Sb2xlc1wiO1xuaW1wb3J0IHsgQ29uZmlnLCBzZXR1cCwgRU5WSVJPTk1FTlRTLCBIT1NUUyB9IGZyb20gXCIuL21vZHVsZXMvQ29uZmlnXCI7XG5pbXBvcnQgcmVxdWVzdCBmcm9tIFwiLi9tb2R1bGVzL3JlcXVlc3RcIjtcbmltcG9ydCBBZHZpc29ycyBmcm9tIFwiLi9tb2R1bGVzL0Fkdmlzb3JzXCI7XG5cbmV4cG9ydCB7XG5cdEVOVklST05NRU5UUyxcblx0SE9TVFMsXG5cblx0QWNjb3VudCxcblx0QWR2aXNvcnMsXG5cdFZpb2xhdGlvbixcblx0QXV0aCxcblx0Q29uZmlnLFxuXHRTZXNzaW9ucyxcblx0VXNlcixcblx0SW5zdHJ1bWVudCxcblx0VHJhbnNhY3Rpb24sXG5cdE9yZGVyLFxuXHRDb21taXNzaW9uLFxuXHREb2N1bWVudCxcblx0UmVwb3J0cyxcblx0TW9uZXlNb3ZlbWVudCxcblx0Um9sZXMsXG5cblx0c2V0dXAsXG5cdHJlcXVlc3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdEVOVklST05NRU5UUyxcblx0SE9TVFMsXG5cblx0QWNjb3VudCxcblx0QWR2aXNvcnMsXG5cdFZpb2xhdGlvbixcblx0QXV0aCxcblx0Q29uZmlnLFxuXHRTZXNzaW9ucyxcblx0VXNlcixcblx0SW5zdHJ1bWVudCxcblx0VHJhbnNhY3Rpb24sXG5cdE9yZGVyLFxuXHRDb21taXNzaW9uLFxuXHREb2N1bWVudCxcblx0UmVwb3J0cyxcblx0TW9uZXlNb3ZlbWVudCxcblx0Um9sZXMsXG5cblx0c2V0dXAsXG5cdHJlcXVlc3QsXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIiwiLy8gQGZsb3dcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcbmltcG9ydCBWaW9sYXRpb24gZnJvbSBcIi4vVmlvbGF0aW9uXCI7XG5pbXBvcnQgdHlwZSB7XG5cdEFjY291bnREZXRhaWxzLFxuXHRCbG90dGVyLFxuXHRBY2NvdW50VHJhbnNmZXJEZXRhaWxzLFxuXHRBY2NvdW50VHJhbnNmZXJSZXNwb25zZSxcbn0gZnJvbSBcIi4uL3R5cGVzL0FjY291bnRcIjtcbmltcG9ydCB0eXBlIHsgVmlvbGF0aW9uQ3JlYXRlRGV0YWlscyB9IGZyb20gXCIuLi90eXBlcy9WaW9sYXRpb25cIjtcblxuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb24gQWNjb3VudHMgYXJlIGFzc2lnbmVkIHRvIGEgdXNlciBhbmQgYSB1c2VyIGNhbiBoYXZlIG1hbnkgYWNjb3VudHMuIFRoZXJlIGFyZSBhXG4gKiBmZXcgYXR0cmlidXRlcyB0aGF0IGRlZmluZSB0aGUgYWNjb3VudCwgaG93IGFuZCB3aGVuIGl0IGNhbiB0cmFkZSBhbmQgd2hvIGlzIHRyYWRpbmcgaXQuXG4gKiBAZXhhbXBsZSBpbXBvcnQgeyBBY2NvdW50IH0gZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWNjb3VudCB7XG5cdC8qKlxuXHQgKiBAY29uc3RhbnRcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IENBU0hcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IE9SREVSU1xuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gVFJBTlNBQ1RJT05TXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBFUVVJVFlcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFZJT0xBVElPTlNcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IEFMTFxuXHQgKi9cblx0c3RhdGljIEJMT1RURVJfVFlQRVMgPSB7XG5cdFx0Q0FTSDogXCJjYXNoXCIsXG5cdFx0T1JERVJTOiBcIm9yZGVyc1wiLFxuXHRcdFRSQU5TQUNUSU9OUzogXCJ0cmFuc2FjdGlvbnNcIixcblx0XHRFUVVJVFk6IFwiZXF1aXR5XCIsXG5cdFx0VklPTEFUSU9OUzogXCJ2aW9sYXRpb25zXCIsXG5cdFx0QUxMOiBudWxsLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBuZXcgYWNjb3VudCB0aWVkIHRvIGEgdXNlci5cblx0ICovXG5cdHN0YXRpYyBjcmVhdGUodXNlcklEOiBzdHJpbmcsIGRldGFpbHM6IHtcblx0XHRhY2NvdW50VHlwZTogc3RyaW5nLFxuXHRcdGFjY291bnRNYW5hZ2VtZW50VHlwZTogc3RyaW5nLFxuXHRcdHRyYWRpbmdUeXBlOiBzdHJpbmcsXG5cdFx0cmlhSUQ/OiBzdHJpbmcsXG5cdFx0cmlhUHJvZHVjdElEPzogc3RyaW5nLFxuXHRcdGF1dGhvcml6ZWRVc2Vycz86IEFycmF5PHtcblx0XHRcdHVzZXJJRDogc3RyaW5nLFxuXHRcdFx0cGVybWlzc2lvbnM6IEFycmF5PHN0cmluZz4sXG5cdFx0fT4sXG5cdFx0aWdub3JlQnV5aW5nUG93ZXI/OiBib29sZWFuLFxuXHRcdHZpb2xhdGlvbnNFeGVtcHQ/OiBib29sZWFuLFxuXHR9KTogUHJvbWlzZTxBY2NvdW50RGV0YWlscz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRlbmRwb2ludDogXCIvYWNjb3VudHNcIixcblx0XHRcdGJvZHk6IHtcblx0XHRcdFx0Li4uZGV0YWlscyxcblx0XHRcdFx0dXNlcklELFxuXHRcdFx0fSxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYWNjb3VudCBieSBhY2NvdW50SUQuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0KGFjY291bnRJRDogc3RyaW5nKTogUHJvbWlzZTxBY2NvdW50RGV0YWlscz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgL2FjY291bnRzLyR7YWNjb3VudElEfWAsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keS5hY2NvdW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYWNjb3VudCBieSBhY2NvdW50Tm8uXG5cdCAqL1xuXHRzdGF0aWMgZ2V0QnlBY2NvdW50Tm8oYWNjb3VudE5vOiBzdHJpbmcpOiBQcm9taXNlPHtcblx0XHRhY2NvdW50Tm86IHN0cmluZyxcblx0XHRhY2NvdW50SUQ6IHN0cmluZyxcblx0XHRlbWFpbEFkZHJlc3MxOiBzdHJpbmcsXG5cdFx0Zmlyc3ROYW1lOiBzdHJpbmcsXG5cdFx0bGFzdE5hbWU6IHN0cmluZyxcblx0XHR1c2VySUQ6IHN0cmluZyxcblx0XHR1c2VybmFtZTogc3RyaW5nLFxuXHRcdHVzZXJUeXBlOiBudW1iZXIsXG5cdH0+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRlbmRwb2ludDogYC9hY2NvdW50cy9zZWFyY2g/YWNjb3VudE5vPSR7YWNjb3VudE5vLnRvVXBwZXJDYXNlKCl9YCxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5LnJlc3VsdCk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGVkaXQoYWNjb3VudElEOiBzdHJpbmcsIGRldGFpbHM6ID9BY2NvdW50KTogUHJvbWlzZTxBY2NvdW50RGV0YWlscz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvYWNjb3VudHMvJHthY2NvdW50SUR9YCxcblx0XHRcdGJvZHk6IGRldGFpbHMsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IEFjY291bnQgU3VtbWFyeS4gT3B0aW9uYWxseSByZXRyaWV2ZSBzcGVjaWZpYyBkYXRhIHdpdGggYSBbQmxvdHRlciBUeXBlXSgjYmxvdHRlcnR5cGVzKS5cblx0ICovXG5cdHN0YXRpYyBnZXRCbG90dGVyKGFjY291bnRJRDogc3RyaW5nLCB0eXBlPzogc3RyaW5nKTogUHJvbWlzZTxCbG90dGVyPiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIkdFVFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvYWNjb3VudHMvJHthY2NvdW50SUR9L3N1bW1hcnlgLFxuXHRcdH0pLnRoZW4oKHsgYm9keTogeyBhY2NvdW50U3VtbWFyeSB9IH0pID0+IHR5cGUgPyBhY2NvdW50U3VtbWFyeVt0eXBlXSA6IGFjY291bnRTdW1tYXJ5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFuc2ZlciBwb3NpdGlvbnMgYW5kL29yIGNhc2ggZnJvbSBvbmUgYWNjb3VudCB0byBhbm90aGVyLlxuXHQgKi9cblx0c3RhdGljIHRyYW5zZmVyKGRldGFpbHM6IEFjY291bnRUcmFuc2ZlckRldGFpbHMpOiBQcm9taXNlPEFjY291bnRUcmFuc2ZlclJlc3BvbnNlPiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcdGVuZHBvaW50OiBcIi9hY2NvdW50cy90cmFuc2ZlclwiLFxuXHRcdFx0Ym9keToge1xuXHRcdFx0XHQuLi5kZXRhaWxzLFxuXHRcdFx0XHRhY2NvdW50RnJvbTogZGV0YWlscy5hY2NvdW50RnJvbS50b1VwcGVyQ2FzZSgpLFxuXHRcdFx0XHRhY2NvdW50VG86IGRldGFpbHMuYWNjb3VudFRvLnRvVXBwZXJDYXNlKCksXG5cdFx0XHR9LFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBjcmVhdGVWaW9sYXRpb24oYWNjb3VudElEOiBzdHJpbmcsIGRldGFpbHM6IFZpb2xhdGlvbkNyZWF0ZURldGFpbHMpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gVmlvbGF0aW9uLmNyZWF0ZShhY2NvdW50SUQsIGRldGFpbHMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBnZXRWaW9sYXRpb25zKGFjY291bnRJRDogc3RyaW5nKTogUHJvbWlzZTwqPiB7XG5cdFx0cmV0dXJuIFZpb2xhdGlvbi5nZXQoYWNjb3VudElEKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZGVsZXRlVmlvbGF0aW9uKGFjY291bnRJRDogc3RyaW5nLCB2aW9sYXRpb25JRDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIFZpb2xhdGlvbi5kZWxldGUoYWNjb3VudElELCB2aW9sYXRpb25JRCk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIHVwZGF0ZUNvbW1pc3Npb24oYWNjb3VudElEOiBzdHJpbmcsIGNvbW1pc3Npb25JRDogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0ZW5kcG9pbnQ6IGAvYWNjb3VudHMvJHthY2NvdW50SUR9L2NvbW1pc3Npb25zYCxcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRib2R5OiB7IGNvbW1pc3Npb25JRCB9LFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkuYWNjb3VudCk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldE1hcmdpbkNhbGxMaXN0KCk6IFByb21pc2U8QXJyYXk8T2JqZWN0Pj4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBcIi9hY2NvdW50cy9tYXJnaW4tY2FsbFwiLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBnZXRNYXJnaW5DYWxsQWNjb3VudFN1bW1hcmllcygpOiBQcm9taXNlPHtcblx0XHRhY2NvdW50czogQXJyYXk8QWNjb3VudERldGFpbHM+LFxuXHRcdHN1bW1hcmllczogQXJyYXk8QmxvdHRlcj4sXG5cdH0+IHtcblx0XHRyZXR1cm4gQWNjb3VudC5nZXRNYXJnaW5DYWxsTGlzdCgpLnRoZW4oXG5cdFx0XHRhY2NvdW50cyA9PiBQcm9taXNlLmFsbChhY2NvdW50cy5tYXAoKHsgaWQgfSkgPT4gQWNjb3VudC5nZXRCbG90dGVyKGlkKSkpXG5cdFx0XHRcdC50aGVuKHN1bW1hcmllcyA9PiAoeyBhY2NvdW50cywgc3VtbWFyaWVzIH0pKSxcblx0XHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBlZGl0UG9zaXRpb24oXG5cdFx0YWNjb3VudElEOiBzdHJpbmcsXG5cdFx0c3ltYm9sOiBzdHJpbmcsXG5cdFx0cXR5OiBudW1iZXIsXG5cdFx0cHJpY2U/OiBudW1iZXIsXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgL2FjY291bnRzLyR7YWNjb3VudElEfS9wb3NpdGlvbnNgLFxuXHRcdFx0bWV0aG9kOiBcIlBBVENIXCIsXG5cdFx0XHRib2R5OiB7XG5cdFx0XHRcdHN5bWJvbCxcblx0XHRcdFx0cXVhbnRpdHlBZGp1c3RtZW50OiBxdHksXG5cdFx0XHRcdHByaWNlLFxuXHRcdFx0fSxcblx0XHR9KS50aGVuKCgpID0+IHtcblx0XHR9KTtcblx0fVxuXG5cdC8vIEkga25vdyBPYmplY3QgaXMgdmVyeSBiYWQgdHlwZVxuXHRzdGF0aWMgZ2V0UG9ydGZvbGlvU3RhdHVzKGFjY291bnRJRDogc3RyaW5nKTogUHJvbWlzZTxPYmplY3Q+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRlbmRwb2ludDogYC9hY2NvdW50cy8ke2FjY291bnRJRH0vcG9ydGZvbGlvYCxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvQWNjb3VudC5qcyIsIi8vIEBmbG93XG5pbXBvcnQgeyBDb25maWcsIEhPU1RTIH0gZnJvbSBcIi4vQ29uZmlnXCI7XG5pbXBvcnQgeyBEcml2ZVdlYWx0aEVycm9yLCBEcml2ZVdlYWx0aFNlc3Npb25FcnJvciB9IGZyb20gXCIuL0Vycm9yXCI7XG5pbXBvcnQgU2Vzc2lvbnMgZnJvbSBcIi4uL2ludGVybmFsL1Nlc3Npb25zXCI7XG5cbi8qKlxuICogQGZ1bmN0aW9uIHJlcXVlc3RcbiAqIEBkZXNjcmlwdGlvbiBOb3JtYWxseSwgaXQgaXMgdW5uZWNlc3NhcnkgdG8gdXNlIHRoaXMgZnVuY3Rpb24gYW5kIHRoaXMgaXMgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICogIENhbGwgcmVxdWVzdCgpIGlmIHlvdSBuZWVkIHRvIG1ha2UgYSBjdXN0b20gQVBJIGNhbGwgdGhhdCBpcyBub3QgY292ZXJlZCBieSBhbm90aGVyIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLm1ldGhvZFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZW5kcG9pbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnNlc3Npb25LZXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmJvZHlcbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIHN0cmluZz59IG9wdGlvbnMuYWRkbEhlYWRlcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmhvc3QgLSBPbmUgb2YgQ29uZmlnLkhPU1RTXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48e2JvZHk6IHN0cmluZywgc3RhdHVzQ29kZTogbnVtYmVyLCBoZWFkZXJzOiBPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fT59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVlc3Qoe1xuXHRtZXRob2QgPSBcIkdFVFwiLFxuXHRlbmRwb2ludCxcblx0c2Vzc2lvbktleSxcblx0Ym9keSxcblx0YWRkbEhlYWRlcnMgPSB7fSxcblx0aG9zdCA9IEhPU1RTLkFQSSxcblx0YXV0aGVudGljYXRlZCA9IHRydWUsXG5cdHVzZXNBcHBLZXkgPSB0cnVlLFxufToge1xuXHRtZXRob2Q/OiBzdHJpbmcsXG5cdGVuZHBvaW50OiBzdHJpbmcsXG5cdHNlc3Npb25LZXk/OiBzdHJpbmcsXG5cdGJvZHk/OiBhbnksXG5cdGFkZGxIZWFkZXJzPzoge1toZWFkZXI6IHN0cmluZ106IHN0cmluZ30sXG5cdGhvc3Q/OiBzdHJpbmcsXG5cdGF1dGhlbnRpY2F0ZWQ/OiBib29sZWFuLFxuXHR1c2VzQXBwS2V5PzogYm9vbGVhbixcbn0pOiBQcm9taXNlPHtcblx0Ym9keTogKixcblx0c3RhdHVzQ29kZTogbnVtYmVyLFxuXHRoZWFkZXJzOiB7IFtoZWFkZXI6IHN0cmluZ106IHN0cmluZyB9LFxufT4ge1xuXHRpZiAoIUNvbmZpZy5odHRwSW1wbCkgdGhyb3cgbmV3IEVycm9yKFwiaHR0cEltcGwgaXMgbm90IHNldHVwIVwiKTtcblx0aWYgKCFzZXNzaW9uS2V5KSB7XG5cdFx0Y29uc3Qgc2F2ZWRTZXNzaW9uS2V5ID0gU2Vzc2lvbnMuZ2V0KCk7XG5cdFx0aWYgKHNhdmVkU2Vzc2lvbktleSkgc2Vzc2lvbktleSA9IHNhdmVkU2Vzc2lvbktleTtcblx0fVxuXG5cdGNvbnN0IGhlYWRlcnM6IHtbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmd9ID0ge1xuXHRcdEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG5cdH07XG5cdGlmICh1c2VzQXBwS2V5KSB7XG5cdFx0aGVhZGVyc1tcImR3LWNsaWVudC1hcHAta2V5XCJdID0gQ29uZmlnLmFwcEtleTtcblx0fVxuXHRpZiAobWV0aG9kID09PSBcIlBPU1RcIiB8fCBtZXRob2QgPT09IFwiUFVUXCIgfHwgbWV0aG9kID09PSBcIlBBVENIXCIpIHtcblx0XHRoZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi9qc29uXCI7XG5cdH1cblx0aWYgKHNlc3Npb25LZXkgJiYgYXV0aGVudGljYXRlZCkge1xuXHRcdGhlYWRlcnNbXCJkdy1hdXRoLXRva2VuXCJdID0gc2Vzc2lvbktleTtcblx0fVxuXHRmb3IgKGNvbnN0IGhlYWRlciBpbiBhZGRsSGVhZGVycykge1xuXHRcdGhlYWRlcnNbaGVhZGVyXSA9IGFkZGxIZWFkZXJzW2hlYWRlcl07XG5cdH1cblxuXHRlbmRwb2ludCA9IENvbmZpZy5lbnZbaG9zdF0gKyBlbmRwb2ludDtcblxuXHRpZiAoaGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIGJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcblxuXHRpZiAoYWRkbEhlYWRlcnMgJiYgYWRkbEhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0pIHtcblx0XHRpZiAoIWJvZHkpIHRocm93IG5ldyBFcnJvcihcIk5vIGJvZHkgcHJvdmlkZWQsIGJ1dCBjb250ZW50LXR5cGUgaGVhZGVyIHdhcyBzZXQuXCIpO1xuXHRcdGlmIChcblx0XHRcdGFkZGxIZWFkZXJzW1wiQ29udGVudC1UeXBlXCJdID09PSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiXG5cdFx0XHQmJiBib2R5IGluc3RhbmNlb2YgT2JqZWN0XG5cdFx0XHQmJiBib2R5LmNvbnN0cnVjdG9yID09PSBPYmplY3Rcblx0XHQpIHtcblx0XHRcdGNvbnN0IG1hcHBhYmxlT2JqOiBPYmplY3QgPSBib2R5O1xuXHRcdFx0Ym9keSA9IE9iamVjdC5rZXlzKG1hcHBhYmxlT2JqKS5tYXAoXG5cdFx0XHRcdGtleSA9PiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KG1hcHBhYmxlT2JqW2tleV0pLFxuXHRcdFx0KS5qb2luKFwiJlwiKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cblx0XHRDb25maWcuaHR0cEltcGwoXG5cdFx0XHRtZXRob2QsXG5cdFx0XHRlbmRwb2ludCxcblx0XHRcdGhlYWRlcnMsXG5cdFx0XHRib2R5LFxuXHRcdFx0KHN0YXR1c0NvZGUsIHJlc0hlYWRlcnMsIHJlc0JvZHkpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBhcnJvdy1ib2R5LXN0eWxlXG5cdFx0XHRcdGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzSGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSB8fCByZXNIZWFkZXJzW1wiY29udGVudC10eXBlXCJdIHx8IFwiXCI7XG5cdFx0XHRcdGlmIChyZXNCb2R5ICYmIGNvbnRlbnRUeXBlLmluZGV4T2YoXCJhcHBsaWNhdGlvbi9qc29uXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRyZXNCb2R5ID0gSlNPTi5wYXJzZShyZXNCb2R5KTtcblx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdC8vIHJlc0JvZHkgd2lsbCByZW1haW4gYXMgaXNcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoU3RyaW5nKHN0YXR1c0NvZGUpWzBdID09PSBcIjJcIiB8fCBTdHJpbmcoc3RhdHVzQ29kZSlbMF0gPT09IFwiM1wiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc29sdmUoe1xuXHRcdFx0XHRcdFx0Ym9keTogcmVzQm9keSxcblx0XHRcdFx0XHRcdHN0YXR1c0NvZGUsXG5cdFx0XHRcdFx0XHRoZWFkZXJzOiByZXNIZWFkZXJzLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IGVycm9yTWVzc2FnZSA9IFwiTm8gZXJyb3IgbWVzc2FnZSB3YXMgcmV0dXJuZWQgZnJvbSB0aGUgc2VydmVyLlwiO1xuXHRcdFx0XHRsZXQgZXJyb3JDb2RlID0gXCItMVwiO1xuXHRcdFx0XHRpZiAocmVzQm9keSkge1xuXHRcdFx0XHRcdGlmIChyZXNCb2R5LmVycm9yKSB7XG5cdFx0XHRcdFx0XHRlcnJvck1lc3NhZ2UgPSByZXNCb2R5LmVycm9yLm1lc3NhZ2U7XG5cdFx0XHRcdFx0XHRlcnJvckNvZGUgPSByZXNCb2R5LmVycm9yLmVycm9yQ29kZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAocmVzQm9keS5tZXNzYWdlICYmIHJlc0JvZHkuZXJyb3JDb2RlKSB7XG5cdFx0XHRcdFx0XHRlcnJvck1lc3NhZ2UgPSByZXNCb2R5Lm1lc3NhZ2U7XG5cdFx0XHRcdFx0XHRlcnJvckNvZGUgPSByZXNCb2R5LmVycm9yQ29kZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAocmVzQm9keS52ZXJpZmljYXRpb25SZXNwb25zZSkge1xuXHRcdFx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gcmVzQm9keS52ZXJpZmljYXRpb25SZXNwb25zZS5tZXNzYWdlO1xuXHRcdFx0XHRcdFx0ZXJyb3JDb2RlID0gXCItMVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzdGF0dXNDb2RlID09PSA0MDEpIHtcblx0XHRcdFx0XHRDb25maWcub25VbkF1dGgoKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBEcml2ZVdlYWx0aFNlc3Npb25FcnJvcihcblx0XHRcdFx0XHRcdGVycm9yTWVzc2FnZSxcblx0XHRcdFx0XHRcdHJlc0JvZHksXG5cdFx0XHRcdFx0XHRzdGF0dXNDb2RlLFxuXHRcdFx0XHRcdFx0cmVzSGVhZGVycyxcblx0XHRcdFx0XHRcdGVycm9yQ29kZSxcblx0XHRcdFx0XHQpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiByZWplY3QobmV3IERyaXZlV2VhbHRoRXJyb3IoXG5cdFx0XHRcdFx0ZXJyb3JNZXNzYWdlLFxuXHRcdFx0XHRcdHJlc0JvZHksXG5cdFx0XHRcdFx0c3RhdHVzQ29kZSxcblx0XHRcdFx0XHRyZXNIZWFkZXJzLFxuXHRcdFx0XHRcdGVycm9yQ29kZSxcblx0XHRcdFx0KSk7XG5cdFx0XHR9LFxuXHRcdCkpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvcmVxdWVzdC5qcyIsIi8vIEBmbG93XG50eXBlIEVudmlyb25tZW50ID0ge1xuXHRhcGk6IHN0cmluZyxcblx0cmVwb3J0czogc3RyaW5nLFxufTtcblxuLyoqXG4gKiBTZXJ2ZXJzIHRvIHNlbmQgYSByZXF1ZXN0IHRvXG4gKiBAbmFtZSBIT1NUU1xuICogQHByb3BlcnR5IHtzdHJpbmd9IEFQSVxuICogQHByb3BlcnR5IHtzdHJpbmd9IEFQUFNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBSRVBPUlRTXG4gKiBAbWVtYmVyb2YgQ29uZmlnXG4gKiBAY29uc3RhbnRcbiAqL1xuZXhwb3J0IGNvbnN0IEhPU1RTID0ge1xuXHRBUEk6IFwiYXBpXCIsXG5cdFJFUE9SVFM6IFwicmVwb3J0c1wiLFxufTtcblxuLyoqXG4gKiBTZXJ2ZXJzIHRvIHNlbmQgYSByZXF1ZXN0IHRvXG4gKiBAbmFtZSBFTlZJUk9OTUVOVFNcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBVQVRcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBQUk9EXG4gKiBAbWVtYmVyb2YgQ29uZmlnXG4gKiBAY29uc3RhbnRcbiAqL1xuZXhwb3J0IGNvbnN0IEVOVklST05NRU5UUyA9IHtcblx0VUFUOiB7XG5cdFx0W0hPU1RTLkFQSV06IFwiaHR0cDovL2JvLWFwaS5kcml2ZXdlYWx0aC5pby9iYWNrLW9mZmljZVwiLFxuXHRcdFtIT1NUUy5SRVBPUlRTXTogXCJodHRwOi8vcmVwb3J0cy5kcml2ZXdlYWx0aC5pb1wiLFxuXHR9LFxuXHRQUk9EOiB7XG5cdFx0W0hPU1RTLkFQSV06IFwiaHR0cHM6Ly9iby1hcGkuZHJpdmV3ZWFsdGgubmV0L2JhY2stb2ZmaWNlXCIsXG5cdFx0W0hPU1RTLlJFUE9SVFNdOiBcImh0dHBzOi8vcmVwb3J0cy5kcml2ZXdlYWx0aC5uZXRcIixcblx0fSxcbn07XG5cbi8qKlxuICogQG1vZHVsZSBDb25maWdcbiAqL1xuZXhwb3J0IGNvbnN0IENvbmZpZzoge1xuXHRlbnY6IEVudmlyb25tZW50LFxuXHRodHRwSW1wbDogRnVuY3Rpb24sXG5cdGFwcFZlcnNpb246IHN0cmluZyxcblx0YXBwS2V5OiBzdHJpbmcsXG5cdG9uVW5BdXRoOiBGdW5jdGlvbixcbn0gPSB7XG5cdGVudjogRU5WSVJPTk1FTlRTLlVBVCxcblx0aHR0cEltcGw6ICgpID0+IHt9LFxuXHRhcHBWZXJzaW9uOiBcIlVOU0VUXCIsXG5cdGFwcEtleTogXCJVTlNFVFwiLFxuXHRvblVuQXV0aCgpIHt9LFxufTtcblxuLyoqXG4gKiBAZXhhbXBsZSBpbXBvcnQgZHJpdmV3ZWFsdGggZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqXG4gKiBkcml2ZXdlYWx0aC5zZXR1cCh7XG4gKiAgICAgZW52OiBkcml2ZXdlYWx0aC5FTlZJUk9OTUVOVFMuVUFULFxuICogICAgIGh0dHBJbXBsOiByZXF1aXJlKFwiZHJpdmV3ZWFsdGgtYmFjay1vZmZpY2UtamF2YXNjcmlwdC9saWIvaHR0cEltcGxzL3JlcXVlc3QuanNcIiksXG4gKiAgICAgYXBwVmVyc2lvbjogXCIxLjBcIixcbiAqICAgICBhcHBLZXk6IHByb2Nlc3MuZW52LkJPX0FQUF9LRVksXG4gKiB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwKHtcblx0ZW52LFxuXHRodHRwSW1wbCxcblx0YXBwVmVyc2lvbixcblx0YXBwS2V5LFxufToge1xuXHRlbnY6ICRQcm9wZXJ0eVR5cGU8dHlwZW9mIENvbmZpZywgXCJlbnZcIj4sXG5cdGh0dHBJbXBsOiAkUHJvcGVydHlUeXBlPHR5cGVvZiBDb25maWcsIFwiaHR0cEltcGxcIj4sXG5cdGFwcFZlcnNpb246ICRQcm9wZXJ0eVR5cGU8dHlwZW9mIENvbmZpZywgXCJhcHBWZXJzaW9uXCI+LFxuXHRhcHBLZXk6ICRQcm9wZXJ0eVR5cGU8dHlwZW9mIENvbmZpZywgXCJhcHBLZXlcIj4sXG59KSB7XG5cdENvbmZpZy5lbnYgPSBlbnY7XG5cdENvbmZpZy5odHRwSW1wbCA9IGh0dHBJbXBsO1xuXHRDb25maWcuYXBwVmVyc2lvbiA9IGFwcFZlcnNpb247XG5cdENvbmZpZy5hcHBLZXkgPSBhcHBLZXk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9Db25maWcuanMiLCIvLyBAZmxvd1xuaW1wb3J0IEV4dGVuZGFibGVFcnJvciBmcm9tIFwiZXh0ZW5kYWJsZS1lcnJvci1jbGFzc1wiO1xuXG4vKipcbiAqIEBjbGFzcyBEcml2ZVdlYWx0aEVycm9yXG4gKi9cbmV4cG9ydCBjbGFzcyBEcml2ZVdlYWx0aEVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcblx0Y29uc3RydWN0b3IoXG5cdFx0bWVzc2FnZTogc3RyaW5nLFxuXHRcdGJvZHk6IE9iamVjdCxcblx0XHRzdGF0dXNDb2RlOiBudW1iZXIsXG5cdFx0aGVhZGVyczogeyBbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfSxcblx0XHRlcnJvckNvZGU6IHN0cmluZyxcblx0KSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0dGhpcy5ib2R5ID0gYm9keTtcblx0XHR0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuXHRcdHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG5cdFx0dGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG5cdH1cbn1cblxuLyoqXG4gKiBAY2xhc3MgRHJpdmVXZWFsdGhTZXNzaW9uRXJyb3JcbiAqL1xuZXhwb3J0IGNsYXNzIERyaXZlV2VhbHRoU2Vzc2lvbkVycm9yIGV4dGVuZHMgRXh0ZW5kYWJsZUVycm9yIHtcblx0Y29uc3RydWN0b3IoXG5cdFx0bWVzc2FnZTogc3RyaW5nLFxuXHRcdGJvZHk6IE9iamVjdCxcblx0XHRzdGF0dXNDb2RlOiBudW1iZXIsXG5cdFx0aGVhZGVyczogeyBbaGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfSxcblx0XHRlcnJvckNvZGU6IHN0cmluZyxcblx0KSB7XG5cdFx0c3VwZXIobWVzc2FnZSk7XG5cdFx0dGhpcy5ib2R5ID0gYm9keTtcblx0XHR0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuXHRcdHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG5cdFx0dGhpcy5lcnJvckNvZGUgPSBlcnJvckNvZGU7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXHREcml2ZVdlYWx0aEVycm9yLFxuXHREcml2ZVdlYWx0aFNlc3Npb25FcnJvcixcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9FcnJvci5qcyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRhYmxlQnVpbHRpbihjbHMpIHtcbiAgICBmdW5jdGlvbiBFeHRlbmRhYmxlQnVpbHRpbigpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gUmVmbGVjdC5jb25zdHJ1Y3QoY2xzLCBBcnJheS5mcm9tKGFyZ3VtZW50cykpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBFeHRlbmRhYmxlQnVpbHRpbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGNscy5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgIHZhbHVlOiBjbHMsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKEV4dGVuZGFibGVCdWlsdGluLCBjbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIEV4dGVuZGFibGVCdWlsdGluLl9fcHJvdG9fXyA9IGNscztcbiAgICB9XG5cbiAgICByZXR1cm4gRXh0ZW5kYWJsZUJ1aWx0aW47XG59XG5cbnZhciBFeHRlbmRhYmxlRXJyb3IgPSBmdW5jdGlvbiAoX2V4dGVuZGFibGVCdWlsdGluMikge1xuICAgIF9pbmhlcml0cyhFeHRlbmRhYmxlRXJyb3IsIF9leHRlbmRhYmxlQnVpbHRpbjIpO1xuXG4gICAgZnVuY3Rpb24gRXh0ZW5kYWJsZUVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV4dGVuZGFibGVFcnJvcik7XG5cbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKEV4dGVuZGFibGVFcnJvcikuY2FsbCh0aGlzLCBtZXNzYWdlKSk7XG5cbiAgICAgICAgX3RoaXMubmFtZSA9IF90aGlzLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfdGhpcywgX3RoaXMuY29uc3RydWN0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuc3RhY2sgPSBuZXcgRXJyb3IobWVzc2FnZSkuc3RhY2s7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBFeHRlbmRhYmxlRXJyb3I7XG59KF9leHRlbmRhYmxlQnVpbHRpbihFcnJvcikpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4dGVuZGFibGVFcnJvcjtcblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2V4dGVuZGFibGUtZXJyb3ItY2xhc3MvZGlzdC9pbmRleC5lczUuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQGZsb3dcbmNsYXNzIFNlc3Npb25zIHtcblx0a2V5OiA/c3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMua2V5ID0gbnVsbDtcblx0fVxuXG5cdGdldCgpIHtcblx0XHRyZXR1cm4gdGhpcy5rZXk7XG5cdH1cblxuXHRzYXZlKGtleTogc3RyaW5nKSB7XG5cdFx0dGhpcy5rZXkgPSBrZXk7XG5cdH1cblxuXHRyZW1vdmUoKSB7XG5cdFx0dGhpcy5rZXkgPSBudWxsO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBzZXNzaW9ucyA9IG5ldyBTZXNzaW9ucygpO1xuZXhwb3J0IGRlZmF1bHQgc2Vzc2lvbnM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW50ZXJuYWwvU2Vzc2lvbnMuanMiLCIvLyBAZmxvd1xuaW1wb3J0IHJlcXVlc3QgZnJvbSBcIi4vcmVxdWVzdFwiO1xuaW1wb3J0IHR5cGUgeyBWaW9sYXRpb25DcmVhdGVEZXRhaWxzIH0gZnJvbSBcIi4uL3R5cGVzL1Zpb2xhdGlvblwiO1xuXG4vKipcbiAqIEBtb2R1bGVcbiAqIEBleGFtcGxlIGltcG9ydCB7IFZpb2xhdGlvbiB9IGZyb20gXCJkcml2ZXdlYWx0aC1iYWNrLW9mZmljZS1qYXZhc2NyaXB0XCI7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpb2xhdGlvbiB7XG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBuZXcgdmlvbGF0aW9uIHRpZWQgdG8gYW4gYWNjb3VudC5cblx0ICovXG5cdHN0YXRpYyBjcmVhdGUoYWNjb3VudElEOiBzdHJpbmcsIGRldGFpbHM6IFZpb2xhdGlvbkNyZWF0ZURldGFpbHMpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRtZXRob2Q6IFwiUE9TVFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvYWNjb3VudHMvJHthY2NvdW50SUR9L3Zpb2xhdGlvbnNgLFxuXHRcdFx0Ym9keTogZGV0YWlscyxcblx0XHR9KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHZpb2xhdGlvbnMgb2YgYW4gYWNjb3VudC5cblx0ICovXG5cdHN0YXRpYyBnZXQoYWNjb3VudElEOiBzdHJpbmcpOiBQcm9taXNlPHtcblx0XHRnb29kRmFpdGhWaW9sYXRpb25zOiBBcnJheTxWaW9sYXRpb24+LFxuXHRcdHBhdHRlcm5EYXlUcmFkZXM6IG51bWJlciB8IG51bGwsXG5cdFx0bGVnYWN5R29vZEZhaXRoVmlvbGF0aW9uczogbnVtYmVyLFxuXHRcdG1lc3NhZ2U6IHN0cmluZyxcblx0fT4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHsgZW5kcG9pbnQ6IGAvYWNjb3VudHMvJHthY2NvdW50SUR9L3Zpb2xhdGlvbnNgIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlbGV0ZSBhIHZpb2xhdGlvbiBmcm9tIGFuIGFjY291bnQuXG5cdCAqL1xuXHRzdGF0aWMgZGVsZXRlKGFjY291bnRJRDogc3RyaW5nLCB2aW9sYXRpb25JRDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIkRFTEVURVwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvYWNjb3VudHMvJHthY2NvdW50SUR9L3Zpb2xhdGlvbnMvJHt2aW9sYXRpb25JRH1gLFxuXHRcdH0pLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcblx0fVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvVmlvbGF0aW9uLmpzIiwiLy8gQGZsb3dcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuL0NvbmZpZ1wiO1xuaW1wb3J0IFNlc3Npb25zIGZyb20gXCIuLi9pbnRlcm5hbC9TZXNzaW9uc1wiO1xuXG4vKipcbiAqIEBjbGFzcyBBdXRoXG4gKiBAZXhhbXBsZSBpbXBvcnQgeyBBdXRoIH0gZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0aCB7XG5cdHN0YXRpYyBwZW5kaW5nVGVtcENvZGUgPSBudWxsO1xuXHRzdGF0aWMgcGVuZGluZ1VzZXJuYW1lID0gbnVsbDtcblx0c3RhdGljIHBlbmRpbmcyRkFUeXBlID0gbnVsbDtcblxuXHQvKipcblx0ICogQGNvbnN0YW50XG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBTTVNcblx0ICovXG5cdHN0YXRpYyBWRVJJRklDQVRJT05fVFlQRVMgPSB7XG5cdFx0U01TOiBcInNtc1wiLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgbG9naW4odXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8T2JqZWN0PiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcdGVuZHBvaW50OiBcIi9hdXRoXCIsXG5cdFx0XHRib2R5OiB7XG5cdFx0XHRcdHVzZXJuYW1lLFxuXHRcdFx0XHRwYXNzd29yZCxcblx0XHRcdFx0YXBwVmVyc2lvbjogQ29uZmlnLmFwcFZlcnNpb24sXG5cblx0XHRcdFx0aXBfYWRkcmVzczogXCJ1bmtub3duXCIsXG5cdFx0XHRcdGxhbmd1YWdlSUQ6IFwiZW5fVVNcIixcblx0XHRcdFx0b3NWZXJzaW9uOiBcInVua25vd25cIixcblx0XHRcdFx0b3NUeXBlOiBcInVua25vd25cIixcblx0XHRcdFx0c2NyUmVzOiBcInVua25vd25cIixcblx0XHRcdFx0YXBwVHlwZUlEOiA0LFxuXHRcdFx0fSxcblx0XHR9KS50aGVuKCh7IGJvZHkgfSkgPT4ge1xuXHRcdFx0aWYgKGJvZHkuYXV0aFRva2VuKSB7XG5cdFx0XHRcdFNlc3Npb25zLnNhdmUoYm9keS5hdXRoVG9rZW4pO1xuXHRcdFx0XHRyZXR1cm4gYm9keTtcblx0XHRcdH1cblxuXHRcdFx0QXV0aC5wZW5kaW5nVGVtcENvZGUgPSBib2R5LnRlbXBDb2RlO1xuXHRcdFx0QXV0aC5wZW5kaW5nVXNlcm5hbWUgPSBib2R5LnVzZXJuYW1lO1xuXHRcdFx0ZGVsZXRlIGJvZHkudGVtcENvZGU7XG5cdFx0XHRkZWxldGUgYm9keS51c2VybmFtZTtcblx0XHRcdHJldHVybiBib2R5O1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBpc3N1ZTJGQUNvZGUodHlwZTogc3RyaW5nKTogUHJvbWlzZTxPYmplY3Q+IHtcblx0XHRpZiAoIUF1dGgucGVuZGluZ1RlbXBDb2RlKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBsb2dpbiBwZW5kaW5nLiBDYWxsIEF1dGgubG9naW4oKSBmaXJzdCFcIik7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcdGVuZHBvaW50OiBcIi9hdXRoLzJmYVwiLFxuXHRcdFx0Ym9keToge1xuXHRcdFx0XHR1c2VybmFtZTogQXV0aC5wZW5kaW5nVXNlcm5hbWUsXG5cdFx0XHRcdHRlbXBDb2RlOiBBdXRoLnBlbmRpbmdUZW1wQ29kZSxcblx0XHRcdFx0XCIyRkFUeXBlXCI6IHR5cGUsXG5cdFx0XHRcdGxvY2FsZTogXCJlblwiLFxuXHRcdFx0fSxcblx0XHR9KS50aGVuKCh7IGJvZHkgfSkgPT4ge1xuXHRcdFx0QXV0aC5wZW5kaW5nMkZBVHlwZSA9IHR5cGU7XG5cdFx0XHRyZXR1cm4gYm9keTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgdmVyaWZ5MkZBQ29kZShjb2RlOiBzdHJpbmcpOiBQcm9taXNlPE9iamVjdD4ge1xuXHRcdGlmICghQXV0aC5wZW5kaW5nMkZBVHlwZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiTm8gbG9naW4gcGVuZGluZy4gQ2FsbCBBdXRoLmxvZ2luKCksIHRoZW4gQXV0aC5pc3N1ZTJGQUNvZGUoKSBmaXJzdC5cIik7XG5cdFx0fVxuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRlbmRwb2ludDogXCIvYXV0aC8yZmEvdmVyaWZpY2F0aW9uXCIsXG5cdFx0XHRib2R5OiB7XG5cdFx0XHRcdHVzZXJuYW1lOiBBdXRoLnBlbmRpbmdVc2VybmFtZSxcblx0XHRcdFx0dGVtcENvZGU6IEF1dGgucGVuZGluZ1RlbXBDb2RlLFxuXHRcdFx0XHRcIjJGQVR5cGVcIjogQXV0aC5wZW5kaW5nMkZBVHlwZSxcblx0XHRcdFx0dmVyaWZpY2F0aW9uQ29kZTogY29kZSxcblx0XHRcdH0sXG5cdFx0fSkudGhlbigoeyBib2R5IH0pID0+IHtcblx0XHRcdEF1dGgucGVuZGluZ1RlbXBDb2RlID0gbnVsbDtcblx0XHRcdEF1dGgucGVuZGluZ1VzZXJuYW1lID0gbnVsbDtcblx0XHRcdEF1dGgucGVuZGluZzJGQVR5cGUgPSBudWxsO1xuXHRcdFx0U2Vzc2lvbnMuc2F2ZShib2R5LmF1dGhSZXNwb25zZS5hdXRoVG9rZW4pO1xuXHRcdFx0cmV0dXJuIGJvZHkuYXV0aFJlc3BvbnNlO1xuXHRcdH0pO1xuXHR9XG5cblx0c3RhdGljIG9uVW5BdXRoKGNhbGxiYWNrOiBGdW5jdGlvbikge1xuXHRcdENvbmZpZy5vblVuQXV0aCA9IGNhbGxiYWNrO1xuXHR9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9BdXRoLmpzIiwiLy8gQGZsb3dcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcbmltcG9ydCBBY2NvdW50IGZyb20gXCIuL0FjY291bnRcIjtcbmltcG9ydCBEb2N1bWVudCBmcm9tIFwiLi9Eb2N1bWVudFwiO1xuaW1wb3J0IHsgZ2V0UGVuZGluZ0NvdW50cywgZ2V0UGVuZGluZyB9IGZyb20gXCIuLi9pbnRlcm5hbC9kb2N1bWVudHNcIjtcbmltcG9ydCB0eXBlIHtcblx0VXNlckNyZWF0ZURldGFpbHMsXG5cdFVzZXJCYXNpYyxcblx0Tm90ZSxcblx0Tm90ZVN1YmplY3QsXG5cdEtZQ1VzZXIsXG5cdFVzZXJEZXRhaWxzLFxuXHRVc2VyU2VhcmNoUmVzdWx0LFxufSBmcm9tIFwiLi4vdHlwZXMvVXNlclwiO1xuaW1wb3J0IHR5cGUgeyBBY2NvdW50RGV0YWlscyB9IGZyb20gXCIuLi90eXBlcy9BY2NvdW50XCI7XG5pbXBvcnQgdHlwZSB7IFBlbmRpbmdDb3VudCwgUGVuZGluZ0RvY3VtZW50IH0gZnJvbSBcIi4uL3R5cGVzL0RvY3VtZW50XCI7XG5cbi8qKlxuICogQG1vZHVsZVxuICogQGRlc2NyaXB0aW9uIFRoZSBVc2VycyBBUEkgYWxsb3dzIHlvdSB0byBjcmVhdGUgYSBtdWx0aXR1ZGUgb2YgdXNlcnMuXG4gKiBAZXhhbXBsZSBpbXBvcnQgeyBVc2VyIH0gZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlciB7XG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBuZXcgdXNlci5cblx0ICovXG5cdHN0YXRpYyBjcmVhdGUoZGV0YWlsczogVXNlckNyZWF0ZURldGFpbHMpOiBQcm9taXNlPFVzZXJCYXNpYz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRlbmRwb2ludDogXCIvdXNlcnNcIixcblx0XHRcdGJvZHk6IGRldGFpbHMsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHNwZWNpZmljIGRldGFpbHMgYWJvdXQgYSBwYXJ0aWN1bGFyIHVzZXIuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0KHVzZXJJRDogc3RyaW5nKTogUHJvbWlzZTxVc2VyRGV0YWlscz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHsgZW5kcG9pbnQ6IFwiL3VzZXJzL1wiICsgdXNlcklEIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVkaXQgaW5mb3JtYXRpb24gb24gYSBwYXJ0aWN1bGFyIHVzZXIuXG5cdCAqL1xuXHRzdGF0aWMgZWRpdCh1c2VySUQ6IHN0cmluZywgZGV0YWlsczogP1VzZXJDcmVhdGVEZXRhaWxzKTogUHJvbWlzZTxVc2VyRGV0YWlscz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IFwiL3VzZXJzL1wiICsgdXNlcklELFxuXHRcdFx0Ym9keTogZGV0YWlscyxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0Tm90ZXModXNlcklEOiBzdHJpbmcpOiBQcm9taXNlPEFycmF5PE5vdGU+PiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0ZW5kcG9pbnQ6IGAvdXNlcnMvJHt1c2VySUR9L25vdGVzYCxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgY3JlYXRlTm90ZSh1c2VySUQ6IHN0cmluZywgbm90ZTogc3RyaW5nLCBzdWJqZWN0OiBOb3RlU3ViamVjdCk6IFByb21pc2U8Tm90ZT4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRlbmRwb2ludDogYC91c2Vycy8ke3VzZXJJRH0vbm90ZXNgLFxuXHRcdFx0Ym9keToge1xuXHRcdFx0XHR1c2VySUQsXG5cdFx0XHRcdHN1YmplY3Q6IEpTT04uc3RyaW5naWZ5KHN1YmplY3QpLFxuXHRcdFx0XHRub3RlLFxuXHRcdFx0fSxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYWNjb3VudHMgdGhhdCBiZWxvbmcgdG8gYSB1c2VyLlxuXHQgKi9cblx0c3RhdGljIGdldEFjY291bnRzKHVzZXJJRDogc3RyaW5nKTogUHJvbWlzZTxBcnJheTxBY2NvdW50RGV0YWlscz4+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7IGVuZHBvaW50OiBgL3VzZXJzLyR7dXNlcklEfS9hY2NvdW50c2AgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogU2VhcmNoIGZvciB1c2VycyBiYXNlZCBvbiBvbmUgb3IgbW9yZSBmaWVsZHMgY29udGFpbmVkIGluIGEgcXVlcnkgb2JqZWN0LlxuXHQgKi9cblx0c3RhdGljIGFkdmFuY2VkU2VhcmNoKHNlYXJjaFF1ZXJ5OiB7fFxuXHRcdHVzZXJuYW1lPzogc3RyaW5nLFxuXHRcdGZpcnN0TmFtZT86IHN0cmluZyxcblx0XHRsYXN0TmFtZT86IHN0cmluZyxcblx0XHRwaG9uZU51bWJlcj86IHN0cmluZyxcblx0XHRlbWFpbD86IHN0cmluZyxcblx0fH0pOiBQcm9taXNlPEFycmF5PFVzZXJEZXRhaWxzPj4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgL3VzZXJzL3NlYXJjaD8ke09iamVjdC5rZXlzKHNlYXJjaFF1ZXJ5KVxuXHRcdFx0XHQuZmlsdGVyKGtleSA9PiBzZWFyY2hRdWVyeVtrZXldKVxuXHRcdFx0XHQubWFwKGtleSA9PiBgJHtrZXl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhzZWFyY2hRdWVyeVtrZXldKSl9YClcblx0XHRcdFx0LmpvaW4oXCImXCIpfWAsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keS5yZXN1bHRTZXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBjb25zdGFudFxuXHQgKiBAcHJvcGVydHkge1JlZ0V4cH0gYWNjb3VudE5vXG5cdCAqIEBwcm9wZXJ0eSB7UmVnRXhwfSB1c2VySURcblx0ICogQHByb3BlcnR5IHtSZWdFeHB9IGFjY291bnRJRFxuXHQgKiBAcHJvcGVydHkge1JlZ0V4cH0gcGhvbmVOdW1iZXJcblx0ICogQHByb3BlcnR5IHtSZWdFeHB9IGZ1bGxOYW1lXG5cdCAqL1xuXHRzdGF0aWMgUkVHRVhQUyA9IHtcblx0XHRhY2NvdW50Tm86IC9eW0EtWmEtel17NH1cXGR7Nn0kLyxcblx0XHR1c2VySUQ6IC9eW0EtWmEtelxcZF17OH0tW0EtWmEtelxcZF17NH0tW0EtWmEtelxcZF17NH0tW0EtWmEtelxcZF17NH0tW0EtWmEtelxcZF17MTJ9JC8sXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cblx0XHRhY2NvdW50SUQ6IC9eW0EtWmEtelxcZF17OH0tW0EtWmEtelxcZF17NH0tW0EtWmEtelxcZF17NH0tW0EtWmEtelxcZF17NH0tW0EtWmEtelxcZF17MTJ9XFwuXFxkezEzfSQvLFxuXHRcdHBob25lTnVtYmVyOiAvXlxcZHs0fSQvLFxuXHRcdGZ1bGxOYW1lOiAvXFxTKyBcXFMrLyxcblx0fTtcblxuXHRzdGF0aWMgZ2V0RmllbGRzVG9TZWFyY2gocmF3UXVlcnk6IHN0cmluZykge1xuXHRcdGNvbnN0IGZpZWxkcyA9IFtcImFjY291bnROb1wiLCBcInVzZXJJRFwiLCBcImFjY291bnRJRFwiLCBcInBob25lTnVtYmVyXCIsIFwiZnVsbE5hbWVcIl07XG5cblx0XHRmb3IgKGNvbnN0IGZpZWxkIG9mIGZpZWxkcykge1xuXHRcdFx0aWYgKFVzZXIuUkVHRVhQU1tmaWVsZF0udGVzdChyYXdRdWVyeSkpIHtcblx0XHRcdFx0cmV0dXJuIFtmaWVsZF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtcInVzZXJuYW1lXCIsIFwiZmlyc3ROYW1lXCIsIFwibGFzdE5hbWVcIiwgXCJlbWFpbFwiXTtcblx0fVxuXG5cdHN0YXRpYyBnZXRTZWFyY2hRdWVyeShyYXdRdWVyeTogc3RyaW5nKTogeyBbZmllbGQ6IHN0cmluZ106IHN0cmluZyB9IHtcblx0XHRyZXR1cm4gVXNlci5nZXRGaWVsZHNUb1NlYXJjaChyYXdRdWVyeSlcblx0XHRcdC5yZWR1Y2UoKHNlYXJjaFF1ZXJ5LCBmaWVsZCkgPT4gKHtcblx0XHRcdFx0Li4uc2VhcmNoUXVlcnksXG5cdFx0XHRcdFtmaWVsZF06IHJhd1F1ZXJ5LFxuXHRcdFx0fSksIHt9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2ggZm9yIHVzZXJzLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcmF3UXVlcnkgY2FuIGJlIGEgdXNlcklELCBhY2NvdW50Tm8sIGFjY291bnRJRCxcblx0ICogcGhvbmVOdW1iZXIsIGZ1bGxOYW1lLCB1c2VybmFtZSwgZmlyc3ROYW1lLCBsYXN0TmFtZSwgb3IgZW1haWwuXG5cdCAqL1xuXHRzdGF0aWMgc2VhcmNoKHJhd1F1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPEFycmF5PFVzZXJEZXRhaWxzIHwgVXNlclNlYXJjaFJlc3VsdD4+IHtcblx0XHRjb25zdCBzZWFyY2hRdWVyeSA9IFVzZXIuZ2V0U2VhcmNoUXVlcnkocmF3UXVlcnkpO1xuXG5cdFx0Ly8gZWFjaCB0eXBlIG9mIHF1ZXJ5IG1heSB1c2UgYSBkaWZmZXJlbnQgcmVxdWVzdCBtZXRob2Rcblx0XHRjb25zdCByZXF1ZXN0czogQXJyYXk8UHJvbWlzZTxVc2VyRGV0YWlscyB8IEFycmF5PFVzZXJEZXRhaWxzPiB8IEFycmF5PFVzZXJTZWFyY2hSZXN1bHQ+Pj4gPVxuXHRcdFx0T2JqZWN0LmtleXMoc2VhcmNoUXVlcnkpXG5cdFx0XHRcdC5tYXAoZmllbGQgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHZhbHVlID0gc2VhcmNoUXVlcnlbZmllbGRdLnRyaW0oKTtcblx0XHRcdFx0XHRzd2l0Y2ggKGZpZWxkKSB7XG5cdFx0XHRcdFx0XHRjYXNlIFwidXNlcklEXCI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBVc2VyLmdldCh2YWx1ZSk7XG5cblx0XHRcdFx0XHRcdGNhc2UgXCJhY2NvdW50Tm9cIjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIEFjY291bnQuZ2V0QnlBY2NvdW50Tm8odmFsdWUpLnRoZW4oXG5cdFx0XHRcdFx0XHRcdFx0YWNjb3VudCA9PiBVc2VyLmdldChhY2NvdW50LnVzZXJJRCksXG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGNhc2UgXCJhY2NvdW50SURcIjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIEFjY291bnQuZ2V0KHZhbHVlKS50aGVuKFxuXHRcdFx0XHRcdFx0XHRcdGFjY291bnQgPT4gVXNlci5nZXQoYWNjb3VudC51c2VySUQpLFxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRjYXNlIFwiZnVsbE5hbWVcIjoge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBbZmlyc3QsIGxhc3RdID0gdmFsdWUuc3BsaXQoL1xccy8pO1xuXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdFx0XHRcdFx0XHRlbmRwb2ludDogYC91c2Vycy9zZWFyY2g/Zmlyc3ROYW1lPSR7Zmlyc3R9Jmxhc3ROYW1lPSR7bGFzdH1gLFxuXHRcdFx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdFx0XHRcdC50aGVuKChkYXRhKTogQXJyYXk8VXNlclNlYXJjaFJlc3VsdD4gPT4gZGF0YS5ib2R5LnJlc3VsdFNldCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNhc2UgXCJ1c2VybmFtZVwiOlxuXHRcdFx0XHRcdFx0Y2FzZSBcImZpcnN0TmFtZVwiOlxuXHRcdFx0XHRcdFx0Y2FzZSBcImxhc3ROYW1lXCI6XG5cdFx0XHRcdFx0XHRjYXNlIFwicGhvbmVOdW1iZXJcIjpcblx0XHRcdFx0XHRcdGNhc2UgXCJlbWFpbFwiOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRcdFx0XHRcdFx0ZW5kcG9pbnQ6IGAvdXNlcnMvc2VhcmNoPyR7ZmllbGR9PSR7dmFsdWV9YCxcblx0XHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdFx0XHQudGhlbigoZGF0YSk6IEFycmF5PFVzZXJTZWFyY2hSZXN1bHQ+ID0+IGRhdGEuYm9keS5yZXN1bHRTZXQpO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XHRgQXR0ZW1wdGVkIHRvIHNlYXJjaCBmb3IgYW4gdW5rbm93biBxdWVyeSB0eXBlICgke2ZpZWxkfSlgLFxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwocmVxdWVzdHMpXG5cdFx0XHQudGhlbihyZXNwb25zZXMgPT4ge1xuXHRcdFx0XHQvLyB0cmFuc2Zvcm0gbmVzdGVkIGFycmF5IGludG8gc2luZ2xlLWxldmVsIGFycmF5XG5cdFx0XHRcdGNvbnN0IHJlc3VsdHM6IEFycmF5PFVzZXJEZXRhaWxzIHwgVXNlclNlYXJjaFJlc3VsdD4gPSByZXNwb25zZXMucmVkdWNlKFxuXHRcdFx0XHRcdChhY2MsIG5leHQpID0+IFsuLi5hY2MsIC4uLihBcnJheS5pc0FycmF5KG5leHQpID8gbmV4dCA6IFtuZXh0XSldLFxuXHRcdFx0XHRcdFtdLFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBkdXBsaWNhdGUgcmVzdWx0cyBieSBjb252ZXJ0aW5nIGZyb20gYXJyYXkgdG8gb2JqZWN0IGFuZCBiYWNrIHRvIGFycmF5XG5cdFx0XHRcdGNvbnN0IHJlc3VsdHNCeUlEOiB7IFt1c2VySUQ6IHN0cmluZ106IE9iamVjdCB9ID0gcmVzdWx0cy5yZWR1Y2UoXG5cdFx0XHRcdFx0KGFjYywgbmV4dDogVXNlckRldGFpbHMgfCBVc2VyU2VhcmNoUmVzdWx0KSA9PiB7XG5cdFx0XHRcdFx0XHQvLyBDYW4gd2Ugc2ltcGxpZnkgdGhpcyB0eXBlPyBDb3VsZG4ndCBmaW5kIGEgd2F5IHRvIG1ha2UgaXQgc2ltcGxlciBpbiBGbG93XG5cdFx0XHRcdFx0XHRjb25zdCB1c2VySUQ6IHN0cmluZyA9IHR5cGVvZiBuZXh0LmlkID09PSBcInN0cmluZ1wiID8gbmV4dC5pZCA6XG5cdFx0XHRcdFx0XHRcdHR5cGVvZiBuZXh0LnVzZXJJRCA9PT0gXCJzdHJpbmdcIiA/IG5leHQudXNlcklEIDogXCJcIjtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGFjYywgeyBbdXNlcklEXTogbmV4dCB9KTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHt9LFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmtleXMocmVzdWx0c0J5SUQpLm1hcChrZXkgPT4gcmVzdWx0c0J5SURba2V5XSk7XG5cdFx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgZG9jdW1lbnRzIHRoYXQgYmVsb25nIHRvIGEgdXNlci5cblx0ICovXG5cdHN0YXRpYyBnZXREb2N1bWVudHModXNlcklEOiBzdHJpbmcpOiBQcm9taXNlPEFycmF5PERvY3VtZW50Pj4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgL3VzZXJzLyR7dXNlcklEfS9kb2N1bWVudHNgLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgZG9jdW1lbnQgZnJvbSBhIGJhc2U2NCBpbWFnZSBzdHJpbmcgb3IgYSBKYXZhU2NyaXB0IEltYWdlIGZpbGUuXG5cdCAqL1xuXHRzdGF0aWMgY3JlYXRlRG9jdW1lbnQodXNlcklEOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgaW1hZ2U6IHN0cmluZyB8IEZpbGUpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gRG9jdW1lbnQuY3JlYXRlKHVzZXJJRCwgdHlwZSwgaW1hZ2UpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBvcGVuRG9jdW1lbnQoZG9jdW1lbnRJRDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRyZXR1cm4gRG9jdW1lbnQuZ2V0VVJMKGRvY3VtZW50SUQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldEtZQ1VzZXJzKCk6IFByb21pc2U8QXJyYXk8S1lDVXNlcj4+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRlbmRwb2ludDogXCIvdXNlcnMva3ljLWV4Y2VwdGlvblwiLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBwYXRjaEtZQ1VzZXJzKG1ldGhvZDogc3RyaW5nLCAuLi51c2VySURzOiBBcnJheTxzdHJpbmc+KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0dXNlcklEcy5tYXAodXNlcklEID0+IHJlcXVlc3Qoe1xuXHRcdFx0XHRlbmRwb2ludDogYC91c2Vycy9reWMtZXhjZXB0aW9uLyR7dXNlcklEfWAsXG5cdFx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0XHRib2R5OiB7XG5cdFx0XHRcdFx0bWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcblx0XHRcdFx0fSxcblx0XHRcdH0pKSxcblx0XHQpXG5cdFx0Ly8gaWYgdGhlIG1ldGhvZCBkZWNsYXJhdGlvbiBzYXlzIGl0IHJldHVybnMgdm9pZCwgaXQgc2hvdWxkXG5cdFx0XHQudGhlbigoKSA9PiB7fSk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldFBlbmRpbmdDb3VudHMoKTogUHJvbWlzZTxBcnJheTxQZW5kaW5nQ291bnQ+PiB7XG5cdFx0cmV0dXJuIGdldFBlbmRpbmdDb3VudHMoXCJ1c2Vyc1wiKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSBxdWVyeVxuXHQgKi9cblx0c3RhdGljIGdldFBlbmRpbmcocXVlcnk6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcpOiBQcm9taXNlPEFycmF5PFBlbmRpbmdEb2N1bWVudD4+IHtcblx0XHRyZXR1cm4gZ2V0UGVuZGluZyhcIm5leHRQZW5kaW5nVXNlckFwcHJvdmFsXCIsIHF1ZXJ5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgcmV2aWV3KHVzZXJJRDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcdGVuZHBvaW50OiBcIi91c2Vycy9yZXZpZXdcIixcblx0XHRcdGJvZHk6IHsgdXNlcklEIH0sXG5cdFx0fSkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyB1cGRhdGVVc2VyUm9sZShcblx0XHRwZXJtaXNzaW9uR3JvdXBJRDogc3RyaW5nLFxuXHRcdHVzZXJJRDogc3RyaW5nLFxuXHQpOiBQcm9taXNlPFVzZXJEZXRhaWxzPiB7XG5cdFx0Y29uc3QgdHlwZSA9IFwiUEVSTUlTU0lPTlNfSU5GT1wiO1xuXHRcdGNvbnN0IGJvZHkgPSB7XG5cdFx0XHRcImRvY3VtZW50c1wiOiBbe1xuXHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0aWQ6IHBlcm1pc3Npb25Hcm91cElELFxuXHRcdFx0XHR9LFxuXHRcdFx0fV0sXG5cdFx0fTtcblxuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvdXNlcnMvJHt1c2VySUR9YCxcblx0XHRcdGJvZHksXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL1VzZXIuanMiLCIvLyBAZmxvd1xuaW1wb3J0IHJlcXVlc3QgZnJvbSBcIi4vcmVxdWVzdFwiO1xuaW1wb3J0IFVzZXIgZnJvbSBcIi4vVXNlclwiO1xuaW1wb3J0IHsgZ2V0UGVuZGluZ0NvdW50cywgZ2V0UGVuZGluZyB9IGZyb20gXCIuLi9pbnRlcm5hbC9kb2N1bWVudHNcIjtcbmltcG9ydCB0eXBlIHsgUGVuZGluZ0NvdW50LCBQZW5kaW5nRG9jdW1lbnRzLCBSZXZpZXdlZERvY3VtZW50IH0gZnJvbSBcIi4uL3R5cGVzL0RvY3VtZW50XCI7XG5cbi8qKlxuICogQG1vZHVsZVxuICogSW4gb3JkZXIgdG8gcHJvdmUgdGhlIGlkZW50aXR5IG9mIGEgY2xpZW50LCB0aGV5IG11c3QgcHJvdmlkZSBkb2N1bWVudGFyeSBwcm9vZlxuICogb2YgdGhlaXIgaWRlbnRpdHkuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvY3VtZW50IHtcblx0LyoqXG5cdCAqIEBjb25zdGFudFxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gQ0FTSFxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gT1JERVJTXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBUUkFOU0FDVElPTlNcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IEVRVUlUWVxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gVklPTEFUSU9OU1xuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gQUxMXG5cdCAqL1xuXHRzdGF0aWMgRE9DVU1FTlRfVFlQRVMgPSB7XG5cdFx0UEhPVE9fSUQ6IFwiUElDVFVSRV9JRFwiLFxuXHRcdEFERFJFU1M6IFwiUFJPT0ZfT0ZfQUREUkVTU1wiLFxuXHRcdFBIT1RPX0lEX0FORF9BRERSRVNTOiBcIlBJQ1RVUkVfSURfUFJPT0ZfT0ZfQUREUkVTU1wiLFxuXHRcdENPUlBPUkFURTogXCJDT1JQT1JBVEVcIixcblx0XHRUUlVTVDogXCJUUlVTVF9ET0NVTUVOVFNcIixcblx0XHRSSVNLOiBcIlJJU0tfQVNTRVNTTUVOVFwiLFxuXHRcdFRBWDogXCJUQVhcIixcblx0XHRPVEhFUjogXCJPVEhFUlwiLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAY29uc3RhbnRcblx0ICogQHByb3BlcnR5IHtvYmplY3R9IFBJQ1RVUkVcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFBJQ1RVUkUuSU5WQUxJRFxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gUElDVFVSRS5NSVNNQVRDSF9OQU1FXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQSUNUVVJFLklMTEVHSUJMRVxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gUElDVFVSRS5FWFBJUkVEXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQSUNUVVJFLk9USEVSXG5cdCAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBBRERSRVNTXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBBRERSRVNTLklOVkFMSURcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IEFERFJFU1MuTUlTTUFUQ0hfTkFNRVxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gQUREUkVTUy5JTExFR0lCTEVcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IEFERFJFU1MuRVhQSVJFRFxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gQUREUkVTUy5PVEhFUlxuXHQgKi9cblx0c3RhdGljIFJFSkVDVElPTl9SRUFTT05TID0ge1xuXHRcdFBJQ1RVUkU6IHtcblx0XHRcdElOVkFMSUQ6IFwiUElDVFVSRV9JTlZBTElEX0RPQ1VNRU5UX1RZUEVcIixcblx0XHRcdE1JU01BVENIX05BTUU6IFwiUElDVFVSRV9NSVNNQVRDSF9OQU1FXCIsXG5cdFx0XHRJTExFR0lCTEU6IFwiUElDVFVSRV9JTExFR0lCTEVcIixcblx0XHRcdEVYUElSRUQ6IFwiUElDVFVSRV9FWFBJUkVEXCIsXG5cdFx0XHRPVEhFUjogXCJQSUNUVVJFX09USEVSXCIsXG5cdFx0fSxcblx0XHRBRERSRVNTOiB7XG5cdFx0XHRJTlZBTElEOiBcIkFERFJFU1NfSU5WQUxJRF9ET0NVTUVOVF9UWVBFXCIsXG5cdFx0XHRNSVNNQVRDSF9BRERSRVNTOiBcIkFERFJFU1NfTUlTTUFUQ0hfQUREUkVTU1wiLFxuXHRcdFx0TUlTTUFUQ0hfTkFNRTogXCJBRERSRVNTX01JU01BVENIX05BTUVcIixcblx0XHRcdElMTEVHSUJMRTogXCJBRERSRVNTX0lMTEVHSUJMRVwiLFxuXHRcdFx0RVhQSVJFRDogXCJBRERSRVNTX0VYUElSRURcIixcblx0XHRcdE9USEVSOiBcIkFERFJFU1NfT1RIRVJcIixcblx0XHR9LFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBAY29uc3RhbnRcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IEVOR0xJU0hcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IENISU5FU0Vcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFNQQU5JU0hcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFBPUlRVR1VFU0Vcblx0ICovXG5cdHN0YXRpYyBMQU5HVUFHRV9JRFMgPSB7XG5cdFx0RU5HTElTSDogXCJlbl9VU1wiLFxuXHRcdENISU5FU0U6IFwiemhfQ05cIixcblx0XHRTUEFOSVNIOiBcImVzX0VTXCIsXG5cdFx0UE9SVFVHVUVTRTogXCJwdF9CUlwiLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBVcGxvYWQgZG9jdW1lbnRhcnkgcHJvb2Ygb2YgaWRlbnRpdHkgZm9yIGEge0BsaW5rIFVzZXJ9LlxuXHQgKiBAcGFyYW0gaW1hZ2UgQSBiYXNlNjQgaW1hZ2Ugc3RyaW5nIG9yIGZpbGVcblx0ICovXG5cdHN0YXRpYyBjcmVhdGUodXNlcklEOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgaW1hZ2U6IHN0cmluZyB8IEZpbGUpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAodHlwZW9mIGltYWdlID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRcdGVuZHBvaW50OiBcIi9kb2N1bWVudHNcIixcblx0XHRcdFx0Ym9keToge1xuXHRcdFx0XHRcdHVzZXJJRCxcblx0XHRcdFx0XHR0eXBlLFxuXHRcdFx0XHRcdGRvY3VtZW50OiBpbWFnZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0YWRkbEhlYWRlcnM6IHtcblx0XHRcdFx0XHRBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGJvZHkgPSBuZXcgRm9ybURhdGEoKTtcblxuXHRcdGJvZHkuYXBwZW5kKFwidXNlcklEXCIsIHVzZXJJRCk7XG5cdFx0Ym9keS5hcHBlbmQoXCJkb2N1bWVudFR5cGVcIiwgdHlwZSk7XG5cdFx0Ym9keS5hcHBlbmQoXCJkb2N1bWVudEltYWdlXCIsIGltYWdlKTtcblxuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRlbmRwb2ludDogXCIvZG9jdW1lbnRzXCIsXG5cdFx0XHRib2R5LFxuXHRcdFx0YWRkbEhlYWRlcnM6IHtcblx0XHRcdFx0XCJDb250ZW50LVR5cGVcIjogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsXG5cdFx0XHR9LFxuXHRcdH0pLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgZGV0YWlscyBhYm91dCBhIGRvY3VtZW50LlxuXHQgKi9cblx0c3RhdGljIGdldChkb2N1bWVudElEOiBzdHJpbmcpOiBQcm9taXNlPERvY3VtZW50PiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0ZW5kcG9pbnQ6IFwiL2RvY3VtZW50cy9cIiArIGRvY3VtZW50SUQsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGRvY3VtZW50cyB0aGF0IGJlbG9uZyB0byBhIHtAbGluayBVc2VyfVxuXHQgKi9cblx0c3RhdGljIGdldEJ5VXNlcklEKHVzZXJJRDogc3RyaW5nKTogUHJvbWlzZTxBcnJheTxEb2N1bWVudD4+IHtcblx0XHRyZXR1cm4gVXNlci5nZXREb2N1bWVudHModXNlcklEKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYmFjayBhIHRlbXBvcmFyeSBVUkwgdG8gYWNjZXNzIHRoZSBmaWxlLiBBY2Nlc3Mgd2lsbCB0aW1lb3V0IGFmdGVyIDUgbWludXRlcy5cblx0ICovXG5cdHN0YXRpYyBnZXRVUkwoZG9jdW1lbnRJRDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRlbmRwb2ludDogYC9kb2N1bWVudHMvJHtkb2N1bWVudElEfS91cmxgLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkudXJsKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgZGV0YWlscyBhYm91dCBhbGwgZG9jdW1lbnRzIGluIHRoZSBxdWV1ZS5cblx0ICovXG5cdHN0YXRpYyBnZXRQZW5kaW5nQ291bnRzKCk6IFByb21pc2U8QXJyYXk8UGVuZGluZ0NvdW50Pj4ge1xuXHRcdHJldHVybiBnZXRQZW5kaW5nQ291bnRzKFwiZG9jdW1lbnRzXCIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBwZW5kaW5nIGRvY3VtZW50cyBmb3IgYSB7QGxpbmsgVXNlcn0gaW4gdGhlIHF1ZXVlLlxuXHQgKiBAcGFyYW0gcXVlcnkgZWl0aGVyIGEgdXNlcklEIHN0cmluZyBvciBhbiBhcnJheSBvZiBsYW5ndWFnZSBJRHNcblx0ICovXG5cdHN0YXRpYyBnZXRQZW5kaW5nKHF1ZXJ5OiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nKTogUHJvbWlzZTxQZW5kaW5nRG9jdW1lbnRzPiB7XG5cdFx0cmV0dXJuIGdldFBlbmRpbmcoXCJuZXh0UGVuZGluZ1wiLCBxdWVyeSk7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlIGEge0BsaW5rIFVzZXJ9J3MgZG9jdW1lbnQgbGFuZ3VhZ2UuXG5cdCAqL1xuXHRzdGF0aWMgdXBkYXRlTGFuZ3VhZ2UodXNlcklEOiBzdHJpbmcsIGxhbmd1YWdlSUQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IFwiL2RvY3VtZW50cy91cGRhdGVMYW5ndWFnZVwiLFxuXHRcdFx0Ym9keToge1xuXHRcdFx0XHR1c2VySUQsXG5cdFx0XHRcdGxhbmd1YWdlSUQsXG5cdFx0XHR9LFxuXHRcdH0pLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBcHByb3ZlIG9yIHJlamVjdCBhIHtAbGluayBVc2VyfSdzIGRvY3VtZW50cy5cblx0ICovXG5cdHN0YXRpYyByZXZpZXcoXG5cdFx0dXNlcklEOiBzdHJpbmcsXG5cdFx0cmV2aWV3ZXJVc2VySUQ6IHN0cmluZyxcblx0XHRkb2N1bWVudHM6IEFycmF5PFJldmlld2VkRG9jdW1lbnQ+LFxuXHQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRtZXRob2Q6IFwiUE9TVFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IFwiL2RvY3VtZW50cy9yZXZpZXdcIixcblx0XHRcdGJvZHk6IHtcblx0XHRcdFx0dXNlcklELFxuXHRcdFx0XHRhcHByb3ZlZEJ5VXNlcklEOiByZXZpZXdlclVzZXJJRCxcblx0XHRcdFx0ZG9jdW1lbnRzLFxuXHRcdFx0fSxcblx0XHR9KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG5cdH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL0RvY3VtZW50LmpzIiwiLy8gQGZsb3dcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuLi9tb2R1bGVzL3JlcXVlc3RcIjtcblxuZXhwb3J0IGNvbnN0IGdldFBlbmRpbmdDb3VudHMgPSAocGF0aDogc3RyaW5nKSA9PiByZXF1ZXN0KHtcblx0ZW5kcG9pbnQ6IGAvJHtwYXRofS9nZXRQZW5kaW5nQ291bnRzYCxcbn0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXG5leHBvcnQgY29uc3QgZ2V0UGVuZGluZyA9IChwYXRoOiBzdHJpbmcsIHF1ZXJ5OiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nKSA9PiB7XG5cdGNvbnN0IHF1ZXJ5U3RyaW5nID0gQXJyYXkuaXNBcnJheShxdWVyeSkgP1xuXHRcdGBsYW5ndWFnZUxpc3Q9JHtxdWVyeS5qb2luKFwiLFwiKX1gIDpcblx0XHRgdXNlcklEPSR7cXVlcnl9YDtcblxuXHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0ZW5kcG9pbnQ6IGAvdXNlcnMvJHtwYXRofT8ke3F1ZXJ5U3RyaW5nfWAsXG5cdH0pLnRoZW4oZGF0YSA9PiBPYmplY3QuYXNzaWduKHt9LCBkYXRhLmJvZHksIHtcblx0XHR0dGw6IE51bWJlcihkYXRhLmhlYWRlcnNbXCJkdy1yZXZpZXdlci10dGxcIl0pLFxuXHR9KSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2ludGVybmFsL2RvY3VtZW50cy5qcyIsIi8vIEBmbG93XG5pbXBvcnQgcmVxdWVzdCBmcm9tIFwiLi9yZXF1ZXN0XCI7XG5pbXBvcnQgdHlwZSB7XG5cdEluc3RydW1lbnRCYXNpYyxcblx0SW5zdHJ1bWVudENyZWF0ZURldGFpbHMsXG5cdENvcnBvcmF0ZUFjdGlvbkV2ZW50VHlwZXMsXG59IGZyb20gXCIuLi90eXBlcy9JbnN0cnVtZW50XCI7XG5cbi8qKlxuICogQG1vZHVsZVxuICogQGRlc2NyaXB0aW9uIEluc3RydW1lbnRzIGFyZSB0aGUgaW52ZXN0bWVudCBwcm9kdWN0cyBhdmFpbGFibGUgdG8gYnV5IGFuZCBzZWxsXG4gKiBvbiB0aGUgRHJpdmVXZWFsdGggcGxhdGZvcm0uXG4gKiBAZXhhbXBsZSBpbXBvcnQgeyBJbnN0cnVtZW50IH0gZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5zdHJ1bWVudCB7XG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBuZXcgaW5zdHJ1bWVudCBmcm9tIGluc3RydW1lbnQgZGF0YS5cblx0ICovXG5cdHN0YXRpYyBjcmVhdGUoZGV0YWlsczogSW5zdHJ1bWVudENyZWF0ZURldGFpbHMpOiBQcm9taXNlPEluc3RydW1lbnQ+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRtZXRob2Q6IFwiUE9TVFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IFwiL2luc3RydW1lbnRzXCIsXG5cdFx0XHRib2R5OiBkZXRhaWxzLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBkZXRhaWxzIG9uIGEgcGFydGljdWxhciBpbnN0cnVtZW50LlxuXHQgKi9cblx0c3RhdGljIGdldChpbnN0cnVtZW50SUQ6IHN0cmluZyk6IFByb21pc2U8SW5zdHJ1bWVudD4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgL2luc3RydW1lbnRzLyR7aW5zdHJ1bWVudElEfWAsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGVkaXQoXG5cdFx0aW5zdHJ1bWVudElEOiBzdHJpbmcsXG5cdFx0ZGV0YWlsczogSW5zdHJ1bWVudENyZWF0ZURldGFpbHMsXG5cdCk6IFByb21pc2U8SW5zdHJ1bWVudD4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvaW5zdHJ1bWVudHMvJHtpbnN0cnVtZW50SUR9YCxcblx0XHRcdGJvZHk6IGRldGFpbHMsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogTGlzdCBhbGwgaW5zdHJ1bWVudHMuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0QWxsKCk6IFByb21pc2U8QXJyYXk8SW5zdHJ1bWVudEJhc2ljPj4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBcIi9pbnN0cnVtZW50c1wiLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBnZXRDb3Jwb3JhdGVBY3Rpb25FdmVudFR5cGVzKCk6IFByb21pc2U8Q29ycG9yYXRlQWN0aW9uRXZlbnRUeXBlcz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBcIi9pbnN0cnVtZW50cy9jb3Jwb3JhdGVBY3Rpb25FdmVudFR5cGVzXCIsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHRzdGF0aWMgZm9ybWF0VmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuXHRcdHN3aXRjaCAoa2V5KSB7XG5cdFx0XHRjYXNlIFwic3RhcnREYXRlXCI6XG5cdFx0XHRjYXNlIFwiZW5kRGF0ZVwiOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldENvcnBvcmF0ZUFjdGlvbnMocXVlcnk6IHtcblx0XHRzeW1ib2xzPzogQXJyYXk8c3RyaW5nPixcblx0XHRldmVudFR5cGVzPzogQXJyYXk8c3RyaW5nPixcblx0XHRzdGFydERhdGU/OiBEYXRlLFxuXHRcdGVuZERhdGU/OiBEYXRlLFxuXHR9ID0ge30pIHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRlbmRwb2ludDogXCIvaW5zdHJ1bWVudHMvY29ycG9yYXRlQWN0aW9ucz9cIiArIE9iamVjdC5rZXlzKHF1ZXJ5KVxuXHRcdFx0XHQucmVkdWNlKCh4LCB5KSA9PiBbLi4ueCwgYCR7eX09JHtJbnN0cnVtZW50LmZvcm1hdFZhbHVlKHksIHF1ZXJ5W3ldKX1gXSwgW10pXG5cdFx0XHRcdC5qb2luKFwiJlwiKSxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvSW5zdHJ1bWVudC5qcyIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7XG5cdFRyYW5zYWN0aW9uVHlwZSxcblx0VHJhbnNhY3Rpb25UeXBlTGlzdCxcblx0VHJhbnNhY3Rpb25DcmVhdGVSZXNwb25zZSxcblx0VHJhbnNhY3Rpb25EZXRhaWxzLFxuXHRUcmFuc2FjdGlvbkJhdGNoUmVzcG9uc2UsXG5cdFBhZ2luYXRpb25PcHRpb25zLFxufSBmcm9tIFwiLi4vdHlwZXMvVHJhbnNhY3Rpb25cIjtcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcblxuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZGVzY3JpcHRpb24gVHJhbnNhY3Rpb25zIGhhdmUgdW5pcXVlIHR5cGVzLlxuICogQGV4YW1wbGUgaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tIFwiZHJpdmV3ZWFsdGgtYmFjay1vZmZpY2UtamF2YXNjcmlwdFwiO1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2FjdGlvbiB7XG5cdC8qKlxuXHQgKiBUcmFuc2FjdGlvbiB0eXBlcyBpbmNsdWRlIGRlcG9zaXRzLCB3aXRoZHJhd2Fscywgam91cm5hbHMgYW5kIGZlZXMuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0QWxsVHJhbnNhY3Rpb25UeXBlcygpOiBQcm9taXNlPEFycmF5PFRyYW5zYWN0aW9uVHlwZUxpc3Q+PiB7XG5cdFx0cmV0dXJuIHJlcXVlc3QoeyBlbmRwb2ludDogXCIvdHJhbnNhY3Rpb25zL3R5cGVzXCIgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGJhY2sgb25seSByZWxldmFudCBUcmFuc2FjdGlvbiBUeXBlcyBieSBzcGVjaWZ5aW5nIGEgd2xwSUQuXG5cdCAqL1xuXHRzdGF0aWMgZ2V0VHJhbnNhY3Rpb25UeXBlcyh3bHBJRDogc3RyaW5nID0gXCJEV1wiKTogUHJvbWlzZTxBcnJheTxUcmFuc2FjdGlvblR5cGU+PiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0ZW5kcG9pbnQ6IGAvdHJhbnNhY3Rpb25zL3R5cGVzP3dscElEPSR7d2xwSUR9YCxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5WzBdLnR5cGVzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBuZXcgVHJhbnNhY3Rpb24uXG5cdCAqL1xuXHRzdGF0aWMgY3JlYXRlKGFjY291bnRJRDogc3RyaW5nLCBkZXRhaWxzOiB7XG5cdFx0YW1vdW50OiBudW1iZXIsXG5cdFx0Y29tbWVudDogc3RyaW5nLFxuXHRcdHNvdXJjZTogc3RyaW5nLFxuXHRcdHdscEZpblRyYW5UeXBlSUQ6IHN0cmluZyxcblx0fSk6IFByb21pc2U8VHJhbnNhY3Rpb25DcmVhdGVSZXNwb25zZT4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRlbmRwb2ludDogYC9hY2NvdW50cy8ke2FjY291bnRJRH0vdHJhbnNhY3Rpb25zYCxcblx0XHRcdGJvZHk6IGRldGFpbHMsXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRyYW5zYWN0aW9ucyBieSBhY2NvdW50IGFuZCBkYXRlLlxuXHQgKi9cblx0c3RhdGljIGdldChcblx0XHRhY2NvdW50SUQ6IHN0cmluZyxcblx0XHRzdGFydERhdGU6IERhdGUsXG5cdFx0ZW5kRGF0ZTogRGF0ZSxcblx0XHRvcHRpb25zPzogUGFnaW5hdGlvbk9wdGlvbnMsXG5cdCk6IFByb21pc2U8QXJyYXk8VHJhbnNhY3Rpb25EZXRhaWxzPj4ge1xuXHRcdGNvbnN0IGJhc2UgPSBgL2FjY291bnRzLyR7YWNjb3VudElEfS90cmFuc2FjdGlvbnNgO1xuXHRcdGNvbnN0IGRhdGVSYW5nZSA9IGA/ZnJvbT0ke3N0YXJ0RGF0ZS50b0lTT1N0cmluZygpfSZ0bz0ke2VuZERhdGUudG9JU09TdHJpbmcoKX1gO1xuXHRcdGxldCBsaW1pdDtcblx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxpbWl0KSB7XG5cdFx0XHRsaW1pdCA9IG9wdGlvbnMubGltaXQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxpbWl0ID0gNDA7XG5cdFx0fVxuXHRcdGNvbnN0IGxpbWl0UGFyYW0gPSBgJmxpbWl0PSR7bGltaXR9YDtcblx0XHRsZXQgdXJsID0gYmFzZSArIGRhdGVSYW5nZSArIGxpbWl0UGFyYW07XG5cblx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRpcmVjdGlvbiAmJiBvcHRpb25zLm9mZnNldCkge1xuXHRcdFx0dXJsICs9IGAmb2Zmc2V0PSR7b3B0aW9ucy5vZmZzZXR9JmRpcmVjdGlvbj0ke29wdGlvbnMuZGlyZWN0aW9ufWA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlcXVlc3QoeyBlbmRwb2ludDogdXJsIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBiYXRjaCh0cmFuc2FjdGlvbnM6IEFycmF5PHtcblx0XHRhY2NvdW50Tm86IHN0cmluZyxcblx0XHR0cmFuc2FjdGlvblR5cGU6IHN0cmluZyxcblx0XHRiYXRjaENvZGU6IHN0cmluZyxcblx0XHRhbW91bnQ6IG51bWJlcixcblx0XHRjb21tZW50OiBzdHJpbmcsXG5cdH0+KTogUHJvbWlzZTxBcnJheTxUcmFuc2FjdGlvbkJhdGNoUmVzcG9uc2U+PiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIlBPU1RcIixcblx0XHRcdGVuZHBvaW50OiBcIi90cmFuc2FjdGlvbnMvYmF0Y2hcIixcblx0XHRcdGJvZHk6IHRyYW5zYWN0aW9ucyxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvVHJhbnNhY3Rpb24uanMiLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBPcmRlckNyZWF0ZURldGFpbHMsIE9yZGVyQ3JlYXRlUmVzcG9uc2UgfSBmcm9tIFwiLi4vdHlwZXMvT3JkZXJcIjtcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcbmltcG9ydCBBY2NvdW50IGZyb20gXCIuL0FjY291bnRcIjtcbmltcG9ydCB7IERyaXZlV2VhbHRoRXJyb3IgfSBmcm9tIFwiLi9FcnJvclwiO1xuXG4vKipcbiAqIEBtb2R1bGVcbiAqIEBleGFtcGxlIGltcG9ydCB7IE9yZGVyIH0gZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JkZXIge1xuXHQvKipcblx0ICogQGNvbnN0YW50XG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBNQVJLRVRcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IExJTUlUXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBTVE9QXG5cdCAqL1xuXHRzdGF0aWMgVFlQRVMgPSB7XG5cdFx0TUFSS0VUOiBcIk1BUktFVFwiLFxuXHRcdExJTUlUOiBcIkxJTUlUXCIsXG5cdFx0U1RPUDogXCJTVE9QXCIsXG5cdH07XG5cblx0LyoqXG5cdCAqIEBjb25zdGFudFxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gQlVZXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBTRUxMXG5cdCAqL1xuXHRzdGF0aWMgU0lERVMgPSB7XG5cdFx0QlVZOiBcIkJVWVwiLFxuXHRcdFNFTEw6IFwiU0VMTFwiLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBtYW51YWwgZW50cnkgb3JkZXIgZm9yIGEgcGFydGljdWxhciBhY2NvdW50LlxuXHQgKi9cblx0c3RhdGljIGNyZWF0ZShcblx0XHRhY2NvdW50OiB7XG5cdFx0XHRhY2NvdW50SUQ6IHN0cmluZyxcblx0XHRcdGFjY291bnRObzogc3RyaW5nLFxuXHRcdH0sXG5cdFx0b3JkZXI6IE9yZGVyQ3JlYXRlRGV0YWlscyxcblx0XHRvcHRpb25zOiB7XG5cdFx0XHR3YWl0Rm9yRmlsbD86IGJvb2xlYW4sXG5cdFx0XHRmaWxsUmV0cnlJbnRlcnZhbDogbnVtYmVyLFxuXHRcdFx0ZmlsbE1heFJldHJpZXM6IG51bWJlcixcblx0XHR9ID0ge1xuXHRcdFx0d2FpdEZvckZpbGw6IHRydWUsXG5cdFx0XHRmaWxsUmV0cnlJbnRlcnZhbDogMTAwMCxcblx0XHRcdGZpbGxNYXhSZXRyaWVzOiAxMCxcblx0XHR9LFxuXHQpOiBQcm9taXNlPE9yZGVyQ3JlYXRlUmVzcG9uc2U+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0cmVxdWVzdCh7XG5cdFx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRcdGVuZHBvaW50OiBcIi9vcmRlcnNcIixcblx0XHRcdFx0Ym9keToge1xuXHRcdFx0XHRcdGFjY291bnRObzogYWNjb3VudC5hY2NvdW50Tm8sXG5cdFx0XHRcdFx0Li4ub3JkZXIsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KS50aGVuKGRhdGEgPT4ge1xuXHRcdFx0XHRjb25zdCBvcmRlciA9IGRhdGEuYm9keTtcblxuXHRcdFx0XHRpZiAob3B0aW9ucy53YWl0Rm9yRmlsbCkge1xuXHRcdFx0XHRcdGNvbnN0IGNoZWNrU3VtbWFyeSA9ICgpID0+IHtcblx0XHRcdFx0XHRcdG9wdGlvbnMuZmlsbE1heFJldHJpZXMtLTtcblxuXHRcdFx0XHRcdFx0QWNjb3VudC5nZXRCbG90dGVyKGFjY291bnQuYWNjb3VudElEKS50aGVuKHN1bW1hcnkgPT4ge1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHRyYW5zYWN0aW9uIG9mIHN1bW1hcnkudHJhbnNhY3Rpb25zKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRyYW5zYWN0aW9uLm9yZGVySWQgPT09IG9yZGVyLm9yZGVySUQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGlzUmVqZWN0ZWQ6IGJvb2xlYW4gPSB0cmFuc2FjdGlvbi5vcmRlclN0YXR1cyA9PSBcIjhcIjtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGlzRmlsbGVkOiBib29sZWFuID0gdHJhbnNhY3Rpb24ub3JkZXJTdGF0dXMgPT0gXCIyXCI7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBub3RNYXJrZXQ6IGJvb2xlYW4gPSB0cmFuc2FjdGlvbi5vcmRlclR5cGUgIT0gXCIxXCI7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChpc1JlamVjdGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxldCBlcnJvckNvZGUgPSBcIi0xXCI7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gcmVqZWN0aW9uIHJlYXNvblwiO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCByZWFzb246IHN0cmluZyA9IHRyYW5zYWN0aW9uLnVwZGF0ZWRSZWFzb247XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGVycm9yID0gcmVhc29uLm1hdGNoKC9eXFxzKigtP1xcZCspICguKykkLyk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoZXJyb3IpICYmIGVycm9yWzFdICYmIGVycm9yWzJdKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDb2RlID0gZXJyb3JbMV07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gZXJyb3JbMl07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBEcml2ZVdlYWx0aEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yTWVzc2FnZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkYXRhLmJvZHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGF0YS5zdGF0dXNDb2RlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRhdGEuaGVhZGVycyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNvZGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCkpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpc0ZpbGxlZCB8fCBub3RNYXJrZXQgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5maWxsTWF4UmV0cmllcyA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBvcmRlckRldGFpbHMgPSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Li4ub3JkZXIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Li4udHJhbnNhY3Rpb24sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVsZXRlIG9yZGVyRGV0YWlscy5vcmRlcklkO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXNvbHZlKG9yZGVyRGV0YWlscyk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyBPbmx5IHJlYWNoZWQgaWYgdGhlIG9yZGVyIHdhc24ndCBmb3VuZFxuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5maWxsTWF4UmV0cmllcyA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZWplY3QobmV3IERyaXZlV2VhbHRoRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFx0XHRgTm8gZGV0YWlscyBmb3VuZCBmb3IgT3JkZXIgTm86ICR7b3JkZXIub3JkZXJOb31gLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YS5ib2R5LFxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YS5zdGF0dXNDb2RlLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YS5oZWFkZXJzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XCItMVwiLFxuXHRcdFx0XHRcdFx0XHRcdCkpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoY2hlY2tTdW1tYXJ5LCBvcHRpb25zLmZpbGxSZXRyeUludGVydmFsKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSkuY2F0Y2gocmVqZWN0KTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Y2hlY2tTdW1tYXJ5KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc29sdmUob3JkZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KS5jYXRjaChyZWplY3QpO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIE1ha2UgY2hhbmdlcyB0byBhbiBvcmRlci5cblx0ICovXG5cdHN0YXRpYyByZWNvbmNpbGUob3JkZXJJRDogc3RyaW5nLCBkZXRhaWxzOiA/T3JkZXJDcmVhdGVEZXRhaWxzKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIlBVVFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvb3JkZXJzLyR7b3JkZXJJRH1gLFxuXHRcdFx0Ym9keTogZGV0YWlscyxcblx0XHR9KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG5cdH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL09yZGVyLmpzIiwiLy8gQGZsb3dcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcbmltcG9ydCB0eXBlIHsgQ29tbWlzc2lvbkdyb3VwIH0gZnJvbSBcIi4uL3R5cGVzL0NvbW1pc3Npb25cIjtcblxuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZXhhbXBsZSBpbXBvcnQgeyBDb21taXNzaW9uIH0gZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbWlzc2lvbiB7XG5cdC8qKlxuXHQgKiBMaXN0IGFsbCBhdmFpbGFibGUgY29tbWlzc2lvbiBncm91cHNcblx0ICovXG5cdHN0YXRpYyBnZXRBbGxDb21taXNzaW9uR3JvdXBzKCk6IFByb21pc2U8QXJyYXk8Q29tbWlzc2lvbkdyb3VwPj4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBcIi9jb21taXNzaW9uc1wiLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkuY29tbWlzc2lvbkdyb3Vwcyk7XG5cdH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL0NvbW1pc3Npb24uanMiLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBSZXBvcnRUaWNrZXQsIFJlcG9ydFZpb2xhdGlvbnMsIEV4dHJhRmllbGRzLCBSZXBvcnRGaWxlIH0gZnJvbSBcIi4uL3R5cGVzL1JlcG9ydHNcIjtcbmltcG9ydCBTZXNzaW9ucyBmcm9tIFwiLi4vaW50ZXJuYWwvU2Vzc2lvbnNcIjtcbmltcG9ydCB7IENvbmZpZywgSE9TVFMgfSBmcm9tIFwiLi9Db25maWdcIjtcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcblxuLy8gVGhpcyBkZWZpbml0aW9uIHRlbGxzIGZsb3cgdGhhdCB0aGVyZSBpcyBhIGdsb2JhbCBcImRvY3VtZW50XCIgYWNjZXNzaWJsZSBpbiBhIGJyb3dzZXJcbmRlY2xhcmUgdmFyIGRvY3VtZW50OiBPYmplY3Q7XG5cbi8qKlxuICogQG1vZHVsZVxuICogQGV4YW1wbGUgaW1wb3J0IHsgUmVwb3J0cyB9IGZyb20gXCJkcml2ZXdlYWx0aC1iYWNrLW9mZmljZS1qYXZhc2NyaXB0XCI7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcG9ydHMge1xuXHQvKipcblx0ICogQGNvbnN0YW50XG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBQREZcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFhMU1xuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gSlNPTlxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gSFRNTFxuXHQgKi9cblx0c3RhdGljIFJFUE9SVF9GT1JNQVRTID0ge1xuXHRcdFBERjogXCJQREZcIixcblx0XHRYTFM6IFwiWExTXCIsXG5cdFx0SlNPTjogXCJKU09OXCIsXG5cdFx0SFRNTDogXCJIVE1MXCIsXG5cdH07XG5cblx0LyoqXG5cdCAqIEBjb25zdGFudFxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gUkVTVFJJQ1RFRFxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gQUNDT1VOVF9WSU9MQVRJT05TXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBUSUNLRVRfQVVESVRcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFJFQ09OQ0lMSUFUSU9OXG5cdCAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBUUkFOU0FDVElPTlxuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gUE9TSVRJT05TX0FORF9PUkRFUlNcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFBPU0lUSU9OU1xuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gUExBQ0VEX09SREVSU1xuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gUkVGRVJSRURfQUNDT1VOVFNcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IEZJTkFOQ0lBTFNcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IENPUlJFU1BPTkRFTlRcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IFNUQVRFTUVOVFNcblx0ICogQHByb3BlcnR5IHtzdHJpbmd9IENPTkZJUk1TXG5cdCAqL1xuXHRzdGF0aWMgUkVQT1JUX05BTUVTID0ge1xuXHRcdFJFU1RSSUNURUQ6IFwiUmVzdHJpY3RlZFJlcG9ydFwiLFxuXHRcdEFDQ09VTlRfVklPTEFUSU9OUzogXCJBY2NvdW50VmlvbGF0aW9uc1wiLFxuXHRcdFRJQ0tFVF9BVURJVDogXCJUaWNrZXRBdWRpdFwiLFxuXHRcdFJFQ09OQ0lMSUFUSU9OOiBcIkVvZE5vdGlmaWNhdGlvblwiLFxuXHRcdFRSQU5TQUNUSU9OOiBcIkVvZFRyYW5zYWN0aW9uXCIsXG5cdFx0UE9TSVRJT05TX0FORF9PUkRFUlM6IFwiUG9zaXRpb25SZXN0aW5nT3JkZXJcIixcblx0XHRQT1NJVElPTlM6IFwiUG9zaXRpb25EZXRhaWxcIixcblx0XHRQTEFDRURfT1JERVJTOiBcIk9yZGVyVHJhbnNcIixcblx0XHRSRUZFUlJFRF9BQ0NPVU5UUzogXCJBY2NvdW50XCIsXG5cdFx0RklOQU5DSUFMUzogXCJBY2NvdW50Rmluc1wiLFxuXHRcdENPUlJFU1BPTkRFTlQ6IFwiY29ycmVzcG9uZGFudFJlcG9ydFwiLFxuXHRcdFNUQVRFTUVOVFM6IFwic3RhdGVtZW50c1wiLFxuXHRcdENPTkZJUk1TOiBcImNvbmZpcm1zXCIsXG5cdH07XG5cblx0c3RhdGljIGNvbnN0cnVjdEJvZHkgPSAoZm9ybWF0OiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZXh0cmFGaWVsZHM6ID9FeHRyYUZpZWxkcykgPT4gKHtcblx0XHRSZXBvcnRGb3JtYXQ6IGZvcm1hdCxcblx0XHRSZXBvcnROYW1lOiBuYW1lLFxuXHRcdHNlc3Npb25LZXk6IFNlc3Npb25zLmdldCgpLFxuXHRcdFdscElEOiBcIkRXXCIsXG5cdFx0TGFuZ3VhZ2VJRDogXCJlbl9VU1wiLFxuXHRcdC4uLmV4dHJhRmllbGRzLFxuXHR9KTtcblxuXHQvKipcblx0ICogRG93bmxvYWQgYSBzcGVjaWZpYyByZXBvcnQuXG5cdCAqIEBwYXJhbSBmb3JtYXQgUmVwb3J0IFtmaWxlIHR5cGVdKCNSZXBvcnRzLlJFUE9SVF9GT1JNQVRTKVxuXHQgKiBAcGFyYW0gbmFtZSBSZXBvcnQgW25hbWVdKCNSZXBvcnRzLlJFUE9SVF9OQU1FUylcblx0ICogQHBhcmFtIGV4dHJhRmllbGRzIE9wdGlvbmFsbHkgZmlsdGVyIHRoZSByZXBvcnQgd2l0aCBbZXh0cmEgcHJvcGVydGllc10oI2V4dHJhZmllbGRzKVxuXHQgKi9cblx0c3RhdGljIGRvd25sb2FkUmVwb3J0KGZvcm1hdDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGV4dHJhRmllbGRzOiA/T2JqZWN0KTogdm9pZCB7XG5cdFx0Y29uc3QgZmllbGRzID0gUmVwb3J0cy5jb25zdHJ1Y3RCb2R5KGZvcm1hdCwgbmFtZSwgZXh0cmFGaWVsZHMpO1xuXG5cdFx0Y29uc3QgdXJsID0gQ29uZmlnLmVudltIT1NUUy5SRVBPUlRTXSArIFwiL0RyaXZlV2VhbHRoXCI7XG5cblx0XHRjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG5cdFx0Zm9ybS5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIiwgXCJfYmxhbmtcIik7XG5cdFx0Zm9ybS5zZXRBdHRyaWJ1dGUoXCJtZXRob2RcIiwgXCJwb3N0XCIpO1xuXHRcdGZvcm0uc2V0QXR0cmlidXRlKFwiYWN0aW9uXCIsIHVybCk7XG5cblx0XHRmb3IgKGNvbnN0IGZpZWxkIGluIGZpZWxkcykge1xuXHRcdFx0Y29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIGZpZWxkKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGZpZWxkc1tmaWVsZF0pO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImhpZGRlblwiKTtcblx0XHRcdGZvcm0uYXBwZW5kQ2hpbGQoaW5wdXQpO1xuXHRcdH1cblxuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cdFx0Zm9ybS5zdWJtaXQoKTtcblx0XHRmb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZm9ybSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHNwZWNpZmljIHJlcG9ydCBkYXRhLlxuXHQgKiBAcGFyYW0gbmFtZSBSZXBvcnQgW25hbWVdKCNSZXBvcnRzLlJFUE9SVF9OQU1FUylcblx0ICogQHBhcmFtIGV4dHJhRmllbGRzIE9wdGlvbmFsbHkgZmlsdGVyIHRoZSByZXBvcnQgd2l0aCBbZXh0cmEgcHJvcGVydGllc10oI2V4dHJhZmllbGRzKVxuXHQgKi9cblx0c3RhdGljIGdldFJlcG9ydChuYW1lOiBzdHJpbmcsIGV4dHJhRmllbGRzOiA/T2JqZWN0KTogUHJvbWlzZTxhbnk+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRtZXRob2Q6IFwiUE9TVFwiLFxuXHRcdFx0aG9zdDogSE9TVFMuUkVQT1JUUyxcblx0XHRcdGVuZHBvaW50OiBcIi9Ecml2ZVdlYWx0aFwiLFxuXHRcdFx0Ym9keTogUmVwb3J0cy5jb25zdHJ1Y3RCb2R5KFJlcG9ydHMuUkVQT1JUX0ZPUk1BVFMuSlNPTiwgbmFtZSwgZXh0cmFGaWVsZHMpLFxuXHRcdFx0YXV0aGVudGljYXRlZDogZmFsc2UsXG5cdFx0XHR1c2VzQXBwS2V5OiBmYWxzZSxcblx0XHRcdGFkZGxIZWFkZXJzOiB7XG5cdFx0XHRcdFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG5cdFx0XHR9LFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBsaXN0RmlsZXMoXG5cdFx0YWNjb3VudElEOiBzdHJpbmcsXG5cdFx0cmVwb3J0TmFtZTogc3RyaW5nLFxuXHRcdGRhdGVTdGFydDogc3RyaW5nLFxuXHRcdGRhdGVFbmQ6IHN0cmluZyxcblx0KTogUHJvbWlzZTxBcnJheTxSZXBvcnRGaWxlPj4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgL2FjY291bnRzLyR7YWNjb3VudElEfS8ke3JlcG9ydE5hbWV9P2Zyb209JHtkYXRlU3RhcnR9JnRvPSR7ZGF0ZUVuZH1gLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHN0YXRpYyBnZXRGaWxlVVJMKGFjY291bnRJRDogc3RyaW5nLCBmaWxlS2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgLyR7UmVwb3J0cy5SRVBPUlRfTkFNRVMuU1RBVEVNRU5UU30vJHthY2NvdW50SUR9LyR7ZmlsZUtleX1gLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkudXJsKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZG93bmxvYWRSZXN0cmljdGVkUmVwb3J0KGZpbGVUeXBlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRSZXBvcnRzLmRvd25sb2FkUmVwb3J0KGZpbGVUeXBlLCBSZXBvcnRzLlJFUE9SVF9OQU1FUy5SRVNUUklDVEVELCB7XG5cdFx0XHRzdWJzY3JpcHRpb246IHRydWUsXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGRvd25sb2FkQWNjb3VudFZpb2xhdGlvbnMoZmlsZVR5cGU6IHN0cmluZywgVHJhZGluZ1R5cGU6IHN0cmluZywgZGF0ZTogRGF0ZSk6IHZvaWQge1xuXHRcdFJlcG9ydHMuZG93bmxvYWRSZXBvcnQoZmlsZVR5cGUsIFJlcG9ydHMuUkVQT1JUX05BTUVTLkFDQ09VTlRfVklPTEFUSU9OUywge1xuXHRcdFx0VHJhZGluZ1R5cGUsXG5cdFx0XHREYXRlOiBkYXRlLnRvSVNPU3RyaW5nKCksXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldEFjY291bnRWaW9sYXRpb25zKFRyYWRpbmdUeXBlOiBzdHJpbmcsIGRhdGU6IERhdGUpOiBQcm9taXNlPEFycmF5PFJlcG9ydFZpb2xhdGlvbnM+PiB7XG5cdFx0cmV0dXJuIFJlcG9ydHMuZ2V0UmVwb3J0KFJlcG9ydHMuUkVQT1JUX05BTUVTLkFDQ09VTlRfVklPTEFUSU9OUywge1xuXHRcdFx0VHJhZGluZ1R5cGUsXG5cdFx0XHREYXRlOiBkYXRlLnRvSVNPU3RyaW5nKCksXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGRvd25sb2FkVGlja2V0QXVkaXQoZmlsZVR5cGU6IHN0cmluZywgT3JkZXJObzogc3RyaW5nKTogdm9pZCB7XG5cdFx0UmVwb3J0cy5kb3dubG9hZFJlcG9ydChmaWxlVHlwZSwgUmVwb3J0cy5SRVBPUlRfTkFNRVMuVElDS0VUX0FVRElULCB7XG5cdFx0XHRPcmRlck5vOiBPcmRlck5vLnRvVXBwZXJDYXNlKCksXG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGdldFRpY2tldEF1ZGl0KE9yZGVyTm86IHN0cmluZyk6IFByb21pc2U8QXJyYXk8UmVwb3J0VGlja2V0Pj4ge1xuXHRcdHJldHVybiBSZXBvcnRzLmdldFJlcG9ydChSZXBvcnRzLlJFUE9SVF9OQU1FUy5USUNLRVRfQVVESVQsIHtcblx0XHRcdE9yZGVyTm86IE9yZGVyTm8udG9VcHBlckNhc2UoKSxcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0Q29ycmVzcG9uZGFudChkYXRlOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgLyR7UmVwb3J0cy5SRVBPUlRfTkFNRVMuQ09SUkVTUE9OREVOVH0/ZGF0ZT0ke2RhdGV9YCxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5LnVybCk7XG5cdH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL1JlcG9ydHMuanMiLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBNb25leU1vdmVtZW50RGV0YWlscywgUGF0Y2hCb2R5IH0gZnJvbSBcIi4uL3R5cGVzL01vbmV5TW92ZW1lbnRcIjtcbmltcG9ydCB0eXBlIHsgUGFnaW5hdGlvbk9wdGlvbnMgfSBmcm9tIFwiLi4vdHlwZXMvVHJhbnNhY3Rpb25cIjtcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuL3JlcXVlc3RcIjtcblxuLyoqXG4gKiBAY2xhc3MgTW9uZXlNb3ZlbWVudFxuICogQGRlc2NyaXB0aW9uIGFsbG93IGNsaWVudHMgdG8gZGVwb3NpdC93aXRoZHJhdyBtb25leSBmcm9tIHRoZWlyIERyaXZlV2VhbHRoIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbmV5TW92ZW1lbnQge1xuXHRzdGF0aWMgRElSRUNUSU9OUyA9IHtcblx0XHRERVBPU0lUUzogXCJEZXBvc2l0c1wiLFxuXHRcdFdJVEhEUkFXQUxTOiBcIlJlZGVtcHRpb25zXCIsXG5cdH1cblxuXHQvKipcblx0ICogR2V0IG1vbmV5IG1vdmVtZW50IGxpc3QgYmFzZWQgb24gc3RhdHVzXG5cdCAqL1xuXHRzdGF0aWMgZ2V0TGlzdChcblx0XHRkaXJlY3Rpb246IHN0cmluZyxcblx0XHRzdGF0dXM6IHN0cmluZyxcblx0XHR0eXBlPzogQXJyYXk8c3RyaW5nPiB8IHN0cmluZyB8IG51bGwsXG5cdFx0b3B0aW9ucz86IFBhZ2luYXRpb25PcHRpb25zLFxuXHQpOiBQcm9taXNlPHsgZGF0YTogT2JqZWN0fT4ge1xuXHRcdGxldCBlbmRwb2ludCA9IGAvZnVuZGluZy8ke2RpcmVjdGlvbi50b0xvd2VyQ2FzZSgpfT9zdGF0dXM9JHtzdGF0dXMudG9VcHBlckNhc2UoKX1gO1xuXG5cdFx0aWYgKHR5cGUpIHtcblx0XHRcdGVuZHBvaW50ICs9IGAmdHlwZT0ke1xuXHRcdFx0XHQodHlwZW9mIHR5cGUgPT09IFwic3RyaW5nXCJcblx0XHRcdFx0XHQ/IHR5cGVcblx0XHRcdFx0XHQ6IHR5cGUuam9pbihcIixcIilcblx0XHRcdFx0KS50b1VwcGVyQ2FzZSgpXG5cdFx0XHR9YDtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucykge1xuXHRcdFx0aWYgKG9wdGlvbnMuZGlyZWN0aW9uICYmIG9wdGlvbnMub2Zmc2V0ICYmIG9wdGlvbnMubGltaXQpIHtcblx0XHRcdFx0ZW5kcG9pbnQgKz0gYCZsaW1pdD0ke29wdGlvbnMubGltaXR9Jm9mZnNldD0ke29wdGlvbnMub2Zmc2V0fSZkaXJlY3Rpb249JHtvcHRpb25zLmRpcmVjdGlvbn1gO1xuXHRcdFx0fSBlbHNlIGlmIChvcHRpb25zLmxpbWl0KSB7XG5cdFx0XHRcdGVuZHBvaW50ICs9IGAmbGltaXQ9JHtvcHRpb25zLmxpbWl0fWA7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlcXVlc3QoeyBlbmRwb2ludCB9KS50aGVuKGRhdGEgPT4gKHtcblx0XHRcdGRhdGE6IGRhdGEuYm9keSxcblx0XHR9KSk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGRldGFpbHMgYWJvdXQgYSBkZXBvc2l0L3JlZGVtcHRpb24gYnkgaXRzIElELlxuXHQgKi9cblx0c3RhdGljIGdldChpZDogc3RyaW5nLCBkaXJlY3Rpb246IHN0cmluZyk6IFByb21pc2U8TW9uZXlNb3ZlbWVudERldGFpbHM+IHtcblx0XHQvKlxuXHRcdCogdHlwZXM6IFwiZGVwb3NpdHNcIiB8IFwicmVkZW1wdGlvbnNcIlxuXHRcdCovXG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0ZW5kcG9pbnQ6IGAvZnVuZGluZy8ke2RpcmVjdGlvbn0vJHtpZH1gLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEVkaXQgZGV0YWlscyBhYm91dCBhIGRlcG9zaXQvcmVkZW1wdGlvbiBieSBpdHMgSUQuXG5cdCAqL1xuXHRzdGF0aWMgZWRpdChpZDogc3RyaW5nLCBkZXRhaWxzOiBPYmplY3QsIGRpcmVjdGlvbjogc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0bWV0aG9kOiBcIlBBVENIXCIsXG5cdFx0XHRlbmRwb2ludDogYC9mdW5kaW5nLyR7ZGlyZWN0aW9ufS8ke2lkfWAsXG5cdFx0XHRib2R5OiBkZXRhaWxzLFxuXHRcdH0pLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgZGF0YSBhYm91dCBkZXBvc2l0cy9yZWRlbXB0aW9uc1xuXHQgKi9cblx0c3RhdGljIGRvd25sb2FkQ1NWKFxuXHRcdGRpcmVjdGlvbjogc3RyaW5nLFxuXHRcdHN0YXR1czogc3RyaW5nLFxuXHRcdHR5cGU6IHN0cmluZyxcblx0KTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBlbmRwb2ludCA9IGAvZnVuZGluZy8ke2RpcmVjdGlvbi50b0xvd2VyQ2FzZSgpfS8ke3R5cGV9L2Rvd25sb2FkP3N0YXR1cz0ke3N0YXR1c31gO1xuXG5cdFx0cmV0dXJuIHJlcXVlc3Qoe1xuXHRcdFx0ZW5kcG9pbnQsXG5cdFx0XHRhZGRsSGVhZGVyczoge1xuXHRcdFx0XHRBY2NlcHQ6IFwidGV4dC9jc3ZcIixcblx0XHRcdH0sXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0UmVjdXJyaW5nRGVwb3NpdHNGb3JVc2VyKHVzZXJJRDogc3RyaW5nKSB7XG5cdFx0Y29uc3QgZW5kcG9pbnQgPSBgL3VzZXJzLyR7dXNlcklEfS9yZWN1cnJpbmctZGVwb3NpdHNgO1xuXHRcdHJldHVybiByZXF1ZXN0KHsgZW5kcG9pbnQgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0RGVwb3NpdEhpc3RvcnkoZGVwb3NpdElEOiBzdHJpbmcpIHtcblx0XHRjb25zdCBlbmRwb2ludCA9IGAvZnVuZGluZy9yZWN1cnJpbmctZGVwb3NpdHMvJHtkZXBvc2l0SUR9YDtcblx0XHRyZXR1cm4gcmVxdWVzdCh7IGVuZHBvaW50IH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0c3RhdGljIHVwZGF0ZVJlY3VycmluZ0RlcG9zaXQoZGVwb3NpdElEOiBzdHJpbmcsIGJvZHk6IFBhdGNoQm9keSkge1xuXHRcdGNvbnN0IGVuZHBvaW50ID0gYC9mdW5kaW5nL3JlY3VycmluZy1kZXBvc2l0cy8ke2RlcG9zaXRJRH1gO1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0ZW5kcG9pbnQsXG5cdFx0XHRib2R5LFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9XG5cblx0c3RhdGljIGRlbGV0ZVJlY3VycmluZ0RlcG9zaXQoZGVwb3NpdElEOiBzdHJpbmcpIHtcblx0XHRjb25zdCBlbmRwb2ludCA9IGAvZnVuZGluZy9yZWN1cnJpbmctZGVwb3NpdHMvJHtkZXBvc2l0SUR9YDtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRtZXRob2Q6IFwiREVMRVRFXCIsXG5cdFx0XHRlbmRwb2ludCxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YSk7XG5cdH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL01vbmV5TW92ZW1lbnQuanMiLCIvLyBAZmxvd1xuaW1wb3J0IHJlcXVlc3QgZnJvbSBcIi4vcmVxdWVzdFwiO1xuaW1wb3J0IHR5cGUgeyBVc2VyRGV0YWlscyB9IGZyb20gXCIuLi90eXBlcy9Vc2VyXCI7XG5pbXBvcnQgdHlwZSB7XG5cdFJvbGUsXG5cdFJvbGVHcm91cCxcblx0UGVybWlzc2lvblJvbGUsXG59IGZyb20gXCIuLi90eXBlcy9Sb2xlc1wiO1xuXG4vKipcbiAqIEBtb2R1bGVcbiAqIEBkZXNjcmlwdGlvbiBSb2xlcyBhbGxvdyBjbGllbnRzIHRvIHNlbmQgUkVTVCByZXF1ZXN0cyB0byB0aGUgUGVybWlzc2lvbnMgQVBJLlxuICogQGV4YW1wbGUgaW1wb3J0IHsgUGVybWlzc2lvbnMgfSBmcm9tIFwiZHJpdmV3ZWFsdGgtYmFjay1vZmZpY2UtamF2YXNjcmlwdFwiO1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2xlcyB7XG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0QWxsUGVybWlzc2lvbkdyb3VwcygpOiBQcm9taXNlPEFycmF5PFJvbGVHcm91cD4+IHtcblx0XHRyZXR1cm4gcmVxdWVzdCh7XG5cdFx0XHRlbmRwb2ludDogYC9wZXJtaXNzaW9ucy9ncm91cHNgLFxuXHRcdH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzdGF0aWMgZ2V0QWxsUGVybWlzc2lvbnMoKTogUHJvbWlzZTxBcnJheTxSb2xlPj4ge1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdGVuZHBvaW50OiBgL3Blcm1pc3Npb25zYCxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fTtcblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGNyZWF0ZVBlcm1pc3Npb25Hcm91cChcblx0XHRhY3RpdmU6IGJvb2xlYW4sXG5cdFx0ZGVzY3JpcHRpb246IHN0cmluZyxcblx0XHRwZXJtaXNzaW9uU2V0OiBBcnJheTxzdHJpbmc+LFxuXHRcdHJvbGU6IHN0cmluZyxcblx0KTogUHJvbWlzZTxSb2xlR3JvdXA+IHtcblx0XHRjb25zdCBib2R5ID0ge1xuXHRcdFx0YWN0aXZlLFxuXHRcdFx0ZGVzY3JpcHRpb24sXG5cdFx0XHRwZXJtaXNzaW9uU2V0LFxuXHRcdFx0cm9sZSxcblx0XHR9O1xuXHRcdHJldHVybiByZXF1ZXN0KHtcblx0XHRcdG1ldGhvZDogXCJQT1NUXCIsXG5cdFx0XHRlbmRwb2ludDogYC9wZXJtaXNzaW9ucy9ncm91cHNgLFxuXHRcdFx0Ym9keSxcblx0XHR9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcblx0fTtcblxuXHQvKipcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0c3RhdGljIGVkaXRSb2xlKFxuXHRcdGlkOiBzdHJpbmcsXG5cdFx0cm9sZTogUm9sZUdyb3VwLFxuXHQpOiBQcm9taXNlPFBlcm1pc3Npb25Sb2xlPiB7XG5cdFx0Y29uc3QgYm9keSA9IHJvbGU7XG5cdFx0cmV0dXJuIHJlcXVlc3QgKHtcblx0XHRcdG1ldGhvZDogXCJQQVRDSFwiLFxuXHRcdFx0ZW5kcG9pbnQ6IGAvcGVybWlzc2lvbnMvZ3JvdXBzLyR7aWR9YCxcblx0XHRcdGJvZHksXG5cdFx0fSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG5cdH07XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvUm9sZXMuanMiLCIvLyBAZmxvd1xuaW1wb3J0IHJlcXVlc3QgZnJvbSBcIi4vcmVxdWVzdFwiO1xuaW1wb3J0IHR5cGUgeyBQcm9kdWN0RGV0YWlscywgQWxsb2NhdGlvbkJvZHksIFBvcnRmb2xpbywgRnVuZCwgRWRpdFByb2R1Y3QgfSBmcm9tIFwiLi4vdHlwZXMvQWR2aXNvcnNcIjtcblxuLyoqXG4gKiBAbW9kdWxlXG4gKiBAZXhhbXBsZSBpbXBvcnQgeyBBZHZpc29yIH0gZnJvbSBcImRyaXZld2VhbHRoLWJhY2stb2ZmaWNlLWphdmFzY3JpcHRcIjtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWR2aXNvciB7XG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBwcm9kdWN0XG5cdCAqL1xuICAgIHN0YXRpYyBjcmVhdGVQcm9kdWN0KHVzZXJJRDogc3RyaW5nLCBwcm9kdWN0RGV0YWlsczogUHJvZHVjdERldGFpbHMpIHtcbiAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgIHVzZXJJRCxcbiAgICAgICAgICAgIC4uLnByb2R1Y3REZXRhaWxzLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIGVuZHBvaW50OiBcIi9tYW5hZ2VkL3Byb2R1Y3RzXCIsXG4gICAgICAgIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiB1cGRhdGVzIGEgcHJvZHVjdFxuXHQgKi9cblxuICAgIHN0YXRpYyB1cGRhdGVQcm9kdWN0KHByb2R1Y3RJRDogc3RyaW5nLCBwcm9kdWN0RGV0YWlsczogRWRpdFByb2R1Y3QpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICAgICAgICBib2R5OiBwcm9kdWN0RGV0YWlscyxcbiAgICAgICAgICAgIGVuZHBvaW50OiBgL21hbmFnZWQvcHJvZHVjdHMvJHtwcm9kdWN0SUR9YCxcbiAgICAgICAgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIGdldCBhIHByb2R1Y3QgYnkgaWRcblx0ICovXG5cbiAgICBzdGF0aWMgZ2V0UHJvZHVjdEJ5SUQocHJvZHVjdElEOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QoeyBlbmRwb2ludDogYC9tYW5hZ2VkL3Byb2R1Y3RzLyR7cHJvZHVjdElEfWAgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIGdldCBwcm9kdWN0cyBmb3IgYW4gYWR2aXNvclxuXHQgKi9cblxuICAgIHN0YXRpYyBnZXRBbGxBZHZpc29yUHJvZHVjdHModXNlcklEOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QoeyBlbmRwb2ludDogYC91c2Vycy8ke3VzZXJJRH0vbWFuYWdlZC9wcm9kdWN0c2AgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEdldHMgYWxsIGFkdmlzb3JzIGFsbG9jYXRpb25zXG5cdCAqL1xuXG4gICAgc3RhdGljIGdldEFsbEFsbG9jYXRpb25zKGRhdGVGcm9tOiBEYXRlLCBkYXRlVG86IERhdGUpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QoeyBlbmRwb2ludDogYC9tYW5hZ2VkL2FsbG9jYXRpb25zP2Zyb209JHtkYXRlRnJvbS50b0lTT1N0cmluZygpfSZ0bz0ke2RhdGVUby50b0lTT1N0cmluZygpfWAgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEdldHMgYWxsb2NhdGlvbnMgZm9yIGFuIGluZGl2aWR1YWwgYWR2aXNvciBcblx0ICovXG5cbiAgICBzdGF0aWMgZ2V0QWR2aXNvckFsbG9jYXRpb25zKHVzZXJJRDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KHsgZW5kcG9pbnQ6IGAvdXNlcnMvJHt1c2VySUR9L21hbmFnZWQvYWxsb2NhdGlvbnNgIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogZ2V0cyBhIHNpbmdsZSBhbGxvY2F0aW9uXG4gICAgKi9cblxuICAgIHN0YXRpYyBnZXRBbGxvY2F0aW9uQnlJRChhbGxvY2F0aW9uSUQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7IGVuZHBvaW50OiBgL21hbmFnZWQvYWxsb2NhdGlvbnMvJHthbGxvY2F0aW9uSUR9YCB9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgKiBjcmVhdGVzIGFuIGFsbG9jYXRpb25cbiAgICAqL1xuXG4gICAgc3RhdGljIGNyZWF0ZUFsbG9jYXRpb24oYWxsb2NhdGlvbjogQWxsb2NhdGlvbkJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgICAgICAgICAgZW5kcG9pbnQ6IGAvbWFuYWdlZC9hbGxvY2F0aW9uc2AsXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgYm9keTogYWxsb2NhdGlvbixcbiAgICAgICAgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBnZXQgb3JkZXJzIGZvciBhbGwgYWR2aXNvcnNcbiAgICAqL1xuXG4gICAgc3RhdGljIGdldEFsbEFkdmlzb3JPcmRlcnMoZGF0ZUZyb206IERhdGUsIGRhdGVUbzogRGF0ZSkge1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7XG4gICAgICAgICAgICBlbmRwb2ludDogYC9tYW5hZ2VkL29yZGVycz9mcm9tPSR7ZGF0ZUZyb20udG9JU09TdHJpbmcoKX0mdG89JHtkYXRlVG8udG9JU09TdHJpbmcoKX1gLFxuICAgICAgICB9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgKiBnZXQgb3JkZXJzIGZvciBhbiBhZHZpc29yXG4gICAgKi9cblxuICAgIHN0YXRpYyBnZXRPcmRlcnNGb3JBZHZpc29yKHVzZXJJRDogc3RyaW5nLCBkYXRlRnJvbTogRGF0ZSwgZGF0ZVRvOiBEYXRlKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KHtcbiAgICAgICAgICAgIGVuZHBvaW50OiBgL3VzZXJzLyR7dXNlcklEfS9tYW5hZ2VkL29yZGVycz9mcm9tPSR7ZGF0ZUZyb20udG9JU09TdHJpbmcoKX0mdG89JHtkYXRlVG8udG9JU09TdHJpbmcoKX1gLFxuICAgICAgICB9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIGdldHMgYWR2aXNvcnMgcG9ydGZvbGlvXG4gICAgKi9cblxuICAgIHN0YXRpYyBnZXRBZHZpc29yUG9ydGZvbGlvcyh1c2VySUQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7IGVuZHBvaW50OiBgL3VzZXJzLyR7dXNlcklEfS9tYW5hZ2VkL3BvcnRmb2xpb3NgIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAqIGdldCBwb3J0Zm9saW8gYnkgaWRcbiAgICAqL1xuXG4gICAgc3RhdGljIGdldFBvcnRmb2xpb0J5SWQocG9ydGZvbGlvSUQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7IGVuZHBvaW50OiBgL21hbmFnZWQvcG9ydGZvbGlvcy8ke3BvcnRmb2xpb0lEfWAgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICogQ3JlYXRlcyBhIHBvcnRmb2xpb1xuICAgICovXG5cbiAgICBzdGF0aWMgY3JlYXRlUG9ydGZvbGlvKHBvcnRmb2xpbzogUG9ydGZvbGlvKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KHtcbiAgICAgICAgICAgIGVuZHBvaW50OiBgL21hbmFnZWQvcG9ydGZvbGlvc2AsXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgYm9keTogcG9ydGZvbGlvLFxuICAgICAgICB9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgKiBFZGl0cyBhIHBvcnRmb2xpb1xuICAgICovXG5cbiAgICBzdGF0aWMgdXBkYXRlUG9ydGZvbGlvKHBvcnRmb2xpbzogUG9ydGZvbGlvLCBwb3J0Zm9saW9JRDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KHtcbiAgICAgICAgICAgIGVuZHBvaW50OiBgL21hbmFnZWQvcG9ydGZvbGlvcy8ke3BvcnRmb2xpb0lEfWAsXG4gICAgICAgICAgICBib2R5OiBwb3J0Zm9saW8sXG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBHZXRzIGZ1bmRzIGZvciBhbiBhZHZpc29yXG4gICAgKi9cblxuICAgIHN0YXRpYyBnZXRBZHZpc29yRnVuZHModXNlcklEOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Qoe1xuICAgICAgICAgICAgZW5kcG9pbnQ6IGAvdXNlcnMvJHt1c2VySUR9L21hbmFnZWQvZnVuZHNgLFxuICAgICAgICB9KS50aGVuKGRhdGEgPT4gZGF0YS5ib2R5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEdldHMgZGV0YWlscyBmb3IgYSBmdW5kXG4gICAgKi9cblxuICAgIHN0YXRpYyBnZXRGdW5kRGV0YWlscyhmdW5kSUQ6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7XG4gICAgICAgICAgICBlbmRwb2ludDogYC9tYW5hZ2VkL2Z1bmRzLyR7ZnVuZElEfWAsXG4gICAgICAgIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQ3JlYXRlcyBhIGZ1bmRcbiAgICAqL1xuXG4gICAgc3RhdGljIGNyZWF0ZUZ1bmQoZnVuZDogRnVuZCkge1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7XG4gICAgICAgICAgICBib2R5OiBmdW5kLFxuICAgICAgICAgICAgZW5kcG9pbnQ6IFwiL21hbmFnZWQvZnVuZHNcIixcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIH0pLnRoZW4oZGF0YSA9PiBkYXRhLmJvZHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgKiBVcGRhdGVzIGEgZnVuZFxuICAgKi9cblxuICAgIHN0YXRpYyB1cGRhdGVGdW5kKGZ1bmQ6IEZ1bmQsIGZ1bmRJRDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KHtcbiAgICAgICAgICAgIGJvZHk6IGZ1bmQsXG4gICAgICAgICAgICBlbmRwb2ludDogYC9tYW5hZ2VkL2Z1bmRzLyR7ZnVuZElEfWAsXG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgfSkudGhlbihkYXRhID0+IGRhdGEuYm9keSk7XG4gICAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9BZHZpc29ycy5qcyJdLCJzb3VyY2VSb290IjoiIn0=