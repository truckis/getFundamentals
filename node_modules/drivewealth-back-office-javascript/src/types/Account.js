// @flow
import type { OrderDetails } from "../types/Order";
import type { Transaction } from "../types/Transaction";

/**
 * @memberof Types
 */
type Cash = {
	cashAvailableForTrade: number,
	cashAvailableForWithdrawal: number,
	cashBalance: number,
	noBuyingPowerReason: null,
	cashSettlement: Array<{
		utcTime: string,
		cash: number,
	}>
};

/**
 * @memberof Types
 */
type Margin = {
	marginRequirement: number,
	longMarketValue: number,
	debitBalance: number,
	equity: number,
	equityFraction: number,
	equityRequired: number,
	accruedInterest: number,
	patternDayTrader: boolean,
	restricted: boolean,
	daySMA: number,
	rtExcessEquity: number,
	effectiveSMA: number,
	noBuyingPowerReason: string,
	marginCall: null | {
		marginCallType: string,
		marginCallTriggerType: string,
		equityRequired: number,
		callAmount: number
	},
	restingOrders: number,
};

/**
 * @memberof Types
 */
export type Position = {
	symbol: string,
	instrumentID: string,
	side: string,
	openQty: number,
	availableForTradingQty: number,
	costBasis: number,
	marketValue: number,
	priorClose: number,
	avgPrice: number,
	mktPrice: number,
	unrealizedPL: number,
	unrealizedDayPLPercent: number,
	unrealizedDayPL: number,
};

/**
 * @memberof Types
 */
export type Blotter = {
	accountID: string,
	accountNo: string,
	tradingType: string,
	lastUpdated: string,
	cash: Cash,
	margin: Margin | null,
	violations: {
		goodFaithViolations: { count: number },
		patternDayTrades: null,
		details: string | null,
	},
	equity: {
		equityValue: number,
		equityPositions: Array<Position>,
	},
	orders: Array<OrderDetails>,
	transactions: Array<Transaction>,
};

/**
 * @memberof Types
 */
export type AccountDetails = {
	id: string,
	userID: string,
	commissionID: string,
	accountID: string,
	accountNo: string,
	nickname: string,
	openedWhen: string,
	createdWhen: string | null,
	status: {
		name: string,
		description: string,
	} | null,
	accountType: {
		name: string,
		description: string,
	},
	accountMgmtType: {
		name: string,
		description: string,
	},
	tradingType: {
		name: string,
		description: string,
	},
	parentIB: {
		id: string,
		name: string,
	},
	freeTradeBalance: number,
	goodFaithViolations: number,
	patternDayTrades: number,
	leverage: number,
	sweepInd: boolean,
	restricted: boolean,
	interestFree: boolean,
	gfvPdtExempt: boolean,
	buyingPowerOverride: boolean,
	bod: {
		moneyMarket: number,
		equityValue: number,
		cashAvailableForWithdrawal: number,
		cashAvailableForTrading: number,
		cashBalance: number,
		updatedWhen: string,
	},
	ria: {
		advisorID: string,
		productID: string,
	},
	authorizedUsers: {},
	riaPortfolioID?: string,
};

/**
 * @memberof Types
 */
export type AccountTransferDetails = {
	accountFrom: string,
	accountTo: string,
	shares: Array<{
		symbol: string,
		averagePrice: number,
		quantity: number,
		batch: boolean
	}>,
	cash: {
		amount: number,
		batch: boolean,
	},
	comment: string,
};

/**
 * @memberof Types
 */
export type AccountTransferResponse = {
	accountFrom: string,
	accountTo: string,
	shares: Array<{
		symbol: string,
		averagePrice: number,
		quantity: number,
		batch: boolean,
		status: string,
	}>,
	cash: {
		amount: number,
		batch: boolean,
		status: string,
	}
};
