// @flow
import type {
	ProductDetails,
	AllocationBody,
	Portfolio,
	Fund,
	EditProduct,
} from "../types/Advisors";
import request from "./request";

/**
 * @module
 * @example import { Advisor } from "drivewealth-back-office-javascript";
 */
export default class Advisor {
	/**
	 * Create a product
	 */
	static createProduct(userID: string, productDetails: ProductDetails) {
		const body = {
			userID,
			...productDetails,
		};
		return request({
			method: "POST",
			body,
			endpoint: "/managed/products",
		}).then(data => data.body);
	}

	/**
	 * updates a product
	 */

	static updateProduct(productID: string, productDetails: EditProduct) {
		return request({
			method: "PATCH",
			body: productDetails,
			endpoint: `/managed/products/${productID}`,
		}).then(data => data.body);
	}

	/**
	 * get a product by id
	 */

	static getProductByID(productID: string) {
		return request({ endpoint: `/managed/products/${productID}` }).then(data => data.body);
	}

	/**
	 * get products for an advisor
	 */

	static getAllAdvisorProducts(userID: string) {
		return request({ endpoint: `/users/${userID}/managed/products` }).then(data => data.body);
	}

	/**
	 * Gets all advisors allocations
	 */

	static getAllAllocations(dateFrom: Date, dateTo: Date) {
		return request({ endpoint: `/managed/allocations?from=${dateFrom.toISOString()}&to=${dateTo.toISOString()}` }).then(data => data.body);
	}

	/**
	 * Gets allocations for an individual advisor
	 */

	static getAdvisorAllocations(userID: string) {
		return request({ endpoint: `/users/${userID}/managed/allocations` }).then(data => data.body);
	}

	/**
	* gets a single allocation
	*/

	static getAllocationByID(allocationID: string) {
		return request({ endpoint: `/managed/allocations/${allocationID}` }).then(data => data.body);
	}

	/**
	* creates an allocation
	*/

	static createAllocation(allocation: AllocationBody) {
		return request({
			endpoint: "/managed/allocations",
			method: "POST",
			body: allocation,
		}).then(data => data.body);
	}

	/**
	* get orders for all advisors
	*/

	static getAllAdvisorOrders(dateFrom: Date, dateTo: Date) {
		return request({
			endpoint: `/managed/orders?from=${dateFrom.toISOString()}&to=${dateTo.toISOString()}`,
		}).then(data => data.body);
	}

	/**
	* get orders for an advisor
	*/

	static getOrdersForAdvisor(userID: string, dateFrom: Date, dateTo: Date) {
		return request({
			endpoint: `/users/${userID}/managed/orders?from=${dateFrom.toISOString()}&to=${dateTo.toISOString()}`,
		}).then(data => data.body);
	}

	/**
	* gets advisors portfolio
	*/

	static getAdvisorPortfolios(userID: string) {
		return request({ endpoint: `/users/${userID}/managed/portfolios` }).then(data => data.body);
	}

	/**
	* get portfolio by id
	*/

	static getPortfolioById(portfolioID: string) {
		return request({ endpoint: `/managed/portfolios/${portfolioID}` }).then(data => data.body);
	}

	/**
	* Creates a portfolio
	*/

	static createPortfolio(portfolio: Portfolio) {
		return request({
			endpoint: "/managed/portfolios",
			method: "POST",
			body: portfolio,
		}).then(data => data.body);
	}

	/**
	* Edits a portfolio
	*/

	static updatePortfolio(portfolio: Portfolio, portfolioID: string) {
		return request({
			endpoint: `/managed/portfolios/${portfolioID}`,
			body: portfolio,
			method: "PATCH",
		}).then(data => data.body);
	}

	/**
	* Gets funds for an advisor
	*/

	static getAdvisorFunds(userID: string) {
		return request({
			endpoint: `/users/${userID}/managed/funds`,
		}).then(data => data.body);
	}

	/**
	* Gets details for a fund
	*/

	static getFundDetails(fundID: string) {
		return request({
			endpoint: `/managed/funds/${fundID}`,
		}).then(data => data.body);
	}

	/**
	* Creates a fund
	*/

	static createFund(fund: Fund) {
		return request({
			body: fund,
			endpoint: "/managed/funds",
			method: "POST",
		}).then(data => data.body);
	}

	/**
   * Updates a fund
   */

	static updateFund(fund: Fund, fundID: string) {
		return request({
			body: fund,
			endpoint: `/managed/funds/${fundID}`,
			method: "PATCH",
		}).then(data => data.body);
	}
}
