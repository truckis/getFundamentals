// @flow
import request from "./request";
import type {
	InstrumentBasic,
	InstrumentCreateDetails,
	CorporateActionEventTypes,
} from "../types/Instrument";

/**
 * @module
 * @description Instruments are the investment products available to buy and sell
 * on the DriveWealth platform.
 * @example import { Instrument } from "drivewealth-back-office-javascript";
 */
export default class Instrument {
	/**
	 * Create a new instrument from instrument data.
	 */
	static create(details: InstrumentCreateDetails): Promise<Instrument> {
		return request({
			method: "POST",
			endpoint: "/instruments",
			body: details,
		}).then(data => data.body);
	}

	/**
	 * Get details on a particular instrument.
	 */
	static get(instrumentID: string): Promise<Instrument> {
		return request({
			endpoint: `/instruments/${instrumentID}`,
		}).then(data => data.body);
	}

	/**
	 * @static
	 */
	static edit(
		instrumentID: string,
		details: InstrumentCreateDetails,
	): Promise<Instrument> {
		return request({
			method: "PATCH",
			endpoint: `/instruments/${instrumentID}`,
			body: details,
		}).then(data => data.body);
	}

	/**
	 * List all instruments.
	 */
	static getAll(): Promise<Array<InstrumentBasic>> {
		return request({
			endpoint: "/instruments",
		}).then(data => data.body);
	}

	/**
	 * @static
	 */
	static getCorporateActionEventTypes(): Promise<CorporateActionEventTypes> {
		return request({
			endpoint: "/instruments/corporateActionEventTypes",
		}).then(data => data.body);
	}

	static formatValue(key: string, value: any): string {
		switch (key) {
			case "startDate":
			case "endDate":
				return value.toISOString();
			default:
				return value;
		}
	}

	/**
	 * @static
	 */
	static getCorporateActions(query: {
		symbols?: Array<string>,
		eventTypes?: Array<string>,
		startDate?: Date,
		endDate?: Date,
	} = {}) {
		return request({
			endpoint: "/instruments/corporateActions?" + Object.keys(query)
				.reduce((x, y) => [...x, `${y}=${Instrument.formatValue(y, query[y])}`], [])
				.join("&"),
		}).then(data => data.body);
	}
}
