// @flow
import request from "./request";
import Violation from "./Violation";
import type {
	AccountDetails,
	Blotter,
	AccountTransferDetails,
	AccountTransferResponse,
} from "../types/Account";
import type { ViolationCreateDetails } from "../types/Violation";

/**
 * @module
 * @description Accounts are assigned to a user and a user can have many accounts. There are a
 * few attributes that define the account, how and when it can trade and who is trading it.
 * @example import { Account } from "drivewealth-back-office-javascript";
 */
export default class Account {
	/**
	 * @constant
	 * @property {string} CASH
	 * @property {string} ORDERS
	 * @property {string} TRANSACTIONS
	 * @property {string} EQUITY
	 * @property {string} VIOLATIONS
	 * @property {string} ALL
	 */
	static BLOTTER_TYPES = {
		CASH: "cash",
		ORDERS: "orders",
		TRANSACTIONS: "transactions",
		EQUITY: "equity",
		VIOLATIONS: "violations",
		ALL: null,
	};

	/**
	 * Create a new account tied to a user.
	 */
	static create(userID: string, details: {
		accountType: string,
		accountManagementType: string,
		tradingType: string,
		riaID?: string,
		riaProductID?: string,
		authorizedUsers?: Array<{
			userID: string,
			permissions: Array<string>,
		}>,
		ignoreBuyingPower?: boolean,
		violationsExempt?: boolean,
	}): Promise<AccountDetails> {
		return request({
			method: "POST",
			endpoint: "/accounts",
			body: {
				...details,
				userID,
			},
		}).then(data => data.body);
	}

	/**
	 * Get account by accountID.
	 */
	static get(accountID: string): Promise<AccountDetails> {
		return request({
			endpoint: `/accounts/${accountID}`,
		}).then(data => data.body.account);
	}

	/**
	 * Get account by accountNo.
	 */
	static getByAccountNo(accountNo: string): Promise<{
		accountNo: string,
		accountID: string,
		emailAddress1: string,
		firstName: string,
		lastName: string,
		userID: string,
		username: string,
		userType: number,
	}> {
		return request({
			endpoint: `/accounts/search?accountNo=${accountNo.toUpperCase()}`,
		}).then(data => data.body.result);
	}

	/**
	 * @static
	 */
	static edit(accountID: string, details: $Shape<AccountDetails>): Promise<AccountDetails> {
		return request({
			method: "PATCH",
			endpoint: `/accounts/${accountID}`,
			body: details,
		}).then(data => data.body);
	}

	/**
	 * Get Account Summary. Optionally retrieve specific data with a [Blotter Type](#blottertypes).
	 */
	static getBlotter(accountID: string, type?: string): Promise<Blotter> {
		return request({
			method: "GET",
			endpoint: `/accounts/${accountID}/summary`,
		}).then(({ body: { accountSummary } }) => type ? accountSummary[type] : accountSummary);
	}

	/**
	 * Transfer positions and/or cash from one account to another.
	 */
	static transfer(details: AccountTransferDetails): Promise<AccountTransferResponse> {
		return request({
			method: "POST",
			endpoint: "/accounts/transfer",
			body: {
				...details,
				accountFrom: details.accountFrom.toUpperCase(),
				accountTo: details.accountTo.toUpperCase(),
			},
		}).then(data => data.body);
	}

	/**
	 * @static
	 */
	static createViolation(accountID: string, details: ViolationCreateDetails): Promise<void> {
		return Violation.create(accountID, details);
	}

	/**
	 * @static
	 */
	static getViolations(accountID: string): Promise<*> {
		return Violation.get(accountID);
	}

	/**
	 * @static
	 */
	static deleteViolation(accountID: string, violationID: string): Promise<void> {
		return Violation.delete(accountID, violationID);
	}

	/**
	 * @static
	 */
	static updateCommission(accountID: string, commissionID: string) {
		return request({
			endpoint: `/accounts/${accountID}/commissions`,
			method: "POST",
			body: { commissionID },
		}).then(data => data.body.account);
	}

	/**
	 * @static
	 */
	static getMarginCallList(): Promise<Array<Object>> {
		return request({
			endpoint: "/accounts/margin-call",
		}).then(data => data.body);
	}

	/**
	 * @static
	 */
	static getMarginCallAccountSummaries(): Promise<{
		accounts: Array<AccountDetails>,
		summaries: Array<Blotter>,
	}> {
		return Account.getMarginCallList().then(
			accounts => Promise.all(accounts.map(({ id }) => Account.getBlotter(id)))
				.then(summaries => ({ accounts, summaries })),
		);
	}

	/**
	 * @static
	 */
	static editPosition(
		accountID: string,
		symbol: string,
		qty: number,
		price?: number,
	): Promise<void> {
		return request({
			endpoint: `/accounts/${accountID}/positions`,
			method: "PATCH",
			body: {
				symbol,
				quantityAdjustment: qty,
				price,
			},
		}).then(() => {
		});
	}

	// I know Object is very bad type
	static getPortfolioStatus(accountID: string): Promise<Object> {
		return request({
			endpoint: `/accounts/${accountID}/portfolio`,
		}).then(data => data.body);
	}
}
