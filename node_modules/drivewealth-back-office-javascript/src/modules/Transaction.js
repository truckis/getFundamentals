// @flow
import type {
	TransactionType,
	TransactionTypeList,
	TransactionCreateResponse,
	TransactionDetails,
	TransactionBatchResponse,
	PaginationOptions,
} from "../types/Transaction";
import request from "./request";

/**
 * @module
 * @description Transactions have unique types.
 * @example import { Transaction } from "drivewealth-back-office-javascript";
 */
export default class Transaction {
	/**
	 * Transaction types include deposits, withdrawals, journals and fees.
	 */
	static getAllTransactionTypes(): Promise<Array<TransactionTypeList>> {
		return request({ endpoint: "/transactions/types" }).then(data => data.body);
	}

	/**
	 * Get back only relevant Transaction Types by specifying a wlpID.
	 */
	static getTransactionTypes(wlpID: string = "DW"): Promise<Array<TransactionType>> {
		return request({
			endpoint: `/transactions/types?wlpID=${wlpID}`,
		}).then(data => data.body[0].types);
	}

	/**
	 * Create a new Transaction.
	 */
	static create(accountID: string, details: {
		amount: number,
		comment: string,
		source: string,
		wlpFinTranTypeID: string,
	}): Promise<TransactionCreateResponse> {
		return request({
			method: "POST",
			endpoint: `/accounts/${accountID}/transactions`,
			body: details,
		}).then(data => data.body);
	}

	/**
	 * Get transactions by account and date.
	 */
	static get(
		accountID: string,
		startDate: Date,
		endDate: Date,
		options?: PaginationOptions,
	): Promise<Array<TransactionDetails>> {
		const base = `/accounts/${accountID}/transactions`;
		const dateRange = `?from=${startDate.toISOString()}&to=${endDate.toISOString()}`;
		let limit;
		if (options && options.limit) {
			limit = options.limit;
		} else {
			limit = 40;
		}
		const limitParam = `&limit=${limit}`;
		let url = base + dateRange + limitParam;

		if (options && options.direction && options.offset) {
			url += `&offset=${options.offset}&direction=${options.direction}`;
		}

		return request({ endpoint: url }).then(data => data.body);
	}

	/**
	 * @static
	 */
	static batch(transactions: Array<{
		accountNo: string,
		transactionType: string,
		batchCode: string,
		amount: number,
		comment: string,
	}>): Promise<Array<TransactionBatchResponse>> {
		return request({
			method: "POST",
			endpoint: "/transactions/batch",
			body: transactions,
		}).then(data => data.body);
	}
}
