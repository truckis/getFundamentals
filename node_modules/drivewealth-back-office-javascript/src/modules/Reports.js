// @flow
import type { ReportTicket, ReportViolations, ExtraFields, ReportFile } from "../types/Reports";
import Sessions from "../internal/Sessions";
import { Config, HOSTS } from "./Config";
import request from "./request";

// This definition tells flow that there is a global "document" accessible in a browser
declare var document: Object;

/**
 * @module
 * @example import { Reports } from "drivewealth-back-office-javascript";
 */
export default class Reports {
	/**
	 * @constant
	 * @property {string} PDF
	 * @property {string} XLS
	 * @property {string} JSON
	 * @property {string} HTML
	 */
	static REPORT_FORMATS = {
		PDF: "PDF",
		XLS: "XLS",
		JSON: "JSON",
		HTML: "HTML",
	};

	/**
	 * @constant
	 * @property {string} RESTRICTED
	 * @property {string} ACCOUNT_VIOLATIONS
	 * @property {string} TICKET_AUDIT
	 * @property {string} RECONCILIATION
	 * @property {string} TRANSACTION
	 * @property {string} POSITIONS_AND_ORDERS
	 * @property {string} POSITIONS
	 * @property {string} PLACED_ORDERS
	 * @property {string} REFERRED_ACCOUNTS
	 * @property {string} FINANCIALS
	 * @property {string} CORRESPONDENT
	 * @property {string} STATEMENTS
	 * @property {string} CONFIRMS
	 */
	static REPORT_NAMES = {
		RESTRICTED: "RestrictedReport",
		ACCOUNT_VIOLATIONS: "AccountViolations",
		TICKET_AUDIT: "TicketAudit",
		RECONCILIATION: "EodNotification",
		TRANSACTION: "EodTransaction",
		POSITIONS_AND_ORDERS: "PositionRestingOrder",
		POSITIONS: "PositionDetail",
		PLACED_ORDERS: "OrderTrans",
		REFERRED_ACCOUNTS: "Account",
		FINANCIALS: "AccountFins",
		CORRESPONDENT: "correspondantReport",
		STATEMENTS: "statements",
		CONFIRMS: "confirms",
	};

	static constructBody = (format: string, name: string, extraFields: ?ExtraFields) => ({
		ReportFormat: format,
		ReportName: name,
		sessionKey: Sessions.get(),
		WlpID: "DW",
		LanguageID: "en_US",
		...extraFields,
	});

	/**
	 * Download a specific report.
	 * @param format Report [file type](#Reports.REPORT_FORMATS)
	 * @param name Report [name](#Reports.REPORT_NAMES)
	 * @param extraFields Optionally filter the report with [extra properties](#extrafields)
	 */
	static downloadReport(format: string, name: string, extraFields: ?Object): void {
		const fields = Reports.constructBody(format, name, extraFields);

		const url = Config.env[HOSTS.REPORTS] + "/DriveWealth";

		const form = document.createElement("form");
		form.setAttribute("target", "_blank");
		form.setAttribute("method", "post");
		form.setAttribute("action", url);

		for (const field in fields) {
			const input = document.createElement("input");
			input.setAttribute("name", field);
			input.setAttribute("value", fields[field]);
			input.setAttribute("type", "hidden");
			form.appendChild(input);
		}

		document.body.appendChild(form);
		form.submit();
		form.parentNode.removeChild(form);
	}

	/**
	 * Get specific report data.
	 * @param name Report [name](#Reports.REPORT_NAMES)
	 * @param extraFields Optionally filter the report with [extra properties](#extrafields)
	 */
	static getReport(name: string, extraFields: ?Object): Promise<any> {
		return request({
			method: "POST",
			host: HOSTS.REPORTS,
			endpoint: "/DriveWealth",
			body: Reports.constructBody(Reports.REPORT_FORMATS.JSON, name, extraFields),
			authenticated: false,
			usesAppKey: false,
			addlHeaders: {
				"Content-Type": "application/x-www-form-urlencoded",
			},
		}).then(data => data.body);
	}

	/**
	 * @static
	 */
	static listFiles(
		accountID: string,
		reportName: string,
		dateStart: string,
		dateEnd: string,
	): Promise<Array<ReportFile>> {
		return request({
			endpoint: `/accounts/${accountID}/${reportName}?from=${dateStart}&to=${dateEnd}`,
		}).then(data => data.body);
	}

	/**
	 * @static
	 */
	static getFileURL(accountID: string, fileKey: string): Promise<string> {
		return request({
			endpoint: `/${Reports.REPORT_NAMES.STATEMENTS}/${accountID}/${fileKey}`,
		}).then(data => data.body.url);
	}

	/**
	 * @static
	 */
	static downloadRestrictedReport(fileType: string): void {
		Reports.downloadReport(fileType, Reports.REPORT_NAMES.RESTRICTED, {
			subscription: true,
		});
	}

	/**
	 * @static
	 */
	static downloadAccountViolations(fileType: string, TradingType: string, date: Date): void {
		Reports.downloadReport(fileType, Reports.REPORT_NAMES.ACCOUNT_VIOLATIONS, {
			TradingType,
			Date: date.toISOString(),
		});
	}

	/**
	 * @static
	 */
	static getAccountViolations(TradingType: string, date: Date): Promise<Array<ReportViolations>> {
		return Reports.getReport(Reports.REPORT_NAMES.ACCOUNT_VIOLATIONS, {
			TradingType,
			Date: date.toISOString(),
		});
	}

	/**
	 * @static
	 */
	static downloadTicketAudit(fileType: string, OrderNo: string): void {
		Reports.downloadReport(fileType, Reports.REPORT_NAMES.TICKET_AUDIT, {
			OrderNo: OrderNo.toUpperCase(),
		});
	}

	/**
	 * @static
	 */
	static getTicketAudit(OrderNo: string): Promise<Array<ReportTicket>> {
		return Reports.getReport(Reports.REPORT_NAMES.TICKET_AUDIT, {
			OrderNo: OrderNo.toUpperCase(),
		});
	}

	/**
	 * @static
	 */
	static getCorrespondant(date: string): Promise<string> {
		return request({
			endpoint: `/${Reports.REPORT_NAMES.CORRESPONDENT}?date=${date}`,
		}).then(data => data.body.url);
	}
}
