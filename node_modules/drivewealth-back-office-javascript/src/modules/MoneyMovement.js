// @flow
import type { MoneyMovementDetails, PatchBody } from "../types/MoneyMovement";
import type { PaginationOptions } from "../types/Transaction";
import request from "./request";

/**
 * @class MoneyMovement
 * @description allow clients to deposit/withdraw money from their DriveWealth account.
 */
export default class MoneyMovement {
	static DIRECTIONS = {
		DEPOSITS: "Deposits",
		WITHDRAWALS: "Redemptions",
		SUBSCRIPTION_TRANS: "SUBSCRIPTION_TRANS",
	};

	/**
	 * Get money movement list based on status
	 */
	static getList(
		direction: string,
		status: string,
		type?: Array<string> | string | null,
		options?: PaginationOptions,
	): Promise<{ data: Object}> {
		let endpoint = direction !== MoneyMovement.DIRECTIONS.SUBSCRIPTION_TRANS
			? `/funding/${direction.toLowerCase()}?status=${status.toUpperCase()}`
			: `/subscriptions/transactions?status=${status.toUpperCase()}`;

		if (type) {
			endpoint += `&type=${
				(typeof type === "string"
					? type
					: type.join(",")
				).toUpperCase()
			}`;
		}

		if (options) {
			if (options.direction && options.offset && options.limit) {
				endpoint += `&limit=${options.limit}&offset=${options.offset}&direction=${options.direction}`;
			} else if (options.limit) {
				endpoint += `&limit=${options.limit}`;
			}
		}

		return request({ endpoint }).then(data => ({
			data: data.body,
		}));
	}

	/**
	 * Get details about a deposit/redemption by its ID.
	 */
	static get(id: string, direction: string): Promise<MoneyMovementDetails> {
		/*
		* types: "deposits" | "redemptions"
		*/
		return request({
			endpoint: direction !== MoneyMovement.DIRECTIONS.SUBSCRIPTION_TRANS
				? `/funding/${direction.toLowerCase()}/${id}`
				: `/subscriptions/transactions/${id}`,
		}).then(data => data.body);
	}

	/**
	 * Edit details about a deposit/redemption by its ID.
	 */
	static edit(id: string, details: Object, direction: string) {
		return request({
			method: "PATCH",
			endpoint: direction !== MoneyMovement.DIRECTIONS.SUBSCRIPTION_TRANS
				? `/funding/${direction.toLowerCase()}/${id}`
				: `/subscriptions/transactions/${id}`,
			body: details,
		}).then(() => undefined);
	}

	/**
	 * Get data about deposits/redemptions
	 */
	static downloadCSV(
		direction: string,
		status: string,
		type: string,
	): Promise<string> {
		const endpoint = direction !== MoneyMovement.DIRECTIONS.SUBSCRIPTION_TRANS
			? `/funding/${direction.toLowerCase()}/${type}/download?status=${status}`
			: `/subscriptions/transactions?status=${status}`;

		return request({
			endpoint,
			addlHeaders: {
				Accept: "text/csv",
			},
		}).then(data => data.body);
	}

	static getRecurringDepositsForUser(userID: string) {
		const endpoint = `/users/${userID}/recurring-deposits`;
		return request({ endpoint }).then(data => data.body);
	}

	static getDepositHistory(depositID: string) {
		const endpoint = `/funding/recurring-deposits/${depositID}`;
		return request({ endpoint }).then(data => data.body);
	}

	static updateRecurringDeposit(depositID: string, body: PatchBody) {
		const endpoint = `/funding/recurring-deposits/${depositID}`;
		return request({
			method: "PATCH",
			endpoint,
			body,
		}).then(data => data.body);
	}

	static deleteRecurringDeposit(depositID: string) {
		const endpoint = `/funding/recurring-deposits/${depositID}`;
		return request({
			method: "DELETE",
			endpoint,
		}).then(data => data);
	}
}
