// @flow
import request from "./request";
import { Config } from "./Config";
import Sessions from "../internal/Sessions";

/**
 * @class Auth
 * @example import { Auth } from "drivewealth-back-office-javascript";
 */
export default class Auth {
	static pendingTempCode = null;
	static pendingUsername = null;
	static pending2FAType = null;

	/**
	 * @constant
	 * @property {string} SMS
	 */
	static VERIFICATION_TYPES = {
		SMS: "sms",
	};

	/**
	 * @static
	 */
	static login(username: string, password: string): Promise<Object> {
		return request({
			method: "POST",
			endpoint: "/auth",
			body: {
				username,
				password,
				appVersion: Config.appVersion,

				ip_address: "unknown",
				languageID: "en_US",
				osVersion: "unknown",
				osType: "unknown",
				scrRes: "unknown",
				appTypeID: 4,
			},
		}).then(({ body }) => {
			if (body.authToken) {
				Sessions.save(body.authToken);
				return body;
			}

			Auth.pendingTempCode = body.tempCode;
			Auth.pendingUsername = body.username;
			delete body.tempCode;
			delete body.username;
			return body;
		});
	}

	/**
	 * @static
	 */
	static issue2FACode(type: string): Promise<Object> {
		if (!Auth.pendingTempCode) throw new Error("No login pending. Call Auth.login() first!");
		return request({
			method: "POST",
			endpoint: "/auth/2fa",
			body: {
				username: Auth.pendingUsername,
				tempCode: Auth.pendingTempCode,
				"2FAType": type,
				locale: "en",
			},
		}).then(({ body }) => {
			Auth.pending2FAType = type;
			return body;
		});
	}

	/**
	 * @static
	 */
	static verify2FACode(code: string): Promise<Object> {
		if (!Auth.pending2FAType) {
			throw new Error("No login pending. Call Auth.login(), then Auth.issue2FACode() first.");
		}
		return request({
			method: "POST",
			endpoint: "/auth/2fa/verification",
			body: {
				username: Auth.pendingUsername,
				tempCode: Auth.pendingTempCode,
				"2FAType": Auth.pending2FAType,
				verificationCode: code,
			},
		}).then(({ body }) => {
			Auth.pendingTempCode = null;
			Auth.pendingUsername = null;
			Auth.pending2FAType = null;
			Sessions.save(body.authResponse.authToken);
			return body.authResponse;
		});
	}

	static onUnAuth(callback: Function) {
		Config.onUnAuth = callback;
	}
}
